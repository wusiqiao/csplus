<?php

namespace EShop\Controller;

use Think\Controller;

class SysDocumentController extends BaseDataController {

    protected $filter_request = [
        'newFolder','rename','delete','uploadFile','folders','moveFile',
        'refreshData','selectCompany','index','shareFile'
    ];//可以获取数据的方法
    protected $_model = 'SysDocument';
    protected $filter_location_post = [
        'newFolder','rename','delete','uploadFile','moveFile',
        'refreshData','shareFile'
    ];
    protected $open = true;
    protected $target_branch = 0;
    protected $request_default = [
        'folders'=>['id',0],
        'selectCompany'=>['init',0],
        'index' => ['id',0]
    ];
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
//        $this->handlerTargetBranch();
        $this->validateFilterLocationModule();
        $this->handlerDefaultViewData();
        $this->storage->model = D($this->_model);
        if (IS_POST) {
            $this->storage->model->setTargetBranch($this->request->target_branch);
        }
    }

//    public function indexAction(){
//        $this->handlerModelPoint('getDocumentLists','userbranch');
//        $this->display();
//    }
    public function indexAction()
    {
        $is_action = 1;
        if ($this->hasBranchStaff()) {
            $firstCompany = $this->handlerModelPoint('getFirstCompanySingle','id,name');
            $this->companyname = $firstCompany['name'] ?? '暂无公司';
            $target_branch = $firstCompany['id'] > 0 ? $firstCompany['id'] :  null;
            $this->storage->model->setTargetBranch($target_branch);
            $this->is_staff = 1;
            if ($this->hasBranchStaff() && !$this->isManager) {
                $condition['module'] = CONTROLLER_NAME;
                $condition['branch_id'] = getBrowseBranchId();
                $condition['company_id'] =$target_branch;
                $condition['user_id'] = session('user_id');
                $condition["type"] = DAC_SETTING_TYPE_BRANCH;
                $company_ids = M("SysUserModuleSetting")->where($condition)->getField('company_id',true);
                if (!$company_ids) {
                    $is_action = 0;
                }
            }
        } else {
            $firstCompany = $this->handlerModelPoint('getFirstUserBindCompanySingle','branch.id,branch.name');
            $this->companyname = $firstCompany['name'] ?? '暂无公司';
            $target_branch = $firstCompany['id'] > 0 ? $firstCompany['id'] :  null;
            $this->storage->model->setTargetBranch($target_branch);
            $this->is_staff = 0;
        }
        $this->assign('isAction',$is_action);
        $this->assign('target_branch',$target_branch);
        $this->documents = json_encode($this->getDocumentsList('myBranch'));
        $this->display();
    }
    public function newFolderAction()
    {
        if ($this->handlerRequestPoint()) {
            $validate = $this->handlerModelPoint('ValidateNewFile');
            if ($validate['error'] === 0) {
                $result = $this->handlerModelPoint();
                $this->handlerResponse($result);
            } else {
                $this->handlerResponse($validate);
            }
        }
    }
    public function entranceAction(){
        $this->selectCompanyAction(0,null,'SysDocument/index');
    }
    public function selectCompanyAction($init = 0,$name = null,$view = false){
        $condition = [];
        if ( session('user_type') == USER_TYPE_COMPANY_MANAGER ){
            if (!empty($name)) {
                $condition['a.name'] = array('LIKE','%'.$name.'%');
            }
            $condition['a.type'] = 1;
            $condition['a.parent_id'] = $this->user_branch;
//            $user_session = $_SESSION;
//            if (!$this->isManager) {
//                if ($user_session['userDataAccess']['_branchs']) {
//                    $condition['a.id'] = array('in',$user_session['userDataAccess']['_branchs']);
//                } else {
//                    $condition['a.id'] = 0;
//                }
//            }
            $this->company = D('ComCompany')
                ->setDacFilter('a')
                ->field('DISTINCT a.id as value,a.name as text,a.linkman,a.contact')
                ->where($condition)->select();
        } else {
            if (!empty($name)) {
                $condition['branch.name'] = array('LIKE','%'.$name.'%');
            }
            $condition['user_branch.user_id'] = session('user_id');
            $condition['branch.type'] = ORG_COMPANY;
            $this->company =
                    D('ComCompany')
                    //->setDacFilter('branch')
                    ->alias('branch')
                    ->field('branch.id as value,branch.name as text,branch.linkman,branch.contact')
                    ->join('sys_user_branch as user_branch on user_branch.branch_id = branch.id')
                    ->where($condition)->select();
        }
        if ($view === false){
            $this->assign('is_view', 0);
        } else {
            $this->assign('is_view', 1);
            $this->assign('view_url', $view);
        }
        $this->assign('title','公司选择');
        $this->init = $init;
        $this->display('SysDocument/select_company');
    }
    public function renameAction()
    {
        if ($this->handlerRequestPoint()) {
            $validate = $this->handlerModelPoint('ValidateRenameFile');
            if ($validate['error'] === 0) {
                $result = $this->handlerModelPoint();
                $this->handlerResponse($result);
            } else {
                $this->handlerResponse($validate);
            }
        }
    }
    public function deleteAction()
    {
        if ($this->handlerRequestPoint()) {
            $validate = $this->handlerModelPoint('ValidateDeleteFile');
            if ($validate['error'] === 0) {
                $result = $this->handlerModelPoint();
                $this->handlerResponse($result);
            } else {
                $this->handlerResponse($validate);
            }
        }
    }
    public function uploadFileAction(){
        if ($this->handlerRequestPoint()) {
            $upload = new \ESAdmin\Controller\UploadController();
            $info = $upload->documentUpload();
            if ($info) {
                $data['path'] = $info['File0']['url'];
                $data['size'] = $info['File0']['size'];
                $data['format'] = $info['File0']['type'];
                $data['ext'] = $info['File0']['ext'];
                $data['name'] = $this->handlerModelPoint('ValidateUploadFile');
                $data['parent_id'] = $this->request->pid;
                $data['user_id'] = session('user_id');
                $data['is_valid'] = 1;
                $data['type'] = 1;
                $data['created_at'] = time();
                $data['updated_at'] = time();
                $data['user_branch_id'] = getUserCompanyId();
                $data['creator_id'] = session('user_id');
                if ( $this->hasBranchStaff() ){
                    $data['branch_id'] = $this->user_branch;
                    $data['target_branch'] = $this->request->target_branch;
                } else {
                    $data['branch_id'] = $this->request->target_branch;
                    $data['target_branch'] = 0;
                }
                $result = $this->handlerModelPoint(ACTION_NAME,$data);
                if ($result) {
                    $this->ajaxReturn(['error' => 0,'message' =>'上传文件成功']);
                } else {
                    $this->ajaxReturn(['error' => 1,'message' =>'上传文件失败']);
                }
            } else {
                $this->ajaxReturn(['error' => 1,'message' =>'上传文件失败']);
            }
        }
    }
    public function foldersAction()
    {
        if ($this->handlerRequestPoint()) {
            $this->storage->model->setTargetBranch($this->request->target_branch);
            $result = $this->handlerModelPoint();
            $folders = $this->handlerDocumentTree($result['list']);
//            $folders = $this->build_tree($result['list'],'-1');
//            $lists['-1'] = ['name' => '首页','id'=>0,'parent_id'=>'-1','state'=>'closed','mold'=>'folder','current' => '文档库/首页','children' => $folders];
//            if ($result['checked']['parent_id'] == 0) {
//                $lists['-1']['is_checked'] = false;
//            } else {
//                $lists['-1']['is_checked'] = true;
//            }
            $lists = $folders;
            //初始文件夹
            $this->assign('target_branch',$this->request->target_branch);
            $this->lists = json_encode($lists);
            $this->model = $this->request->id > 0 ? json_encode(['id' => $this->request->id,'parent_id' => $result['checked']['parent_id']]) : json_encode([]);
            $this->display('folders');
        }
    }
    public function moveFileAction()
    {
        if ($this->handlerRequestPoint() && $this->handlerModelPoint('ValidateMoveFile')) {
            $result = $this->handlerModelPoint();
            $this->handlerResponse($result);
        }
    }
    public function shareFileAction()
    {
        $condition['id'] = $this->request->id;
        $the_file = D(CONTROLLER_NAME) ->where($condition)->find();
        if ($this->hasFilerShare($the_file)) {
            $data['share'] = $the_file['share'] == 1 ? 0 : 1;
            $message =  $the_file['share'] == 1 ? '设为私密' : '取消私密';
            $result = D(CONTROLLER_NAME) ->where($condition)->data($data)->save();
            if ($result) {
                $this->ajaxReturn(buildMessage('已成功'.$message,0));
            } else {
                $this->ajaxReturn(buildMessage('操作失败!',1));
            }
        } else {
            $this->ajaxReturn(buildMessage('您没有此权限!',1));
        }
    }
//    public function saveRefreshDocumentsAction()
//    {
//        $this->storage->model->setTargetBranch($this->request->target_branch);
//        $this->handlerResponse(["error"=>0,'data'=>$this->getDocumentsList($this->request->target)]);
//    }
    public function refreshDataAction()
    {
        $is_action = 1;
        if ($this->hasBranchStaff() && !$this->isManager) {
            $condition['module'] = CONTROLLER_NAME;
            $condition['branch_id'] = getBrowseBranchId();
            $condition['company_id'] =$this->request->target_branch;
            $condition['user_id'] = session('user_id');
            $condition["type"] = DAC_SETTING_TYPE_BRANCH;
            $company_ids = M("SysUserModuleSetting")->where($condition)->getField('company_id',true);
            if (!$company_ids) {
                $is_action = 0;
            }
        }
        $this->handlerResponse(["error"=>0,'isAction' =>$is_action,'data'=>$this->getDocumentsList($this->request->target)]);
    }
    protected function getDocumentsList($type)
    {
        $documents = $this->handlerModelPoint('getDocumentLists',$type) ?? [];
        $documents = $this->handlerDocumentTree($documents);
        if(I("post.keyword") && $documents){
            reset($documents);
            $first_key = key($documents);
            $ids = $documents[$first_key]['ids'];
            $result = [];
            foreach ($ids as $k=>$id){
                $result[$id] = $documents[$id];
            }
        }else{
            $result = $documents;
        }
        return $result;
    }
    //数据库函数
    protected function getDocumentListsAppoint($target)
    {
        $documents =  $this->storage->model->getDocumentLists($target);
        foreach($documents as $key => $value){
            $documents[$key]["menu"] = false;
            if ($target == 'myBranch') {
                $documents[$key]["share_toggle"] = $this->hasFilerShare($value);
                if ($value['share'] == 1 ){
                    $documents[$key]["visible"] = true;
                }else {
                    $documents[$key]["visible"] = $documents[$key]["share_toggle"];
                }
            } else {
                $documents[$key]['visible'] = true;
            }
        }
        return $documents;
    }
    protected function getFirstCompanySingleAppoint($target)
    {
        return $this->storage->model->getFirstCompanySingle($target,$this->request->id);
    }
    protected function getFirstUserBindCompanySingleAppoint($target)
    {
        return $this->storage->model->getFirstUserBindCompanySingle($target,$this->request->id);
    }
    protected function newFolderAppoint()
    {
        return $this->storage->model->newFolder($this->request);
    }
    protected function renameAppoint()
    {
        return $this->storage->model->rename($this->request);
    }
    protected function deleteAppoint()
    {
        return $this->storage->model->delete($this->request);
    }
    protected function uploadFileAppoint($data)
    {
        return $this->storage->model->add($data);
    }
    protected function foldersAppoint()
    {
        return $this->storage->model->getMoveFolders($this->request);
    }
    protected function moveFileAppoint()
    {
        return $this->storage->model->moveFile($this->request);
    }

    protected function ValidateNewFileAppoint()
    {
        return $this->storage->model->ValidateNewFile($this->request);
    }
    protected function ValidateRenameFileAppoint()
    {
        return $this->storage->model->ValidateRenameFile($this->request);
    }
    protected function ValidateDeleteFileAppoint()
    {
        return $this->storage->model->ValidateDeleteFile($this->request);
    }
    protected function ValidateUploadFileAppoint()
    {
        $result =  $this->storage->model->ValidateUploadFile($this->request);
        return $result;
//        if ($result === true) {
//            return true;
//        } else {
//            $this->handlerResponse($result);
//            return false;
//        }
    }
    protected function ValidateMoveFileAppoint()
    {
        $result =  $this->storage->model->ValidateMoveFile($this->request);
        if ($result === true) {
            return true;
        } else {
            $this->handlerResponse($result);
            return false;
        }
    }
    //请求处理函数
    protected function handlerNewFolderRevise()
    {
        if (trim($this->request->name) == '') {
            $this->handlerResponse(['error'=>1,'message' => '文件夹名称不能为空']);
            return false;
        }
        $this->request->type = 0;
        return true;
    }
    protected function handlerRenameRevise()
    {
        if (trim($this->request->name) == '') {
            $this->handlerResponse(['error'=>1,'message' => '文件夹名称不能为空']);
            return false;
        }
        return true;
    }
    protected function handlerDeleteRevise()
    {
        if (empty($this->request->ids) || count($this->request->ids) == 0) {
            $this->handlerResponse(['error'=>1,'message' => '请选择所需删除的文件']);
            return false;
        }
        return true;
    }
    protected function handlerUploadFileRevise()
    {
        if ($this->request->ids >= 0) {
            if (empty($_FILES)) {
                $this->handlerResponse(['error'=>1,'message' => '请上传文件']);
                return false;
            }
            return true;
        } else {
            $this->handlerResponse(['error'=>1,'message' => '数据错误']);
            return false;
        }

    }
    protected function handlerFoldersRevise()
    {
        return true;
    }
    protected function hasBranchStaff()
    {
        return session('user_type') == USER_TYPE_COMPANY_MANAGER ? true : false;
    }
    protected function handlerMoveFileRevise()
    {
        if ($this->request->id > 0 && $this->request->pid >=0){
            return true;
        } else {
            $this->handlerResponse(['error'=>1,'message' => '数据错误']);
            return false;
        }
    }
    //数据处理函数
    protected function handlerDocumentTree($document,$first = '首页') {
        if ($document) {
            //搜索关键字高亮显示
            foreach ($document as $k=>$v){
                if(I("post.keyword")){
                    $document[$k]['text'] = str_replace(I("post.keyword"),"<p class='search-keyword'>".I("post.keyword")."</p>",$document[$k]['name']);
                }else{
                    $document[$k]['text'] = $document[$k]['name'];
                }
            }
            $tree  =  $this->build_tree_list($document,'id',$first);
            return $tree;
        }
    }
//    protected function handlerTargetBranch()
//    {
//        $this->target_branch = $this->user_branch;
//    }
    private function hasFilerShare($file_author = null)
    {
        if ($file_author['user_id'] == $this->userId){
            return true;
        }else if ($this->hasBranchStaff()) {
            if ( $this->isManager) {
                return true;
            }
            $condition['module'] = CONTROLLER_NAME;
            $condition['company_id'] = $file_author['target_branch'];
            $condition['permit_value'] = 8;
            $condition["type"] = DAC_SETTING_TYPE_BRANCH;
            $service_ids = M("SysUserModuleSetting")->where($condition)->getField('user_id',true);
            if (in_array(session('user_id'),$service_ids)) {
                return true;
            } else {
                return false;
            }
        } else if(!$this->hasBranchStaff()) {
            $where['id'] = $this->companyId;
            $where['leader_id'] = $this->userId;
            $where['parent_id'] = $this->user_branch;
            if (M("SysBranch")->where($where)->count() > 0){
                return true;
            } else {
                return false;
            }
        }
        return false;
    }
    /* 产生列表，按层级排序 */
    protected function build_tree_list($list, $id_field = 'value',$first = '首页') {
        $parent_list = [];
        $tree_list = [];
        foreach($list as $key =>$value) {
            $list[$key]['mold'] = $value['type'] == 1 ? 'file' : 'folder';
            $list[$key]['name'] = $value['type'] == 1 ? $value['name'].'.'.$value['ext'] : $value['name'];
            $parent_list[$value['parent_id']][] = $list[$key];
        }
        foreach($list as $key =>$value) {
            if ($value['parent_id'] == 0 && empty(I("post.keyword"))) {
                $tree_list[$value[$id_field]] = $value;
                $tree_list[$value[$id_field]]['current'] = $first.'/'.$value['name'];
                $tree_list[$value[$id_field]]['children'] = $this->build_tree_subsidiary($value[$id_field],$parent_list,$tree_list[$value[$id_field]]['current']);
            }elseif(!empty(I("post.keyword"))){
                $tree_list[$value[$id_field]] = $value;
                $tree_list[$value[$id_field]]['current'] = $first.'/'.$value['name'];
                $tree_list[$value[$id_field]]['children'] = $this->build_tree_subsidiary($value[$id_field],$parent_list,$tree_list[$value[$id_field]]['current']);
            }
        }
        return $tree_list;
    }
    protected function build_tree_subsidiary($parent_id,$data,$current)
    {
        if ($data[$parent_id]) {
            $subsidiary = [];
            foreach($data[$parent_id] as $key => $value) {
                $template = $value;
                $template['current'] = $current.'/'.$value['name'];
                $template['children'] = $this->build_tree_subsidiary($value['id'],$data,$template['current']);
                $subsidiary[$value['id']] = $template;
            }
            return $subsidiary;
        } else {
            return [];
        }
    }
    protected function build_tree($list, $parent_id, $leafList, $relationList, $onlyShowExists = false) {
        if ($relationList) {
            foreach ($relationList as $value) {
                $combine = $value["parent_id"] . "_" . $value["id"];
                $relation_combineList[$combine] = $value;
            }
        }
        return $this->internal_build_tree($list, $parent_id, $leafList, $relation_combineList, $onlyShowExists);
    }

    //$leafList:叶子节点列表，如功能权限里面的操作列表
    private function internal_build_tree($list, $parent_id, $leafList, $relation_combineList, $onlyShowExists) {
        $result = array();
        foreach ($list as $key => $value) {
            if ($value["parent_id"] == $parent_id) {
                $children = $this->internal_build_tree($list, $value["id"], $leafList, $relation_combineList, $onlyShowExists);
                if ($children) {
                    $value['children'] = $children;
                } else {
                    if ($leafList) {
                        foreach ($leafList as $item) {
                            $combine = $value["id"] . "_" . $item["id"];
                            $exists = (!empty($relation_combineList) && !empty($relation_combineList[$combine]));
                            $item["checked"] = $exists && ($relation_combineList[$combine]["checked"]);
                            $item["parent_id"] = $value["id"];
                            $item["leaf"] = true;
                            if (($exists && $onlyShowExists) || (!$onlyShowExists)) {
                                $value['children'][] = $item;
                            }
                        }
                        if (!empty($value['children'])) {
                            $value['leaf'] = false;
                            $value['state'] = "closed";
                        }
                    } else {
                        $value['leaf'] = true;
                    }
                }
                $result[] = $value;
            }
        }
        return $result;
    }
    //基础函数
    protected function handlerRequestPoint($action = ACTION_NAME)
    {
        return $this->handlerPointData('handler%point%Revise',func_get_args());
    }
    protected function handlerModelPoint($action = ACTION_NAME)
    {
        return $this->handlerPointData('%point%Appoint',func_get_args());
    }
    protected function handlerPointData($point,$data){
        $action = $data[0] ?? ACTION_NAME;
        unset($data[0]);
//        return $this->{str_replace('%point%',ucfirst(stringToHump($action)),$point)}(...$data);
        return call_user_func_array(array($this,str_replace('%point%',ucfirst(stringToHump($action)),$point)),$data);
    }
    /*
 * BranchTemplate 模块 默认数据
 */
    protected function handlerDefaultViewData()
    {
        if(IS_GET) {
            $this->title = '文件管理';
        }
    }
    //拒接访问的条件 - 替换基类
    protected function validateFilterLocationModule(){
        return empty(session('user_type')) ? true : false;
    }
    protected function handlerPermissionsProcessing()
    {
        parent::handlerPermissionsProcessing();
        if ($this->hasBranchStaff()) {
            switch (ACTION_NAME){
                case 'index':
                case 'refreshData':
                    $this->_permission_action_name = 'list';
                    break;
                case 'newFolder':
                case 'uploadFile':
                    $this->_permission_action_name = 'add';
                    break;
                case 'rename':
                case 'moveFile':
                    $this->_permission_action_name = 'update';
                    break;
            }
        } else {
            $this->_permission_action_name = 'other';
        }

    }
}