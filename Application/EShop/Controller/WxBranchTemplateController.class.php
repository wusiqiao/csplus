<?php

namespace EShop\Controller;
/**
 *　　┏┓　　　┏┓+ +
 *　┏┛┻━━━┛┻┓ + +
 *　┃　　　　　　　┃ 　
 *　┃　　　━　　　┃ ++ + + +
 * ████━████ ┃+
 *　┃　　　　　　　┃ +
 *　┃　　　┻　　　┃
 *　┃　　　　　　　┃ + +
 *　┗━┓　　　┏━┛
 *　　　┃　　　┃　　　　　　　　　　　
 *　　　┃　　　┃ + + + +
 *　　　┃　　　┃
 *　　　┃　　　┃ +  神兽保佑
 *　　　┃　　　┃    代码无bug　　
 *　　　┃　　　┃　　+　　　　　　　　　
 *　　　┃　 　　┗━━━┓ + +
 *　　　┃ 　　　　　　　┣┓
 *　　　┃ 　　　　　　　┏┛
 *　　　┗┓┓┏━┳┓┏┛ + + + +
 *　　　　┃┫┫　┃┫┫
 *　　　　┗┻┛　┗┻┛+ + + +
 */
class  WxBranchTemplateController extends BaseDataController {

    const TEMPLATE_APPEND_TYPE_SEND = 1;
    const TEMPLATE_APPEND_TYPE_DRAFT = 2;
    const TEMPLATE_APPEND_DRAFT_FIELD = 'draft';
    const TEMPLATE_APPEND_SEND_FIELD = 'send';
    const TEMPLATE_APPEND_PREVIEW_FIELD = 'preview';//预览
    const TEMPLATE_UPDATE_DRAFT_FIELD = 'update_draft';//修改草稿
    const BLACK_CUTTER = '：';//会议时间：2018年9月30日 9：30
    protected $filter_request = [
        'index','getContent','template_append','templateAppendImplement','templatePreviewImplement','preview_update',
        'previewUpdateImplement','PreviewDeleteImplement','getNoticeLists','template_detail','send_list','historyDeleteImplement',
        'edit_send','getCustomerLists','getSendList'
    ];//可以获取数据的方法
//    protected $filter_location = [];//可以直接访问的方法
    protected $repository;
    protected $branch_id;
    protected $request_default = ['index'=>['user',null]];
    protected $_model = 'WxBranchTemplate';
    protected $filter_location_post = [
        'getContent','templateAppendImplement','templatePreviewImplement','previewUpdateImplement',
        'PreviewDeleteImplement','getNoticeLists','historyDeleteImplement','importBranchTemplate','getCustomerLists',
        'getSendList'
    ];
    protected $open = true;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->validateFilterLocationModule();
        $this->handlerDefaultViewData();
    }
    /*
     * 模板首页
     */
    public function indexAction(){
        $condition["a.branch_id"] = $this->user_branch;
//        $condition["b.is_valid"] = 1;
        $list = $this->handlerModelPoint('getTemplates',$condition);
        $this->templates = count($list) > 0 ? json_encode($list) : [];
        if ($this->request->user) {
            $this->user = $this->request->user;
        }
//        $this->templates = [];
        $this->display();
    }
    public function send_listAction()
    {
        if($this->handlerRequestPoint()){
            $this->title = '收信人';
//            $data = $this->handlerModelPoint();
//            $this->users = $this->handlerCustomerPinyinLists($data);
            $this->notice_id = $this->request->id;
            $this->state = $this->request->state;
            $this->display();
        }
    }
    public function getSendListAction(){
        $data = $this->handlerModelPoint('sendList');
        foreach ($data as $key=>$val) {
            //设置标签
            $data[$key]['tags'] = D('SysTargetTag')->where(['user_id'=>$val['id']])
                ->alias('a')
                ->join('LEFT JOIN sys_user_relation_tag b ON b.tag = a.id')
                ->field('a.value')
                ->select();
        }
        $this->handlerResponse($data);
    }
    public function template_detailAction()
    {
        if($this->handlerRequestPoint()){
            $this->handlerTemplateSingleData($this->handlerModelPoint());
            $this->display();
        }
    }
    public function template_appendAction()
    {
        if($this->handlerRequestPoint()) {
            $data = $this->handlerContentRecords($this->handlerModelPoint(),'all');
            $this->handlerContentAppendData($data['content_records']);
            $this->template = json_encode($data['content_records']);
            $this->template_id = $this->request->template_id;
            $this->example = json_encode($data['example_records']);
            $this->handlerTemplateData();
//            var_dump($data['example_records']);die;
            $this->display();
        }
    }
    /*
     * 编辑发送
     */
    public function edit_sendAction()
    {
        if($this->handlerRequestPoint('previewUpdate')) {
            if($result = $this->handlerModelPoint('getPreviewUpdateData')){
                $this->handlerPreviewUpdateData($result,'append');
                $this->display('template_append');
            } else {
                $this->error('该草稿不存在或已删除','/WxBranchTemplate');
            }
        }
    }
    public function previewForUsersAction()
    {
//        A('UserSupervise')->handlerCustomerListsRequest(['user.is_follow' => 1]);
//        $data = A('UserSupervise')->getCustomerListsData();
//        $result = A('UserSupervise')->handlerCustomerPinyinLists($data);
//        $this->users = $result;
//        var_dump($result);die;
        $this->userListsAssign();
        $this->display();
    }
    public function sendUsersListsAction()
    {
        $this->userListsAssign();
        $this->display();
    }

    public function getCustomerListsAction()
    {
        $UserSupervise = A('UserSupervise');
        $condition['user.is_follow'] = 1;
        $condition['user.is_valid'] = 1;
        $type = I("get.type");
        if($type == "selectStaff"){
            $condition['user.user_type'] = USER_TYPE_COMPANY_MANAGER;
            $condition['user.id'] = array("neq",I("post.id"));
        }elseif($type == "selectUser"){
            $condition['user.user_type'] = array("neq",USER_TYPE_COMPANY_MANAGER);
        }
        if($type == "selectStaff" or $type == "selectUser"){
            unset($condition['user.is_follow']);
            unset($condition['user.is_valid']);
            $where['user.mobile']  = [['exp','is not null'],['exp','<> ""']];
            $where['user.is_follow']  = 1;
            $where['_logic'] = 'or';
            $condition['_complex'] = $where;
        }
        $groups = $this->request->groups;
        if (is_array($groups) && count($groups) > 0) {
            if (in_array('other',$groups) !== false) {
                unset($groups[array_search('other',$groups)]);
                if (count($groups) > 0) {
                    $condition['user.group_id'] = array(array('eq',0),array('eq',''),array('exp','is null'),array('in',$groups),'or');
                    D('SysUserSupervise')->incGroupQueryCount($groups);
                } else {
                    $condition['user.group_id'] = array(array('eq',0),array('eq',''),array('exp','is null'),'or');
                }
            } else {
                $condition['user.group_id'] = array('in',$groups);
                D('SysUserSupervise')->incGroupQueryCount($groups);
            }
            //增加组的查询次数

        }
        if (trim($this->request->name) != ''){
            $condition['user.name'] = array('like',sprintf('%%%s%%',trim($this->request->name)));
        }
        if (is_array($this->request->tags) && count($this->request->tags) > 0) {
            $this->storage->tags = $this->request->tags;
            D('SysUserSupervise')->incTagQueryCount($this->storage->tags);
            $this->storage->tags_parse = $UserSupervise->handlerTagsPolymorphic( $this->storage->tags);
        }
        $UserSupervise->handlerCustomerListsInitializationWx($condition,$this->storage,'limit');
        $data = $UserSupervise->getCustomerListsData();
        foreach ($data as $key=>$val) {
            //设置标签
            $data[$key]['tags'] = D('SysTargetTag')
                ->setDacFilter('a')
                ->where(['b.user_id'=>$val['id']])
                ->join('LEFT JOIN sys_user_relation_tag b ON b.tag = a.id')
                ->field('a.value')
                ->select();
        }
        if ($this->request->page == 1 && $this->request->targetType != 'preview'){
            $UserSupervise->handlerCustomerListsInitializationWx($condition,$this->storage,'');
            $data_total = $UserSupervise->getCustomerListsData();
        } else {
            $data_total = [];
        }
        if($type == "selectStaff"){
            foreach($data as $k=>$v){
                $staff_name = M("SysUser")->where("id = ".$v['id'])->getField("staff_name");
                if($staff_name != ""){
                    $data[$k]['name'] = $staff_name;
                }
            }
        }
//        $UserSupervise->handlerCustomerData($data);
//        $users = $UserSupervise->handlerCustomerPinyinLists($data);
        $this->handlerResponse(['data'=>$data,'user_total' => $data_total]);
    }
    /*
     * 修改草稿
     */
    public function preview_updateAction()
    {
        if($this->handlerRequestPoint()) {
            if($result = $this->handlerModelPoint('getPreviewUpdateData')){
                $this->handlerPreviewUpdateData($result);
                $this->display('template_append');
            } else {
                $this->error('该草稿不存在或已删除','/WxBranchTemplate');
            }
        }
    }
    /*
     * 保存草稿 -- 发送模板消息
     */
    public function previewUpdateImplementAction()
    {
        if($this->handlerRequestPoint('TemplateCUPImplement')) {
            $result = $this->handlerModelPoint();
            if ($this->storage->key === self::TEMPLATE_APPEND_SEND_FIELD) {
                if ($result) {
                    //发送模板消息
                    $template_id = $this->handlerModelPoint('GetBranchTemplateId',$this->request->template_id);
                    $this->storage->template_data['template_id'] = $template_id;
                    $this->storage->template_data['notice_id'] = $this->request->id;
                    $user = $this->handlerUserOpenidsFromTemplate($this->handlerModelPoint('GetUserOpenidsFromTemplate',$this->request->id));
                    $this->handlerSendTemplateFromUser($this->storage->template_data,$user);
                    $this->handlerResponse(['error' =>0,'message' => '发送完成']);
                } else {
                    $this->handlerResponse(['error' =>1,'message' => '发送失败']);
                }
            } else {
                $this->handlerResponse($result ? ['error' =>0,'message' => '草稿保存成功'] : ['error' =>1,'message' => '草稿保存失败']);
            }
        }
    }
    /*
     * 删除草稿
     */
    public function previewDeleteImplementAction()
    {
        if($this->handlerRequestPoint()) {
            $result = $this->handlerModelPoint();
            $this->handlerResponse($result ? ['error' =>0,'message' => '草稿删除成功'] : ['error' =>1,'message' => '草稿删除失败']);
        }
    }
    /*
 * 删除历史
 */
    public function historyDeleteImplementAction()
    {
        if($this->handlerRequestPoint('previewDeleteImplement')) {
            $result = $this->handlerModelPoint('previewDeleteImplement');
            $this->handlerResponse($result ? ['error' =>0,'message' => '历史删除成功'] : ['error' =>1,'message' => '历史删除失败']);
        }
    }
    /*
     * 存为草稿或立即发送
     * @param key  (draft or send)
     * @param data
     * @request POST
     * @return array()
     */
    public function templateAppendImplementAction()
    {
        if($this->handlerRequestPoint('TemplateCUPImplement')) {
            $result = $this->handlerModelPoint();
            if ($this->storage->key === self::TEMPLATE_APPEND_SEND_FIELD) {
                if ($result) {
                    //发送模板消息
                    $template_id = $this->handlerModelPoint('GetBranchTemplateId',$this->request->template_id);
                    $this->storage->template_data['template_id'] = $template_id;
                    $this->storage->template_data['notice_id'] = $result;
                    $user = $this->handlerUserOpenidsFromTemplate($this->handlerModelPoint('GetUserOpenidsFromTemplate',$result));
                    $this->handlerSendTemplateFromUser($this->storage->template_data,$user);
                    $this->handlerResponse(['error' =>0,'message' => '发送完成']);
                } else {
                    $this->handlerResponse(['error' =>1,'message' => '发送失败']);
                }
            } else {
                $this->handlerResponse($result ? ['error' =>0,'message' => '草稿添加成功','id'=>$result] : ['error' =>1,'message' => '草稿添加失败']);
            }
        }
    }
    /*
     * 预览
     */
    public function templatePreviewImplementAction()
    {
        if($this->handlerRequestPoint('TemplateCUPImplement')) {
            $template_id = $this->handlerModelPoint('GetBranchTemplateId',$this->request->template_id);
            $this->storage->template_data['template_id'] = $template_id;
            $result = $this->handlerPreviewTemplateFromUser($this->storage->template_data);
            $this->handlerResponse($result === true ? ['error' =>0,'message' => '通知预览已发送'] : $result);
        }
    }
    public function getNoticeListsAction()
    {
        if ($this->handlerRequestPoint()) {
            $this->handlerNoticeList($this->handlerModelPoint());
        }
    }
    public function template_draftAction()
    {
        $this->storage->type=2;
        //获取是否存在数据
        $this->is_list = $this->handlerModelPoint('isTemplateList');
        $this->display();
    }
    public function template_historyAction()
    {
        $this->storage->type=1;
        //获取是否存在数据
        $this->is_list = $this->handlerModelPoint('isTemplateList');
        $this->display();
    }
    public function linkShowAction()
    {
        $this->products = json_encode($this->handlerModelPoint('getProductList') ?? []);
        $this->tweets = json_encode($this->handlerModelPoint('getSpreadList') ?? []);
        $this->others  = json_encode($this->getLinkShowOther() ?? []);
        $this->display('link_show');
    }
    /******************************post function********************************/
    /*
     * @request post
     * @return array
     */
    public function getContentAction(){
        $template = $this->templateAppendAppoint();
        $result = $this->handlerContentRecords($template);
        $this->handlerContentChoice($result['content_records']);
//        var_dump($result);die;
        $this->ajaxReturn(buildResult($result));
    }
    /******************************request processing function********************************/
    protected function handlerGetNoticeListsRevise()
    {
        if (in_array($this->request->state,[WX_TEMPLATE_NOTICE_SEND,WX_TEMPLATE_NOTICE_PREVIEW])){
            return true;
        }
        $this->handlerResponse(['error' => 1,'message' => '数据出错']);
        return false;
    }
    protected function handlerTemplatePreviewImplementRevise()
    {
        if(is_array($this->request->content) && count($this->request->content) > 0) {
            foreach( $this->request->content as $key => $val) {
                if (empty(trim($val['value']))){
                    return false;
                }
            }
        }
        //判断是否有空值
        if(count($this->request->content) > $this->storage->content_array && $this->request->key === self::TEMPLATE_APPEND_SEND_FIELD) {
            $this->handlerResponse(['error'=>1,'message' => '发送通知时字段内容不能为空']);
            return false;
        }
    }
    protected function handlerTemplateDetailRevise()
    {
        if($this->request->id  &&  $this->request->id > 0) {
            return true;
        } else {
            $this->error('数据出错!!','/');
        }
    }
    protected function handlerSendListRevise()
    {
        if($this->request->id  &&  $this->request->id > 0 && $this->request->state >= 0 ) {
            return true;
        } else {
            $this->error('数据出错!!','/');
        }

    }
    //添加模板消息页面 point template_append
    protected function handlerTemplateAppendRevise()
    {
        if($this->request->template_id  &&  $this->request->template_id > 0) {
            return true;
        } else {
            $this->error('数据出错!!','/');
        }
    }
    //修改草稿页面
    protected function handlerPreviewUpdateRevise()
    {
        if($this->request->id  &&  $this->request->id > 0) {
            return true;
        } else {
            $this->error('数据出错!!','/');
        }
    }
    //删除草稿
    protected function handlerPreviewDeleteImplementRevise()
    {
        if($this->request->id  &&  $this->request->id > 0) {
            return true;
        } else {
            $this->error('数据出错!!','/');
        }
    }
    //发送/存为草稿 request 处理函数 template_data 用于发送模板消息存放信息
    protected function handlerTemplateCUPImplementRevise()
    {

        if (in_array($this->request->key,[self::TEMPLATE_APPEND_DRAFT_FIELD,self::TEMPLATE_APPEND_SEND_FIELD,self::TEMPLATE_APPEND_PREVIEW_FIELD]) && $this->request->template_id > 0) {
            $this->storage->operation = 'append';
            //处理content
            if(is_array($this->request->content) && count($this->request->content) > 0) {
                foreach( $this->request->content as $key => $val) {
                    if (empty(trim($val['value'])) && in_array($this->request->key,[self::TEMPLATE_APPEND_PREVIEW_FIELD,self::TEMPLATE_APPEND_SEND_FIELD]) ){
                        $this->handlerResponse(['error'=>1,'message' => $val['placeholder']]);
                        return false;
                    } else if (in_array($this->request->key,[self::TEMPLATE_APPEND_DRAFT_FIELD,self::TEMPLATE_APPEND_SEND_FIELD,self::TEMPLATE_APPEND_PREVIEW_FIELD])) {
                        $this->storage->content_array[] = trim($val['key']) === '' ?
                            $val['field'].self::BLACK_CUTTER.trim($val['value']).self::BLACK_CUTTER.$val['color'] :
                            $this->request->examples[$key]['key'].self::BLACK_CUTTER.$val['field'].self::BLACK_CUTTER.trim($val['value']).self::BLACK_CUTTER.$val['color'] ;
                    }
                }
            }
            //判断是否有空值
            if(count($this->request->content) > $this->storage->content_array && in_array($this->request->key,[self::TEMPLATE_APPEND_PREVIEW_FIELD,self::TEMPLATE_APPEND_SEND_FIELD])) {
                $this->handlerResponse(['error'=>1,'message' => '发送通知时字段内容不能为空']);
                return false;
            } else {
                $this->storage->content = $this->handlerContentCUEnRecords($this->storage->content_array);
            }

            //验证 point 1跳转链接 2跳转至小程序
            if (in_array($this->request->key,[self::TEMPLATE_APPEND_PREVIEW_FIELD,self::TEMPLATE_APPEND_SEND_FIELD])) {
                if(empty($this->request->users) || count($this->request->users) == 0) {
                    $this->handlerResponse(['error'=>1,'message' => '请选择发送对象']);
                    return false;
                }
                if ($this->request->point == 0 && trim($this->request->url) === '') {
                    $this->handlerResponse(['error'=>1,'message' => '请输入跳转链接']);
                    return false;
                } else if ($this->request->point == 0 && trim($this->request->url) != '' ) {
                    $url_template = (strpos($this->request->url,'http') !== false) ? $this->request->url : 'http://'.$this->request->url;
                    $strRegex = '/^(http|https|ftp):\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\’:+!]*([^<>\”])*$/';
                    if(!preg_match($strRegex,$url_template)) {
                        $this->handlerResponse(['error'=>1,'message' => '请输入正确的跳转链接']);
                        return false;
                    }
                } else if ($this->request->point == 1) {
                    $wxConfig = getWxConfigData();
                    $this->request->xcx_appid = $wxConfig['xcx_appid'];
                    $this->request->xcx_url = 'pages/eshop/eshop';
                    if (trim($this->request->xcx_space_url) !== '') {
                        $url_template = (strpos($this->request->xcx_space_url,'http') !== false) ? $this->request->xcx_space_url : 'http://'.$this->request->xcx_space_url;
                        $strRegex = '/^(http|https|ftp):\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\’:+!]*([^<>\”])*$/';
                        if(!preg_match($strRegex,$url_template)) {
                            $this->handlerResponse(['error'=>1,'message' => '请输入正确的备用路径']);
                            return false;
                        }
                    }
//                    if (trim($this->request->xcx_space_url) === '') {
//                        $this->handlerResponse(['error'=>1,'message' => '请输入备用路径']);
//                        return false;
//                    }
                }
            }
                if ($this->request->id > 0 && in_array($this->request->key,[self::TEMPLATE_APPEND_DRAFT_FIELD,self::TEMPLATE_APPEND_SEND_FIELD])) {
                    $this->storage->operation = 'update';
                    $this->storage->{$this->storage->operation}['id'] = $this->request->id;
                }
                $this->storage->template_data['content'] = $this->request->content;
                $this->storage->template_data['point'] = $this->request->point;
                $this->storage->template_data['url'] = $this->request->url ?? null;
                $this->storage->template_data['xcx_appid'] = $this->request->xcx_appid ?? null;
                $this->storage->template_data['xcx_url'] = $this->request->xcx_url ?? null;
                $this->storage->template_data['xcx_space_url'] = $this->request->xcx_space_url ?? null;
                $this->storage->template_data['template_id'] = $this->request->template_id;
                //如果是预览的话,有user_id
                if ($this->request->key === self::TEMPLATE_APPEND_PREVIEW_FIELD) {
                    $this->storage->template_data['users'] = $this->request->users;
                }
            if (in_array($this->request->key,[self::TEMPLATE_APPEND_DRAFT_FIELD,self::TEMPLATE_APPEND_SEND_FIELD]))
            {
                if ($this->request->users) {
                    foreach($this->request->users as $key => $val) {
                        $this->storage->users[] = $val['id'];
                    }
                }
                if (!$this->handlerModelPoint('hasWxTemplate',$this->request->template_id)) {
                    $this->ajaxReturn(['error' =>1,'message' =>'该模板不存在或已删除,不能发送模板消息!']);
                    return false;
                }
                //整理出所需添加的数组
                $this->storage->key = $this->request->key;
                $this->storage->{$this->storage->operation}['content'] = $this->storage->content;
                $this->storage->{$this->storage->operation}['template_id'] = $this->request->template_id;
                $this->storage->{$this->storage->operation}['url'] = $this->request->url ?? null;
                $this->storage->{$this->storage->operation}['branch_id'] = $this->user_branch;
                $this->storage->{$this->storage->operation}['xcx_appid'] = $this->request->xcx_appid ?? null;
                $this->storage->{$this->storage->operation}['xcx_url'] = $this->request->xcx_url ?? null;
                $this->storage->{$this->storage->operation}['xcx_space_url'] = $this->request->xcx_space_url ?? null;
                $this->storage->{$this->storage->operation}['created_at'] = time();
                $this->storage->{$this->storage->operation}['updated_at'] = time();
                //新增字段 lynn start
                $this->storage->{$this->storage->operation}['user_id'] = $this->_user_session->userId;
                $this->storage->{$this->storage->operation}['creator_id'] = $this->_user_session->userId;
                //新增字段 lynn end
                $this->storage->{$this->storage->operation}['title'] = $this->handlerModelPoint('getTemplateTitle',$this->request->template_id);//Sep 28 新增title
                $this->storage->{$this->storage->operation}['point'] = $this->request->point;
                $this->storage->{$this->storage->operation}['send_at'] = $this->request->key === self::TEMPLATE_APPEND_SEND_FIELD ? time() : null;
                $this->storage->{$this->storage->operation}['type'] = $this->request->key === self::TEMPLATE_APPEND_DRAFT_FIELD ? self::TEMPLATE_APPEND_TYPE_DRAFT : self::TEMPLATE_APPEND_TYPE_SEND ;
            }
            return true;
        } else {
            $this->handlerResponse(['error' =>1,'message' =>'操作失败!']);
            return false;
        }
    }
    //获取模板数据
    public function importBranchTemplateAction()
    {
        if ($list = $this->getTemplateMessageList()) {
            $templatekeys = D('ESAdmin/WxBranchTemplate')->getBranchExistsTemplateMsgKeys($this->user_branch);
            $template_list = array();
            foreach ($list["template_list"] as $key=>$v){
                if ($v["title"] != '订阅模板消息' && $v["title"] != '服务进度通知' && $v["title"] != '客户请求通知') {
                    $msg_key = getTemplateIdentKey($v["content"]); //排除重复
                    if (empty($templatekeys[$msg_key])) {
                        $template_list[] = &$list["template_list"][$key];
                    }
                }
            }
            $this->storage->template_list = $template_list;
            $this->storage->templatekeys = $templatekeys;
            $result =  $this->handlerModelPoint();
            $this->handlerResponse($result);
        } else {
            $this->handlerResponse(buildMessage('模板数据获取结束,暂无模板数据获取!',0));
        }
    }
    /******************************DB Modle Connector function********************************/
    protected function sendListAppoint()
    {
        return D($this->_model)->sendList($this->request);
    }
    protected function importBranchTemplateAppoint()
    {
        return D($this->_model)->importBranchTemplate($this->storage);
    }
    protected function getProductListAppoint()
    {
        return D('ComProduct')->getProductList();
    }
    protected function getSpreadListAppoint()
    {
        return D('ComTweets')->getSpreadList();
    }
    protected function templateDetailAppoint()
    {
        return D($this->_model)->templateSingleDetail($this->request->id);
    }
    protected function templateAppendAppoint($id = '')
    {
        return D($this->_model)->getContentTemplate($id > 0 ? $id : $this->request->template_id);
    }
    protected function getSingleUserDataAppoint($id)
    {
        return D($this->_model)->getSingleUserData($id);
    }
    protected function getTemplatesAppoint($option = '')
    {
        return D($this->_model)->getTemplates($option);
    }
    protected function templateAppendImplementAppoint()
    {
        return D($this->_model)->templateAppendImplement($this->storage);
    }
    protected function previewUpdateImplementAppoint()
    {
        return D($this->_model)->previewUpdateImplement($this->storage);
    }
    protected function isTemplateListAppoint()
    {
        return D($this->_model)->isTemplateList($this->storage->type);
    }
    protected function previewDeleteImplementAppoint()
    {
        return D($this->_model)->previewDeleteImplement($this->request->id);
    }
    protected function getBranchTemplateIdAppoint($id)
    {
        return D($this->_model)->getBranchTemplateId($id);
    }
    protected function getUserOpenidsFromTemplateAppoint($users)
    {
        return D($this->_model)->getUserOpenidsFromTemplate($users);
    }
    protected function userSendTemplateFinallyAppoint($finally)
    {
        return D($this->_model)->userSendTemplateFinally($finally);
    }
    protected function getPreviewUpdateDataAppoint()
    {
        return D($this->_model)->getPreviewUpdateData($this->request->id);
    }
    protected function getNoticeListsAppoint()
    {
        return D($this->_model)->getNoticeLists($this->request);
    }
    protected function getUsersOpenIdAppoint($id)
    {
        return D($this->_model)->getUsersOpenId($id);
    }
    protected function getTemplateSerialNumberAppoint($id)
    {
        return D($this->_model)->getTemplateSerialNumber($id);
    }
    //Sep 27
    protected function getTemplateTitleAppoint($id)
    {
        return D($this->_model)->getTemplateTitle($id);
    }
    //判断该模板是否存在
    protected function hasWxTemplateAppoint($template_id)
    {
        return D($this->_model)->hasWxTemplate($template_id);
    }
    /******************************data processing function********************************/
    protected function userListsAssign(){
        $UserSupervise = A('UserSupervise');
        $condition_groups['a.is_valid'] = 1;
        $condition_groups['a.is_follow'] = 1;
        $condition_groups['a.branch_id'] = $this->user_branch;
        $condition_tags['user.is_valid'] = 1;
        $condition_tags['user.is_follow'] = 1;
        $condition_tags['user.branch_id'] = $this->user_branch;
        //标签
        $tags = $UserSupervise->getTargetTags();
        foreach($tags as $k=>$v){
            $condition_tags['urt.tag'] = $v['id'];
            $tags[$k]['user_count'] = D('SysUserRelationTag')
                ->setDacFilter('urt')
                ->join('sys_user as user on user.id = urt.user_id')
                ->where($condition_tags)
                ->count();
        }
        $this->tags = json_encode($tags ?? []);
        //分组
        $groups = $UserSupervise->getTargetGroups();
        foreach ($groups as $k => $v) {
            $condition_groups['a.group_id'] = $v['id'];
            $groups[$k]['user_count'] = D('SysUser')->setDacFilter('a')->where($condition_groups)->count();
        }
        $tmp = array('id'=>'other','value' => '未分组','branch_id' => $this->user_branch);
        $condition_groups_other['_string'] = 'a.group_id is null or a.group_id =""';
        $condition_groups_other['a.branch_id'] = $this->user_branch;
        $condition_groups_other['a.is_valid'] = 1;
        $condition_groups_other['a.is_follow'] = 1;
        $tmp['user_count'] = D('SysUser')
            ->setDacFilter('a')
            ->where($condition_groups_other)
            ->count();
        array_unshift($groups,$tmp);
        $this->groups = json_encode($groups);
    }
    protected function handlerTemplateSingleData($data)
    {
//        var_dump($this->handlerNoticeContentRecords($data));die;
        $this->template = json_encode($this->handlerNoticeContentRecords($data));
        $this->send_time = date('Y年m月d日 H:i:s',$data['send_at']);
        $this->success = $data['success_count'];
        $this->error = $data['error_count'];
        $this->point = $data['point'];
        $this->url = $this->handlerUrl($data['url']);
        $this->xcx_appid = $data['xcx_appid'];
        $this->xcx_url = $data['xcx_url'];
        $this->xcx_space_url = $this->handlerUrl($data['xcx_space_url']);
        $this->notice_id = $data['id'];
        $this->is_open = $this->handlerModelPoint('hasWxTemplate',$data['template_id']) ? 1 : 0;
    }
    protected function handlerUrl($url){
        return strpos($url,'http') === false ? 'http://'.$url : $url;
    }
    protected function handlerNoticeList($data)
    {
        foreach($data as $key=>$val) {
            $data[$key]['users_name'] = $val['users_count'] > 0 ? $val['users_name'].'等'.$val['users_count'].'人' : '无收信人';
            $data[$key]['view_content'] = $this->handlerNoticeViewContent($this->handlerNoticeContentRecords($val));
            if($this->request->state == WX_TEMPLATE_NOTICE_SEND) {
                $data[$key]['send_time'] = date('Y年m月d日 H:i:s',$val['send_at']);
            } else {
                $data[$key]['is_open'] = $this->handlerModelPoint('hasWxTemplate',$val['template_id']);
            }
        }
        $this->handlerResponse(['rows'=>$data,'total'=> count($data)]);
//        $this->handlerResponse(['rows'=>$data,'total'=> count($data)]);
    }
    //处理修改草稿
    protected function handlerPreviewUpdateData($data,$type='update')
    {

        $this->users = json_encode($data['users']);
        $this->template = json_encode($this->handlerNoticeContentRecords($data['notice']));
        $this->notice = $data['notice'];
        $this->template_id = $this->notice['template_id'];
        $result = $this->handlerContentRecords($this->handlerModelPoint('templateAppend',$this->template_id),'example');
        $this->example = json_encode($result);
        $this->point = $data['notice']['point'];
        $this->url = $data['notice']['url'];
        $this->xcx_appid = $data['notice']['xcx_appid'];
        $this->xcx_url = $data['notice']['xcx_url'];
        $this->xcx_space_url = $data['notice']['xcx_space_url'];
        $this->id = $type == 'update'? $data['notice']['id'] : 0;
        $this->is_open = $this->handlerModelPoint('hasWxTemplate',$data['notice']['template_id']) ? 1 : 0;
//        var_dump($result);die;
    }
    //处理template的openid
    protected function handlerUserOpenidsFromTemplate($users)
    {
        $array = [];
        if ($users) {
            foreach($users as $key => $val) {
                if (empty($val['openid'] )){
                    $array['error'][$val['id']] = ['id'=>$val['id'],'errcode' => '400' , 'errmsg' => 'openid缺失'];
                } else {
                    $array['success'][$val['id']] = $val;
                }
            }
        }
        return $array;
    }
    //模板消息预览
    protected function handlerPreviewTemplateFromUser($template_data)
    {
        //获取用户openid
        $openid = $this->handlerModelPoint('getUsersOpenId',$template_data['users']);
        if (empty($openid)) {
            return ['error' =>1,'message' => 'openid缺失'];
        } else {
            $result =  $this->handlerWXSendTemplate($template_data,$openid);
            return $result["errcode"] == 0 ? true : ['error' =>1,'message' => getGlobalReturnCode($result["errcode"]).',预览失败'];
        }

    }
    //发送模板消息
    protected function handlerSendTemplateFromUser($template_data,$users)
    {
        if (!empty($users['success'])) {
            //异步发送模板消息
            $this->handlerWXSendTemplate($template_data,$users,$template_data['notice_id']);
        }
        $finally['notice_id'] =$template_data['notice_id'];
        if (isset($users['error'])) {
            $finally['error'] = $users['error'];
        }
        //处理用户发送是否成功信息
        $this->handlerModelPoint('userSendTemplateFinally',$finally);

    }
    protected function handlerWXSendTemplate($template_data,$users,$notice_id = 0)
    {
        $user['success'] = [];
        $user['error'] = $users['error'];
        $message = array();
        $body = array();
        $message["template_id"] = $template_data['template_id'];
        $message["url"] = $template_data['point'] == 0 ? $template_data['url'] : $template_data['xcx_space_url'];
        if ($template_data['point'] == 1) {
            $message['miniprogram'] = [
                'appid' =>$template_data['xcx_appid'],
                'pagepath' =>$template_data['xcx_url']
            ];
        }
        foreach ( $template_data['content'] as $key =>$val) {
            $body[$val['field']]["value"]    = $val['value'];
            $body[$val['field']]["color"]    = $val['color'];
        }
        $message["body"] = $body;
        if ($notice_id > 0) {
            $data['message'] = $message;
            $data['users'] = $users['success'];
            $data['notice_id'] = $notice_id;
//            var_dump($data);die;
            send_wx_group_message($data,true);
        } else {
            $message["openid"] = $users;
            return send_wx_message($message);
        }
    }
    public function handlerContentRecords($data,$inc ='all')
    {
        $result = array();
        if ($inc === 'all') {
            $result["content_records"] = $this->handlerContentRecords($data,'content');
            $result["example_records"] = $this->handlerContentRecords($data,'example');
            return $result;
        } else {
            if ($inc == 'example') {
                $count = substr_count($data[$inc],self::BLACK_CUTTER);
            }
            $content_records = explode("\r\n", $data[$inc]);
            foreach ($content_records as $key => $content_record){
                if (strpos($content_record,'.DATA') || $inc =='example') {
                    if (($inc == 'example' && $key >=(count($content_records) - $count - 2)) || $inc == 'content') {
                        $items = explode(self::BLACK_CUTTER, $content_record);
                        if($items[0] !='' || $items[1] != '') {
                            if (count($items) == 1) {
                                $result[$inc . "_records"][] = array("key" => "", "title" => $items[0]);
                            } else {
                                $result[$inc . "_records"][] = array("key" => $items[0], "title" => $items[1]);
                            }
                        }
                    } else {
                        if (trim($content_record) != '') {
                            $result[$inc . "_records"]['first'] = array("key" => "", "title" => $content_record);
                        }
                    }
                }
            }
            return $result[$inc."_records"];
        }
    }
    public function handlerNoticeContentRecords($data,$inc='content')
    {
        $result = array();
        $content_records = explode("\r\n", $data[$inc]);
        foreach ($content_records as $content_record){
            $items = explode(self::BLACK_CUTTER,$content_record);
            if (count($items) == 3){
                $result[$inc."_records"][] = array("field"=>$items[0], "value"=>$items[1],'color' => $items[2]);
            }else{
                $result[$inc."_records"][] = array("key"=>$items[0],"field"=>$items[1], "value"=>$items[2],'color' => $items[3]);
            }
        }
        $this->handlerContentDetailData($result[$inc."_records"]);
        return $result[$inc."_records"];
    }
    //输出默认其他列表 - 功能链接
    protected function getLinkShowOther()
    {
        $res = [
            [
                'title'=>'商城首页',
                'url' => 'https://'.$_SERVER['HTTP_HOST'].'/index.html'
            ]
        ];
        return $res;
    }
    //储存于数据库时 content的数据处理
    protected function handlerContentCUEnRecords($content)
    {
        return implode("\r\n",$content);
    }
    protected function handlerContentChoice(&$content)
    {
        foreach ($content as $key => $value) {
            if ($key == 0) {
                $content[$key]['view'] = '  (消息提示)  ';
            } else if (trim($value['key']) != '') {
                $content[$key]['view'] = '';
            } else {
                $content[$key]['view'] = '  (消息备注)  ';
            }
        }
    }
    protected function handlerContentDetailData(&$content)
    {
        foreach ($content as $key => $value) {
            if ($key == 0) {
                $content[$key]['placeholder'] = '请输入消息提示';
                $content[$key]['view'] = '消息提示';
            } else if (trim($value['key']) != '') {
                $content[$key]['placeholder'] = '请输入'.$value['key'];
                $content[$key]['view'] = $value['key'];
            } else {
                $content[$key]['placeholder'] = '请输入消息备注';
                $content[$key]['view'] = '消息备注';
            }
        }
//        var_dump($content);die;
    }
    protected function handlerContentAppendData(&$content)
    {
        foreach ($content as $key => $value) {
            $content[$key]['field'] = str_replace(array('{{','.DATA}}'),'',$value['title']);
            $content[$key]['value'] = '';
            $content[$key]['color'] = '#000000';
            if ($key == 0) {
                $content[$key]['placeholder'] = '请输入消息提示';
                $content[$key]['view'] = '消息提示';
            } else if (trim($value['key']) != '') {
                $content[$key]['placeholder'] = '请输入'.$value['key'];
                $content[$key]['view'] = $value['key'];
            } else {
                $content[$key]['placeholder'] = '请输入消息备注';
                $content[$key]['view'] = '消息备注';
            }
        }
//        var_dump($content);die;
    }
    /*
     * BranchTemplate 模块 默认数据
     */
    protected function handlerDefaultViewData()
    {
        if(IS_GET) {
            $this->title = '模板消息';
        }
    }
    protected function handlerRequestPoint($action = ACTION_NAME)
    {
        return $this->handlerPointData('handler%point%Revise',func_get_args());
    }
    protected function handlerModelPoint($action = ACTION_NAME)
    {
        return $this->handlerPointData('%point%Appoint',func_get_args());
    }
    protected function handlerTemplateData(){
        $this->users = $this->request->user ? json_encode($this->handlerModelPoint('getSingleUserData',$this->request->user)) : json_encode([]);
        $this->point = 0;
        $this->id = 0;
//        var_dump($this->users);die;
    }
    protected function handlerPointData($point,$data){
        $action = $data[0] ?? ACTION_NAME;
        unset($data[0]);
//        return $this->{str_replace('%point%',ucfirst(stringToHump($action)),$point)}(...$data);
        return call_user_func_array(array($this,str_replace('%point%',ucfirst(stringToHump($action)),$point)),$data);
    }
    protected function handlerNoticeViewContent($content) {
        $html = '';
        foreach($content as $key => $val){
            if(empty($val['key'])) {
                $html .= '<div class="simple-template"><span style="color:'.$val["color"].'">'.$val["value"].'</span></div>';
            } else {
                $html .= '<div class="simple-template">
                              <span class="title gray-a1">'.$val['key'].'：</span>
                              <span class="flex-1" style="color:'.$val["color"].'">'.$val["value"].'</span>
                          </div>';
            }
        }
        return $html;
    }
    public function handlerCustomerData(&$data) {
        $data['head_pic'] = trim($data['head_pic']) ?? getDefalutHeadPic();
    }
    /*
     * 处理用户拼音排行
     * */
    public function handlerCustomerPinyinLists($data)
    {
        $other = [];
        foreach($data['rows'] as $key=>$val) {
            $val['name'] = $this->ReplaceSpecialChar($val['name']);
            $data['rows'][$key]['name'] = $this->ReplaceSpecialChar($val['name']);
            $first_char = strtoupper(substr(firstPinyin($val['name']) , 0 , 1));
            $data['rows'][$key]['pinyin'] = $this->ReplaceSpecialChar(firstPinyin($val['name']));
            $data['rows'][$key]['first_char'] = $this->ReplaceSpecialChar($first_char);
            if(!preg_match ("/^[a-z]/i", $first_char)) {
                $other[] =$data['rows'][$key];
            } else {
                $result[$first_char]["items"][] = $data['rows'][$key];
            }
        }
        ksort($result);
        if($other) {
            $result['Other']['items'] = $other;
        }
//        var_dump($result['Other']['items'] );die;
        return $result;
    }
    function ReplaceSpecialChar($C_char)
    {//过滤特殊字符
        $C_char = iconv("UTF-8","UTF-8//IGNORE",$C_char);
        return $C_char;//返回处理结果
    }

    /******************************BranchTemplate processing function********************************/
    //初始化模板，先读取微信后台模板，如果存在就不添加，否则添加（不能重复添加，否则微信后台会重复，微信的BUG？）
    public function getTemplateMessageList(){
        $wx_instance = getWeChatInstance();
        $list = $wx_instance->getTemplateMessageList();//先获取微信后台模板
        foreach ($list["template_list"] as $key=>$v){
            $msg_key = getTemplateIdentKey($v["content"]);
            $wx_templates[$msg_key] = $v;
        }
        $tmpls = D('ESAdmin/WxBranchTemplate')->getUnRegisterTemplate($this->user_branch);//获取未被导入的系统模板
        foreach ($tmpls as $key=>$tpl) {
            if (empty($wx_templates[$tpl["msg_key"]]) && $tpl["standard_id"]) {
                $wx_instance->addTemplateMessage($tpl["standard_id"]);
            }
        }
        return $wx_instance->getTemplateMessageList();//重新获取微信后台模板;
    }
    protected function handlerPermissionsProcessing()
    {
        parent::handlerPermissionsProcessing();
        switch (ACTION_NAME){
            case 'previewForUsers':
            case 'template_append':
            case 'templatePreviewImplement':
            case 'templateAppendImplement':
                $this->_permission_action_name = 'add';
                break;
            case 'previewUpdateImplement':
                $this->_permission_action_name = 'update';
            case 'file_edit':
                $this->_permission_action_name = 'detail';
                break;
            case 'save':
                if(I('post.id') > 0 && I('post.parent_id') > 0) {
                    $this->_permission_action_name = 'update';
                } else {
                    $this->_permission_action_name = 'add';
                }
                break;
        }
    }
}