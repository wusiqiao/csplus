<?php
/**
 * Created by PhpStorm.
 * User: Linn
 * Date: 2018/8/1
 * Time: 16:14
 *
 */

namespace EShop\Controller;

class UserSuperviseController extends BaseDataController
{
    protected $filter_request = [
        'rmCustomerTag','rmCustomerGroup','createCustomerGroup',
        'createCustomerTag','getCustomerLists','customer_detail','customer_edit',
        'hasInformationTitle','tag_detail','group_detail','save_tag_name_revise',
        'save_group_name_revise','rmCustomerFromGroup','rmCustomerFromTag','target_addition',
        'appendCustomerFromTag','appendCustomerFromGroup','targetUsers','targetAppendUsers'
    ];//可以获取数据的方法
//    protected $filter_location = [];//可以直接访问的方法
    protected $repository;
    protected $branch_id;
    protected $request_default = ['getCustomerLists'=>['keyword','']];
    protected $_model = 'SysUserSupervise';
    protected $filter_location_post = [
        'rmCustomerTag','rmCustomerGroup','createCustomerGroup','createCustomerTag',
        'hasInformationTitle','save_tag_name_revise','save_group_name_revise','rmCustomerFromGroup',
        'rmCustomerFromTag','targetUsers','targetAppendUsers'
    ];
    protected $open = true;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->branch_id = getBrowseBranchId();
    }

    public function indexAction()
    {
        $this->tags = $this->getTargetTags();
        $this->groups = $this->getTargetGroups();
        $this->handlerCustomerListsInitialization();
        $data = $this->getCustomerListsData();
        $this->handlerCustomerData($data);
        $users = $this->handlerCustomerPinyinLists($data);
        $this->users = $users;
        $this->display();
    }
    public function target_additionAction()
    {
        if($this->HandlerTargetAdditionRevise()) {
            $this->userListsAssign(['key'=>$this->request->key,'id'=>$this->request->id]);
            $this->id = $this->request->id;
            $this->key = $this->request->key;
            $this->display();
        }
    }
    public function tag_detailAction(){
        $this->title = '标签管理';
        $this->request->key = 'tag';
        if($this->HandlerTargetDetailRevise()) {
            $this->tag = $this->getTargetDataAppoint();
            $this->id = $this->request->id;
            $this->display();
        }
    }
    public function group_detailAction(){
        $this->title = '分组管理';
        $this->request->key = 'group';
        if($this->HandlerTargetDetailRevise()) {
            $this->group = $this->getTargetDataAppoint();
            $this->id = $this->request->id;
            $this->display();
        }
    }
    public function targetUsersAction(){
        if ($this->request->key === 'group') {
            $this->request->groups = $this->request->id == 0 ? ['other'] : [$this->request->id];
        } else {
            $this->request->tags[0] = [$this->request->id];
        }
        $this->storage->field =  ' CONCAT(user.name,if(user.comments != "",CONCAT(CONCAT(\'(\',user.comments),\')\'),"")) as name,user.id,user.mobile,user.head_pic,user.group_id,if(team.id > 0 , team.value , \'未分组\') as group_name';
        $this->handlerCustomerListsRequest();
        $data = $this->getCustomerListsData();
        foreach ($data as $key=>$val) {
            //设置标签
            $data[$key]['tags'] = D('SysTargetTag')
                ->where(['b.user_id'=>$val['id']])
                ->setDacFilter('a')
                ->join('LEFT JOIN sys_user_relation_tag b ON b.tag = a.id')
                ->field('a.value')
                ->select();
        }
        $this->handlerResponse($data);
    }
    public function targetAppendUsersAction()
    {
        $type = I("get.type");
        if($type == 2){//添加员工选择
            $condition['user.user_type'] = array("neq",USER_TYPE_COMPANY_MANAGER);
        }elseif($type == 3){//选择上级主管
            $id = I("get.id");
            $condition['user.user_type'] = array("eq",USER_TYPE_COMPANY_MANAGER);
            $condition['user.id'] = array("neq",$id);
        }
        $condition['user.is_follow'] = 1;
        $condition['user.is_valid'] = 1;
        if ($this->request->key === 'tag') {
            $other_tag = D('sysUserRelationTag')
//                        ->setDacFilter('a')
                        ->where(['tag' => $this->request->id])
                        ->getField('user_id',true);
            if ($other_tag) {
                $condition['user.id'] = array('not in',$other_tag) ;
            }
        }
        if (trim($this->request->name) != ''){
            $condition['user.name'] = array('like',sprintf('%%%s%%',trim($this->request->name)));
        }
        if (is_array($this->request->tags) && count($this->request->tags) > 0) {
            $this->storage->tags = $this->request->tags;
            D('SysUserSupervise')->incTagQueryCount($this->storage->tags);
            $this->storage->tags_parse = $this->handlerTagsPolymorphic( $this->storage->tags);
        }

        $this->storage->field =  ' CONCAT(user.name,if(user.comments != "",CONCAT(CONCAT(\'(\',user.comments),\')\'),"")) as name,user.id,user.mobile,user.head_pic,user.group_id,if(team.id > 0 , team.value , \'未分组\') as group_name';
        $this->handlerCustomerListsRequest($condition,'limit');
        $data = $this->getCustomerListsData();
        foreach ($data as $key=>$val) {
            //设置标签
            $data[$key]['tags'] = D('SysTargetTag')
                ->setDacFilter('a')
                ->where(['b.user_id'=>$val['id']])
                ->join('LEFT JOIN sys_user_relation_tag b ON b.tag = a.id')
                ->field('a.value')
                ->select();
        }
        if ($this->request->page == 1 && $this->request->targetType != 'preview'){
            $this->storage->field = 'user.id,user.name';
            $this->handlerCustomerListsRequest($condition,'all');
            $data_total = $this->getCustomerListsData();
        } else {
            $data_total = [];
        }
        $this->handlerResponse(['data'=>$data,'user_total' => $data_total]);
    }
    /*
     * tag 标签管理
     */
    public function customer_tagsAction()
    {
        $this->title = '标签管理';
        $this->tags = $this->getCustomerTags();
//        var_dump($this->tags);die;
        $this->display();
    }
    /*
     * tag 分组管理
     */
    public function customer_groupsAction()
    {
        $this->title = '分组管理';
        $this->groups = $this->getCustomerGroups();
        $this->display();
    }
    /*
     * 异步获取客户列表
     */
    public function getCustomerListsAction()
    {
        $this->handlerCustomerListsRequest();
        $data = $this->getCustomerListsData();
        $result = $this->handlerCustomerPinyinLists($data);
//        echo '<pre>';
//        var_dump($data);die;
        $this->handlerResponse($result);
    }
    /*
     * group Tags
     * 修改标签名称
     */
    public function save_tag_name_reviseAction()
    {
        $this->request->key = 'tag';
        $this->request->name = '标签';
        $revise = $this->HandlerSaveTargetNameRevise();//传入数据处理
        if ($revise['error'] != 0)
        {
            $this->handlerResponse($revise);
        }
        else
        {
           $result =  $this->saveTargetNameRevise();//数据库处理
           $this->handlerResponse($result ? ['error'=>0,'message'=>'标签名称修改成功'] : ['error' => 1,'message'=>$this->request->name.'修改失败']);
        }
    }
    /*
     * group
     * 修改组名称
     */
    public function save_group_name_reviseAction()
    {
        $this->request->key = 'group';
        $this->request->name = '组名';
        $revise = $this->HandlerSaveTargetNameRevise();//传入数据处理
        if ($revise['error'] != 0) {
            $this->handlerResponse($revise);
        } else {
            $result =  $this->saveTargetNameRevise();//数据库处理
            $this->handlerResponse($result ? ['error'=>0,'message' => '分组修改成功'] : ['error' => 1,'message'=>$this->request->name.'修改失败']);
        }
    }
    /*
     * group Tags
     * param id value key
     * 根据组和标签的 单项搜索 (用户列表)
     */
//    public function getCustomerTargetListsAction()
//    {
//        $result = $this->handlerCustomerTargetRequestRevise();
//        if($result) {
//            $this->handlerResponse($this->getCustomerTargetData());
//        } else {
//            $this->handlerResponse(['error'=>1,'message' => '数据出错']);
//        }
//    }
    /*
     * 创建 标签
     */
    public function createCustomerTagAction()
    {
        $this->request->key = 'tag';
        $this->request->name = '标签';
        $revise = $this->handlerCreateCustomerTargetRequestRevise();//处理分组或标签的传入数据
        if ($revise['error'] != 0) {
            $this->handlerResponse($revise);
        } else {
            $result =  $this->createCustomerTargetAppoint();//数据库处理
            $this->handlerResponse($result ? ['error'=>0,'message'=>$this->request->name.'添加成功','id'=>$result] : ['error' => 1,'message'=>$this->request->name.'添加失败']);
        }
    }
    /*
     * 创建 组
     */
    public function createCustomerGroupAction()
    {
        $this->request->key = 'group';
        $this->request->name = '分组';
        $revise = $this->handlerCreateCustomerTargetRequestRevise();//处理分组或标签的传入数据

        if ($revise['error'] != 0) {
            $this->handlerResponse($revise);
        } else {
            $result =  $this->createCustomerTargetAppoint();//数据库处理
            $this->handlerResponse($result ? ['error'=>0,'message'=>$this->request->name.'添加成功','id'=>$result] : ['error' => 1,'message'=>$this->request->name.'添加失败']);
        }
    }
    /*
     * 删除标签
     */
    public function rmCustomerTagAction()
    {
        $result = $this->handlerRmCustomerTagRequestRevise();
        if($result['error'] == 0) {
            $this->handlerResponse($this->rmCustomerTagAppoint());
        } else {
            $this->handlerResponse($result);
        }
    }
    /*
     * 删除分组
     */
    public function rmCustomerGroupAction()
    {
        $result = $this->handlerRmCustomerGroupRequestRevise();
        if($result['error'] == 0) {
            $this->handlerResponse($this->rmCustomerGroupAppoint());
        } else {
            $this->handlerResponse($result);
        }
    }
    /*
     * 获取不在当前分组的用户 可以搜索 名称/分组名称/标签
     */
    public function getOtherGroupCustomerListsAction()
    {
        if($this->handlerOtherGroupCustomerRequestRevise()) {
            $this->handlerResponse($this->getOtherGroupCustomerAppoint());
        }

    }
    /*
     * 获取不在当前标签的用户 可以搜索 名称
     */
    public function getOtherTagCustomerListsAction()
    {
        if($this->handlerOtherTagCustomerRequestRevise()) {
            $this->handlerResponse($this->getOtherTagCustomerAppoint());
        }
    }
    /*
     * 分组添加客户
     */
    public function appendCustomerFromGroupAction()
    {
        if($this->handlerAppendCustomerFromGroupRequestRevise()) {
            $result = $this->appendCustomerFromGroupAppoint();
            $this->handlerResponse($result ? ['error'=>0,'message'=>'用户添加成功!!'] : ['error' => 1,'message' => '用户添加失败']);
        }
    }
    /*
     * 标签添加客户
     */
    public function appendCustomerFromTagAction()
    {
        if($this->handlerAppendCustomerFromTagRequestRevise()) {
            $this->handlerResponse($this->appendCustomerFromTagAppoint());
        }
    }
    /*
     * 标签删除客户
     */
    public function rmCustomerFromTagAction()
    {
        if($this->handlerRmCustomerFromTagRequestRevise()) {
            $this->handlerResponse($this->rmCustomerFromTagAppoint());
        }
    }
    /*
     * 分组删除客户
     */
    public function rmCustomerFromGroupAction()
    {
        if($this->handlerRmCustomerFromGroupRequestRevise()) {
            $this->handlerResponse($this->rmCustomerFromGroupAppoint());
        }
    }
    /*
     * 客户详情
     */
    public function customer_detailAction()
    {
        if($this->handlerCustomerDetailRequestRevise()) {
            $finally = $this->customerDetailAppoint();
            $this->handlerCustomerDetailFinally($finally);
            $this->display();
        }
    }
    public function customer_editAction()
    {
        if(IS_GET) {
            if($this->handlerCustomerDetailRequestRevise()) {
                $finally = $this->customerDetailAppoint();
                $this->handlerCustomerDetailFinally($finally);
                $this->handlerCustomerTargetFinally($this->customerTargetListsAppoint());
                $this->display();
            }
        } else {
            if($this->handlerCustomerEditRequestRevise()) {
                $this->handlerResponse($this->customerEditAppoint());
            }
        }
    }
    public function hasInformationTitleAction()
    {
        $result = $this->hasInformationTitleAppoint();
        $this->handlerResponse($result ? ['error' => 1,'message' => '该自定义类型标题已存在'] : ['error'=>0]);
    }
    /*******************************AppointFunciotn************************************/
    //获取并处理 标签列表
    public function getTargetTags($option = [])
    {
        return D($this->_model)->getTargetTags($option);
    }
    //获取并处理 组列表
    public function getTargetGroups($option = [])
    {
        return D($this->_model)->getTargetGroups($option);
    }
    //获取用户标签列表 -- 显示用户数量
    protected function getCustomerTags()
    {
        return D($this->_model)->getCustomerTags();
    }
    //获取用户组别列表-- 显示用户数量
    protected function getCustomerGroups()
    {
        return D($this->_model)->getCustomerGroups();
    }
    //异步获取客户列表
    public function getCustomerListsData(){
        return D($this->_model)->getCustomerLists($this->storage);
    }
    //用户标签/组名 名称修改
    protected function saveTargetNameRevise()
    {
        return D($this->_model)->saveTargetNameRevise($this->request);
    }
    //用户标签查询次数 -- 增加
    protected function incTagQueryCount($tags)
    {
        return D($this->_model)->incTagQueryCount($tags);
    }
    //用户组查询次数 -- 增加
    protected function incGroupQueryCount($group)
    {
        return D($this->_model)->incGroupQueryCount($group);
    }
    //标签/组 单项查询
    protected function getCustomerTargetData()
    {
        return D($this->_model)->getCustomerTargetData($this->request);
    }
    //标签/组 单项添加
    protected function createCustomerTargetAppoint()
    {
        return D($this->_model)->createCustomerTarget($this->request);
    }
    //删除分组
    protected function rmCustomerGroupAppoint()
    {
        return D($this->_model)->rmCustomerGroup($this->request);
    }
    //删除标签
    protected function rmCustomerTagAppoint()
    {
        return D($this->_model)->rmCustomerTag($this->request);
    }
    //获取不在当前分组的用户
    protected function getOtherGroupCustomerAppoint()
    {
        return D($this->_model)->getOtherGroupCustomer($this->request);
    }
    protected function getOtherTagCustomerAppoint()
    {
        return D($this->_model)->getOtherTagCustomer($this->request);
    }
    //用户分组添加用户
    protected function appendCustomerFromGroupAppoint()
    {
        $result = D($this->_model)->validateCustomerFromGroup($this->request);//删除前的验证
        return $result['error'] == 0 ? D($this->_model)->appendCustomerFromGroup($this->request) : $result;
    }
    //用户分组删除用户
    protected function rmCustomerFromGroupAppoint()
    {
        $result = D($this->_model)->validateCustomerFromGroup($this->request);//删除前的验证
        return $result['error'] == 0 ? D($this->_model)->rmCustomerFromGroup($this->request) : $result;
    }
    //用户标签添加用户
    protected function appendCustomerFromTagAppoint()
    {
        $result = D($this->_model)->validateCustomerFromTag($this->request);//添加前的验证
        return $result['error'] == 0 ? D($this->_model)->appendCustomerFromTag($this->request) : $result;
    }
    //用户标签删除用户
    protected function rmCustomerFromTagAppoint()
    {
        $result = D($this->_model)->validateCustomerFromTag($this->request);//删除前的验证
        return $result['error'] == 0 ? D($this->_model)->rmCustomerFromTag($this->request) : $result;
    }
    protected function customerDetailAppoint()
    {
        $result = D($this->_model)->validatecustomerDetail($this->request);//查看前的验证
        if ($result['error'] == 0) {
            return D($this->_model)->customerDetail($this->request);
        } else {
            $this->error($result['message']);
        }
    }
    protected function customerTargetListsAppoint()
    {
        $tags_lists = D($this->_model) ->getTargetTags();
        $groups_lists = D($this->_model) ->getTargetGroups();
        return compact('tags_lists','groups_lists');
    }
    protected function customerEditAppoint()
    {
        return D($this->_model)->customerEdit($this->storage);
    }
    //判断自定义的类型是否存在
    protected function hasInformationTitleAppoint()
    {
        return D($this->_model)->hasInformationTitle($this->request);
    }
    //获取标签/分组信息
    protected function getTargetDataAppoint(){
        if ($this->request->key == 'group') {
            return $this->request->id == 0 ? ['id'=>0,'value'=>'未分组'] : D($this->_model)->getTargetData($this->request);
        } else {
            return D($this->_model)->getTargetData($this->request);
        }

    }
    /*******************************NewlyHandlerFunciotn************************************/
    protected function HandlerTargetDetailRevise()
    {
        if($this->request->id >= 0) {
            return in_array($this->request->key,['group','tag']) ? true : false;
        } else {
            return false;
        }
    }
    /*
    * 首页初始化
    * effect 客户管理 - 全部用户(客户列表) -- 数据处理
    * request tags ['1&|2','3']
    * return array
    * created Aug 7,2018
    */
    public function handlerCustomerListsInitialization($option=[]){
        if ($option){
            $condition = $option;
        }
        $condition['user.branch_id'] = $this->branch_id;
        $condition['user.is_valid'] = 1;//有效的
        $condition['user.user_type'] = array('neq',USER_TYPE_COMPANY_MANAGER);
        $this->storage->condition = $condition;
    }
    //模板通知不限制管理员
    public function handlerCustomerListsInitializationWx($option=[],$storage = [],$type='limit'){
        if ($option){
            $condition = $option;
        }
        $condition['user.branch_id'] = $this->branch_id;
        $condition['user.is_valid'] = 1;//有效的
        $this->storage = $storage;
        $this->storage->condition = $condition;
        if($type == 'limit') {
            $this->storage->field =  ' CONCAT(user.name,if(user.comments != "",CONCAT(CONCAT(\'(\',user.comments),\')\'),"")) as name,user.id,user.mobile,user.head_pic,user.group_id,if(team.id > 0 , team.value , \'未分组\') as group_name';
            $this->storage->page = (($this->request->page - 1) * 20).',20';
        } else {
            $this->storage->page = '';
            $this->storage->field = 'user.id,user.name';
        }
    }
    /*
    * 处理传进来的数据
    * effect 客户管理 - 全部用户(客户列表) -- 数据处理
    * request tags [[2,3],[3]]
    * return array
    * created Aug 7,2018
    */
    public function handlerCustomerListsRequest($option = [],$type='limit'){
        if ($option){
            $condition = $option;
        }
        $condition['user.branch_id'] = $this->branch_id;
        $condition['user.is_valid'] = 1;//有效的
        $condition['user.is_follow'] = 1;//有效的
//        $condition['user.user_type'] = array('neq',USER_TYPE_COMPANY_MANAGER);
        $groups = $this->request->groups;
        if (is_array($groups) && count($groups) > 0) {
            if (in_array('other',$groups) !== false) {
                unset($groups[array_search('other',$groups)]);
                if (count($groups) > 0) {
                    $condition['user.group_id'] = array(array('eq',0),array('eq',''),array('exp','is null'),array('in',$groups),'or');
                    D('SysUserSupervise')->incGroupQueryCount($groups);
                } else {
                    $condition['user.group_id'] = array(array('eq',0),array('eq',''),array('exp','is null'),'or');
                }
            } else {
                $condition['user.group_id'] = array('in',$groups);
                D('SysUserSupervise')->incGroupQueryCount($groups);
            }
        } else {
            if ($this->request->key === 'group') {
                $condition['user.group_id'] = array(array('neq',$this->request->id),array('eq',0),array('eq',''),array('exp','is null'),'or');
            }
        }
        if (trim($this->request->keyword) != ''){
           $condition['_string'] = sprintf('user.name like %%%s%%',trim($this->request->keyword));
        }
        if (is_array($this->request->tags) && count($this->request->tags) > 0) {
            $this->storage->tags = $this->request->tags;
            $this->incTagQueryCount($this->storage->tags);
            $this->storage->tags_parse = $this->handlerTagsPolymorphic( $this->storage->tags);
        }
        if ($type === 'limit') {
            $this->storage->page = (($this->request->page - 1) * 20).',20';
        } else {
            $this->storage->page = '';
        }
        $this->storage->condition = $condition;
    }
    /*
* 处理多级标签
* effect 客户管理 - 全部用户(客户列表) -- 标签处理
* return array
* created Aug 7,2018
*/
    public function handlerTagsPolymorphic($data)
    {
        if(!$data)
        {
            return [];
        }
        $count = count($data);
        $tags_parse = [];
        if( $count == 1 )
        {
            return $data;
        }
        else
        {
            for ($i = 0 ; $i < ($count - 1) ; $i ++)
            {
                if($i == 0)
                {
                    $tip = $data[$i];
                }
                else
                {
                    $tip = $tags_parse;
                }
                $temp = [];
                for ( $a = 0 ; $a < count($tip); $a++)
                {
                    for ( $n = 0 ; $n < count($data[$i+1]) ; $n ++ )
                    {
                        $temp[] = $tip[$a] . ',' . $data[ $i + 1 ][$n];
                    }
                }
                $tags_parse = $temp;
            }
            return $tags_parse;
        }
    }
    /*
     * 处理用户拼音排行
     * */
    public function handlerCustomerPinyinLists($data)
    {
        $other = [];
        foreach($data['rows'] as $key=>$val) {
            $val['name'] = $this->ReplaceSpecialChar($val['name']);
            $data['rows'][$key]['name'] = $this->ReplaceSpecialChar($val['name']);
            $first_char = strtoupper(substr(firstPinyin($val['name']) , 0 , 1));
            $data['rows'][$key]['pinyin'] = $this->ReplaceSpecialChar(firstPinyin($val['name']));
            $data['rows'][$key]['first_char'] = $this->ReplaceSpecialChar($first_char);
            if(!preg_match ("/^[a-z]/i", $first_char)) {
                $other[] =$data['rows'][$key];
            } else {
                $result[$first_char]["items"][] = $data['rows'][$key];
            }
        }
        ksort($result);
        if($other) {
            $result['Other']['items'] = $other;
        }
//        var_dump($result['Other']['items'] );die;
        return $result;
    }

    function ReplaceSpecialChar($C_char)
    {//过滤特殊字符
//        $C_char = HTMLSpecialChars($C_char); //将特殊字元转成 HTML 格式
//        $C_char = str_replace(" ", " ", $C_char); //替换英文逗号,
//        $C_char = str_replace("\\", " ", $C_char);
//        $C_char = str_replace("|", " ", $C_char);
//        $C_char = str_replace("／", " ", $C_char);
//        $C_char = str_replace("（", "(", $C_char);
//        $C_char = str_replace("）", ")", $C_char);
//        $C_char = str_replace("潾", "", $C_char);
//        htmlentities($C_char, ENT_QUOTES);//替换英文双引号 "
        $C_char = iconv("UTF-8","UTF-8//IGNORE",$C_char);
        return $C_char;//返回处理结果
    }
    /*
    * 修改标签传入的数据
    * request id value
    * effect 客户管理 - 标签
    * return array
    * created Aug 7,2018
    */
    protected function HandlerSaveTargetNameRevise()
    {
        $this->request->value = trim($this->request->value);
        if(session('user_type') != USER_TYPE_COMPANY_MANAGER){
            return ['error'=>1,'message'=>'您没有权利修改!'];
        }
        if($this->request->value == '')
        {
            return ['error'=>1,'message'=>$this->request->name.'不能为空!'];
        }
        if (is_null($this->request->id) || !($this->request->id > 0)){
            return ['error'=>1,'message'=>'数据出错!'];
        }
        $validate_state = D($this->_model)->validateTarget($this->request);//数据库验证
        return $validate_state;
    }
    /*
       * 修改标签和组 单项查询用户列表 传入值修订
       * request id value key
       * effect 客户管理 - 标签
       * return array
       * created Aug 7,2018
       */
//    protected function handlerCustomerTargetRequestRevise()
//    {
//        $this->request->value = trim($this->request->value);
//        return in_array($this->request->key,['group','tag']) ? true : false;
//    }
    protected function handlerCreateCustomerTargetRequestRevise()
    {
        $this->request->value = trim($this->request->value);
        if(session('user_type') != USER_TYPE_COMPANY_MANAGER){
            return ['error'=>1,'message'=>'您没有权利修改!'];
        }
        if($this->request->value == '')
        {
            return ['error'=>1,'message'=>$this->request->name.'不能为空!'];
        }
        $validate_state = D($this->_model)->validateTarget($this->request,'create');//数据库验证
        return $validate_state;
    }
    protected function userListsAssign($restrict){
        $condition_groups['a.is_valid'] = 1;
        $condition_groups['a.is_follow'] = 1;
        $condition_groups['a.branch_id'] = $this->user_branch;
        $condition_tags['user.is_valid'] = 1;
        $condition_tags['user.is_follow'] = 1;
        $condition_tags['user.branch_id'] = $this->user_branch;
        $option_tag = [];
        $option_group = [];
        if ($restrict['key'] == 'tag') {
            $user_other = D('SysUser')
                        ->setDacFilter('user')
                        ->field('urt.user_id')
                        ->join('sys_user_relation_tag as urt on urt.user_id = user.id')
                        ->where(['urt.tag' => $restrict['id']])->select();
            $user_other = array_column($user_other,'user_id');
            $option_tag['a.id'] = array('neq',$restrict['id']);
        }
        if ($restrict['key'] == 'group') {
            $user_other = D('SysUser')->field('a.id')->setDacFilter('a')->where(['a.group_id' => $restrict['id']])->select();
            $user_other = array_column($user_other,'id');
            $option_group['a.id'] = array('neq',$restrict['id']);
        }

        if($restrict['key'] == "staff"){
            $condition_staff['user.branch_id'] = $this->branch_id;
            $condition_staff['user.id'] = array("neq",$this->request->id);
            $condition_staff['user.is_valid'] = 1;//有效的
            $condition_staff['user.user_type'] = array('eq',USER_TYPE_COMPANY_MANAGER);
            $user_other = D('SysUser')->field('user.id')->setDacFilter('user')->where($condition_staff)->select();
            $user_other = array_column($user_other,'id');
            //$option_group['a.id'] = array('neq',$restrict['id']);
        }
        if($restrict['key'] == "addStaff"){
            $condition_addStaff['user.branch_id'] = $this->branch_id;
            $condition_addStaff['user.is_valid'] = 1;//有效的
            $condition_addStaff['user.user_type'] = array('neq',USER_TYPE_COMPANY_MANAGER);
            $user_other = D('SysUser')->field('user.id')->setDacFilter('user')->where($condition_addStaff)->select();
            $user_other = array_column($user_other,'id');
            //$option_group['a.id'] = array('neq',$restrict['id']);
        }

        if ($user_other) {
            $condition_groups['a.id'] = array('not in',$user_other);
            $condition_tags['urt.user_id'] = array('not in',$user_other);
            $condition_groups_other['a.id'] = array('not in',$user_other);
        }
        //标签
        $tags = $this->getTargetTags($option_tag);
        foreach($tags as $k=>$v){
            $condition_tags['urt.tag'] = $v['id'];
            $tags[$k]['user_count'] = D('SysUser')->setDacFilter('user')
                    ->join('sys_user_relation_tag as urt on urt.user_id = user.id')
                    ->where($condition_tags)
                    ->count();
        }
        $this->tags = json_encode($tags ?? []);
        //分组
        $groups = $this->getTargetGroups($option_group);
        foreach ($groups as $k => $v) {
            $condition_groups['a.group_id'] = $v['id'];
            $groups[$k]['user_count'] = D('SysUser')->setDacFilter('a')->where($condition_groups)->count();
        }
        $tmp = array('id'=>'other','value' => '未分组','branch_id' => $this->user_branch);
        $condition_groups_other['a.group_id'] = array(array('eq',''),array('eq',0),array('exp','is null'),'or');
//        $condition_groups_other['_string'] = 'group_id is null or group_id =""';
        $condition_groups_other['a.branch_id'] = $this->user_branch;
        $condition_groups_other['a.is_valid'] = 1;
        $condition_groups_other['a.is_follow'] = 1;
        $tmp['user_count'] = D('SysUser')
            ->setDacFilter('a')
            ->where($condition_groups_other)
            ->count();
        array_unshift($groups,$tmp);
        $this->groups = json_encode($groups);
    }

    protected function handlerRmCustomerTagRequestRevise()
    {
        if ( !empty($this->request->id) && is_array($this->request->id) && count($this->request->id) > 0) {
            return D($this->_model)->hasCustomerTargetId(['id'=>$this->request->id,'key'=>'tag']) ? ['error' => '0'] : ['error'=>'1','message'=>'您已成功删除标签'];
        } else {
            return ['error'=>'1','message'=>'请选择要删除的标签'];
        }
    }
    protected function handlerRmCustomerGroupRequestRevise()
    {
        if ( !empty($this->request->id) && is_array($this->request->id) && count($this->request->id) > 0) {
            return D($this->_model)->hasCustomerTargetId(['id'=>$this->request->id,'key'=>'group']) ? ['error' => '0'] : ['error'=>'1','message'=>'您已成功删除分组'];
        } else {
            return ['error'=>'1','message'=>'请选择要删除的分组'];
        }
    }
    protected function handlerOtherGroupCustomerRequestRevise()
    {
        if($this->request->id) {
            $this->request->condition['user.branch_id'] = $this->branch_id;
            $this->request->condition['user.is_valid'] = 1;//有效的
            $this->request->condition['user.user_type'] = array('neq',USER_TYPE_COMPANY_MANAGER);
            $this->request->condition['_string'] = ' user.group_id != '.$this->request->id.' or user.group_id is null ';
//            if(trim($this->request->keyword) != '') {
//                $this->request->condition['_string'] = sprintf('user.name like %%%s%%',$this->request->keyword);
//            }
            return true;
        }
        return false;
    }
    protected function handlerOtherTagCustomerRequestRevise()
    {
        if($this->request->id) {
            $this->request->condition['user.branch_id'] = $this->branch_id;
            $this->request->condition['user.is_valid'] = 1;//有效的
            $this->request->condition['user.user_type'] = array('neq',USER_TYPE_COMPANY_MANAGER);
            $user_ids = D($this->_model)->getTagFromCustomerIds($this->request);
            if ($user_ids) {
                $this->request->condition['user.id'] = array('not in',$user_ids);
            }

//            $this->request->condition['relation.tag'] = array('neq',$this->request->id);
//            if(trim($this->request->keyword) != '') {
//                $this->request->condition['_string'] = sprintf('user.name like %%%s%%',$this->request->keyword);
//            }
            return true;
        }
        $this->handlerResponse(['error'=>'1','message'=>'数据缺失']);
    }
    /*
     * 处理分组添加用户时传入进来的数据
     * param users  string
     * param id number/string
     */
    protected function handlerAppendCustomerFromGroupRequestRevise()
    {
        if(isset($this->request->users) && count(explode('||',$this->request->users)) > 0) {
            $this->request->users = explode('||',$this->request->users);
            return true;
        }
        $this->handlerResponse(['error' => 1,'message' => '请选择所要添加的用户']);
    }
    /*
     * 处理分组删除用户时传入进来的数据
     * param users  string
     * param id number/string
     */
    protected function handlerRmCustomerFromGroupRequestRevise()
    {
        if(isset($this->request->users) && count($this->request->users) > 0) {
            return true;
        }
        $this->handlerResponse(['error' => 1,'message' => '请选择所要删除的用户']);
    }
    /*
     * 处理标签添加用户时传入进来的数据
     * param users  string
     * param id number/string
     */
    protected function handlerAppendCustomerFromTagRequestRevise()
    {

        if(isset($this->request->users) && count(explode('||',$this->request->users)) > 0) {
            $this->request->users = explode('||',$this->request->users);
            return true;
        }
        $this->handlerResponse(['error' => 1,'message' => '请选择所要添加的用户']);
    }
    protected function handlerRmCustomerFromTagRequestRevise()
    {
        if(isset($this->request->users) && count($this->request->users) > 0) {
            return true;
        }
        $this->handlerResponse(['error' => 1,'message' => '请选择所要删除的用户']);
    }
    protected function handlerCustomerDetailRequestRevise()
    {
        if($this->request->id > 0) {
            $this->_assign_base_data();
            return true;
        } else {
            $this->error('该用户不存在!!');
            return false;
        }
    }
    protected function handlerCustomerDetailFinally($finally)
    {
        //客户资料处理
        $customer = $finally['customer'];
        $customer['reg_time'] = date('Y年m月d日',$customer['reg_time']);
        $customer['head_pic'] = trim($customer['head_pic']) ?? getDefalutHeadPic();
        $customer['information'] = $finally['info'];
        $customer['tags'] = $finally['tags'];
        $customer['money'] =  $customer['money'] ??  0;
        if(isset($customer['province']) && $customer['province'] > 0) {
            $customer['region'] = region($customer['province']) .' '.region($customer['city']).' '.region($customer['district']);
        } else {
            $customer['region'] = strtolower(ACTION_NAME) === 'customer_edit' ? '点击选择地址' : '';
        }
        $this->customer = $customer;
    }
    public function handlerCustomerData(&$data) {
        $data['head_pic'] = trim($data['head_pic']) ?? getDefalutHeadPic();
    }
    protected function handlerCustomerTargetFinally($finally)
    {
        $this->tags_lists = json_encode($finally['tags_lists']);
        $finally['groups'][0] = ['value'=>null,'text'=>'未分组'];
        foreach($finally['groups_lists'] as $key => $val) {
            $finally['groups'][] = ['value' => $val['id'],'text' => $val['value']];
        }
        $this->groups_lists = json_encode($finally['groups']);
    }
    protected function handlerCustomerEditRequestRevise()
    {
        if($this->request->id > 0) {
            $this->storage['id'] = $this->request->id;
            //用户
            $this->storage['users']['company_name'] = trim($this->request->users['company_name']) ?? null;
            $this->storage['users']['duties'] = trim($this->request->users['duties']) ?? null;
            $this->storage['users']['province'] = $this->request->users['province'] ?? null;
            $this->storage['users']['city'] = $this->request->users['city'] ?? null;
            $this->storage['users']['district'] = $this->request->users['district'] ?? null;
            $this->storage['users']['address'] = trim($this->request->users['address']) ?? null;
            $this->storage['users']['tax_number'] = trim($this->request->users['tax_number']) ?? null;
            $this->storage['users']['bank_address'] = trim($this->request->users['bank_address'] ?? null);
            $this->storage['users']['bank_account'] = trim($this->request->users['bank_account'] ?? null);
            $this->storage['users']['telephone'] = trim($this->request->users['telephone'] ?? null);
            $this->storage['users']['fax_number'] = trim($this->request->users['fax_number'] ?? null);
            $this->storage['users']['email'] = trim($this->request->users['email'] ?? null);
            $this->storage['users']['comments'] = trim($this->request->users['comments'] ?? null);
            $this->storage['users']['group_id'] = $this->request->users['group_id'] ?? null;
            //information
            if (!empty($this->request->information['new']) || !empty($this->request->information['old'])){
                foreach($this->request->information['new'] as $key => $val)
                {
                    $template_new = explode('||',$val);
                    $this->storage['information']['new'][] = [
                        'title' => trim($template_new[0]),
                        'value' => trim($template_new[1])
                    ];
                }
                foreach($this->request->information['old'] as $key => $val)
                {
                    $template_old = explode('||',$val);
                    $this->storage['information']['old'][] = [
                        'title' => trim($template_old[1]),
                        'id' => $template_old[0],
                        'value' => trim($template_old[2])
                    ];
                    $this->storage['information']['old_ids'][] = $template_old[0];
                }
            }else{
                $this->storage['information'] = [];
            }
            //tags
            if (is_array($this->request->tags) && !empty($this->request->tags)) {
                $this->storage['tags'] = $this->request->tags;
            } else {
                $this->storage['tags'] = [];
            }
            return true;
        } else {
            $this->handlerResponse(['error' => 1,'message' => '该用户不存在']);
        }
    }
    //判断用户或分组添加用户数据
    protected function HandlerTargetAdditionRevise()
    {
        if(in_array($this->request->key,array('group','tag'))) {
            $result= $this->request->key == 'group' ? $this->handlerOtherGroupCustomerRequestRevise():
                                             $this->handlerOtherTagCustomerRequestRevise();
            if($result){
                return true;
            }
        }elseif(in_array($this->request->key,array('staff','addStaff'))){
            $result= $this->request->key == 'addStaff' ? $this->handlerAddStaffCustomerRequestRevise():
                $this->handlerStaffListCustomerRequestRevise();
            if($result){
                return true;
            }
        }
        $this->error('数据出错,禁止通行!!','/');
        return false;
    }

    public function handlerAddStaffCustomerRequestRevise(){
        if($this->request->id) {
            $this->request->condition['user.branch_id'] = $this->branch_id;
            $this->request->condition['user.is_valid'] = 1;//有效的
            $this->request->condition['user.user_type'] = array('neq',USER_TYPE_COMPANY_MANAGER);
            $this->request->condition['_string'] = ' user.mobile != "" or user.is_follow = 1 ';
            return true;
        }
        return false;
    }

    public function handlerStaffListCustomerRequestRevise(){
        if($this->request->id) {
            $this->request->condition['user.branch_id'] = $this->branch_id;
            $this->request->condition['user.id'] = array("neq",$this->request->id);
            $this->request->condition['user.is_valid'] = 1;//有效的
            $this->request->condition['user.user_type'] = array('eq',USER_TYPE_COMPANY_MANAGER);
            return true;
        }
        return false;
    }

    //地区
    protected function _assign_base_data() {
        $region_list = M('sysRegion') -> field("id as value,name as text,id,parent_id") -> cache(true) -> order("level asc,sort desc") -> select();
        $region = list_to_tree($region_list, 0 ,"id", "parent_id", "children");
        $this -> assign('region', json_encode($region));
    }

    /*******************************BaseHandlerFunciotn************************************/
    //默认参数
    protected function handlerGetDefaultData()
    {
        parent::handlerGetDefaultData(); // TODO: Change the autogenerated stub
        $this->title = '用户管理';
    }
    protected function handlerPermissionsProcessing()
    {
        parent::handlerPermissionsProcessing();
        switch (ACTION_NAME) {
            case 'customer_tags':
                $this->_permission_name = 'SysTargetTag';
                $this->_permission_action_name = 'list';
                break;
            case 'customer_groups':
                $this->_permission_name = 'SysTargetGroup';
                $this->_permission_action_name = 'list';
                break;
            case 'tag_detail':
                $this->_permission_name = 'SysTargetTag';
                $this->_permission_action_name = 'detail';
                break;
            case 'group_detail' :
                $this->_permission_name = 'SysTargetGroup';
                $this->_permission_action_name = 'detail';
                break;
            case 'rmCustomerGroup' :
                $this->_permission_name = 'SysTargetGroup';
                $this->_permission_action_name = 'delete';
                break;
            case 'rmCustomerTag' :
                $this->_permission_name = 'SysTargetGroup';
                $this->_permission_action_name = 'delete';
                break;
        }
    }
}