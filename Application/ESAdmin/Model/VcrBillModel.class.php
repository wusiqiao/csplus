<?php

namespace ESAdmin\Model;

use Common\Lib\Model\DataModel;

class VcrBillModel extends DataModel {

    protected $tableName = 'vcr_bill';
    protected $_bill_flag = null; //不限制类型
    protected $_auto = array(
        array('update_time', 'time', 3, 'function'), // 对update_time字段在更新的时候写入当前时间戳
        array("bill_date", "strtotime", 3, "function"),
        array("source_date", "strtotime", 3, "function")
    );

    protected function _options_filter(&$options) {
        if (isset($this->_bill_flag)) {
            $this->addOptionsFilter($options, array("bill_flag" => $this->_bill_flag));
        }
        parent::_options_filter($options);
    }

    public function __construct($name = '', $tablePrefix = '', $connection = '') {
        parent::__construct($name, $tablePrefix, $connection);
        if (isset($this->_bill_flag)) {
            $this->_auto[] = array("bill_flag", $this->_bill_flag);
        }
    }
   

    /**     建立来源单证和凭证草稿关系
     * @param type $voucher_id 凭证ID
     * @param type $id_groups 来源单列表
     */
    protected  function updateRelation($voucher_id, $id_groups){
        if (!is_array($id_groups)){
             E("传入id_groups必须为数组！");
        }
        if ($this->execute(sprintf("update vcr_bill set voucher_id=$voucher_id where id in (%s)", implode(",",$id_groups))) === false) {
            E("更新来源表错误");
        }
    }

    protected function _after_insert($data, $options) {
        $this->_insert_detail($data);
        parent::_after_insert($data, $options);
    }
        
    protected function _after_update($data, $options) {
        M("VcrBillDetail")->where("parent_id=".$data["id"])->delete();
        $this->_insert_detail($data);
        parent::_after_update($data, $options);
    }

    private function _insert_detail($data){
        $model_name = getModuleNameByFlag($data["bill_flag"]);
        D($model_name)->insert_detail($data["id"], $data);
    }

    protected function _before_delete($options) {
        if ($options){
            $condition["id"] = $options["where"]["id"];
            $condition["voucher_id"] = array("gt", 0);
            if ($this->where($condition)->count() > 0){
                E("所选记录已经生成凭证草稿，不能修改或删除！");
            }
            $where["parent_id"] = $options["where"]["id"];
            M("VcrBillDetail")->where($where)->delete();
        }        
        parent::_before_delete($options);
    }

    protected function _before_update(&$data, $options)
    {
        $condition["id"] = $data["id"];
        $condition["voucher_id"] = array("gt", 0);
        if ($this->where($condition)->count() > 0){
            E("所选记录已经生成凭证草稿，不能修改或删除！");
        }
        parent::_before_update($data, $options); // TODO: Change the autogenerated stub
    }

    public function getGoodsNames($branch_id, $bill_flag){
        if (empty($bill_flag)){
            $bill_flag = $this->_bill_flag;
        }
        $sql = "select distinct a.goods_name as name from vcr_bill_detail a inner join vcr_bill b on a.parent_id=b.id where b.branch_id=$branch_id";
        if ($bill_flag){
            $sql = $sql." and b.bill_flag=$bill_flag" ;
        }
        return $this->query($sql);
    }

    public function getUnitNames($branch_id){
        $sql = "select distinct a.unit as name from vcr_bill_detail a inner join vcr_bill b on a.parent_id=b.id"
            ." where b.branch_id=$branch_id";
        return $this->query($sql);
    }

    //获取detail名称列表
    public function getDetailGoodsNames($parentId){
        if (is_array($parentId)){
            $condition["parent_id"] = array("in", $parentId);
        }else{
            $condition["parent_id"] = $parentId;
        }
        $details = M("VcrBillDetail")->field("parent_id,group_concat(goods_name separator ';') as goods_name")
            ->where($condition)->group("parent_id")->select();
        $goods_names = array();
        foreach ($details as $key=>$value){
            $goods_names[$value["parent_id"]] = $value["goods_name"];
        }
        return $goods_names;
    }

    //在客户文件中创建单证资料的文件夹，二级文件夹为年月
    public function createBillFolder($branch_id,$bill_type){
        $data['branch_id'] = getBrowseBranchId();
        $data['target_branch'] = $branch_id;
        $data['type'] = 0;//文件夹
        $data['parent_id'] = 0;
        if($bill_type == FLAG_BILL_RECEIPT){
            $data['name'] = "银行回单";
        }else{
            $data['name'] = FLAG_BILL_NAMES[$bill_type];
        }
        $folder = M("SysDocument")->where($data)->getField("id");
        if($folder){
            $data['parent_id'] = $folder;
            $data['name'] = I("post.accounting-section-year").I("post.accounting-section-month");
            $folder_id = M("SysDocument")->where($data)->getField("id");
            if(!$folder_id){
                $data['user_id'] = 0;
                $data['is_valid'] = 1;
                $data['created_at'] = time();
                $data['updated_at'] = time();
                $folder_id = M("SysDocument")->add($data);
            }
            return $folder_id;
        }else{
            $data['created_at'] = time();
            $data['updated_at'] = time();
            $parent_id = M("SysDocument")->add($data);
            $data['parent_id'] = $parent_id;
            $data['name'] = I("post.accounting-section-year").I("post.accounting-section-month");
            $folder_id = M("SysDocument")->add($data);
            return $folder_id;
        }
    }

    public function getFreeAmountTips($branch_id,$pageData){
        $branch_data = M("SysBranch")->where("id = $branch_id")->field("ent_scale,free_amount,free_type")->find();
        //小规模有免税额度时增加提示
        if($branch_data['ent_scale'] == ENTERPRISE_SCALE_SMALL){
            //开票总金额
            $free_amount = $branch_data['free_amount'];//免税额度
            if($branch_data['free_type'] == AMOUNT_FREE_TYPE_MONTH){
                $total_money = M(CONTROLLER_NAME)->alias("a")
                    ->where($pageData["where"])
                    ->sum("a.total_sum");
                $balance = ($free_amount - $total_money) > 0 ? ($free_amount - $total_money) : 0;
                $result['tips'] = "本月免税额度剩余".$balance."元";
            }else{
                //会计期间当月是第几季度
                $season = ceil((date('n',strtotime($pageData["where"]['a.accounting_section']."/01")))/3);
                $year = substr($pageData["where"]['a.accounting_section'],0,4);
                $season_month = array(1=>"$year/01,$year/02,$year/03",2=>"$year/04,$year/05,$year/06",3=>"$year/07,$year/08,$year/09",4=>"$year/10,$year/11,$year/12");
                $pageData["where"]['a.accounting_section'] = array("in",explode(",",$season_month[intval($season)]));
                $total_money = M(CONTROLLER_NAME)->alias("a")
                    ->where($pageData["where"])
                    ->sum("a.total_sum");
                $balance = ($free_amount - $total_money) > 0 ? ($free_amount - $total_money) : 0;
                $result['tips'] = "本季免税额度剩余".$balance."元";
            }
        }else{
            $result['tips'] = "";
        }
        return $result['tips'];
    }
}
