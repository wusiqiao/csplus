<?php

namespace ESAdmin\Model;

use ESAdmin\Model\BranchBaseModel;
use Think\Exception;

class SysBranchModel extends BranchBaseModel
{
    protected $_leaderField = "leader_id";
    /**
     * 免费模板商家的ID
     * */
    const FREE_TEMPLATE_BRANCH_ID = 1042;

    protected $_link = array(
        "SysUser" => array(
            "join_name" => "LEFT",
            'class_name' => "SysUser",
            'foreign_key' => 'leader_id',
            'mapping_name' => 'leader',
            'mapping_fields' => 'name',
            "mapping_key" => "id"
        )/*,
        "SysBranchAgreement" => array(
            "join_name" => "LEFT",
            'class_name' => "SysBranchAgreement",
            'foreign_key' => 'id',
            'mapping_name' => 'agree',
            'mapping_fields' => 'agreement_no,bundles,price,start_date,end_date,months,attach_group',
            "mapping_key" => "branch_id"
        )*/
    );

    protected $_validate = array(
        array('name', '', '商户名称已经存在！', 0, 'unique', 3)
    );
    protected $_branch_type = ORG_BRANCH;

    //直接新增财务公司资料的登录账号
    protected function _after_insert($data, $options){
        parent::_after_insert($data, $options);
        //新增合同记录
        //$this->updateAgreement($data["id"]);
        //添加修改配置
        //$this->updateWxConfig($data["id"]);
//        //初始化基本资料，类别,微信菜单， 创建商户超级角色
        if ($data["branch_role"] != 0) { //意向客户
            $this->initialData($data["id"], $data["branch_role"]);
        }
        $this->addBranchLog($data["id"], "创建客户");

        D('ComProgressParameter')->initWxMbxx($data["id"]);
    }

    public function addBranchLog($id, $content){
        $log["branch_id"] = $id;
        $log["log_time"] = date("Y-m-d H:i:s");
        $user_session = session(USER_SESSION_KEY);
        $log["creater_id"] = $user_session->userId;
        $log["user_name"] = $user_session->userName;
        $log["content"] = $content;
        M("SysAgreementLog")->add($log);
        return $log;
    }


    //添加修改配置
    private function updateWxConfig($branch_id){
        $wxConfigModel = M("WxConfig");
        $cfg_data = $wxConfigModel->create();
        unset($cfg_data["id"]); //create会把post.id也填进去，此ID为主表sysbranch的id,需要去除
        $condition["branch_id"] = $branch_id;
        if ($wxConfigModel->where($condition)->count() == 0) {
            $cfg_data["branch_id"] = $branch_id;
            $wxConfigModel->add($cfg_data);
        } else {
            $wxConfigModel->where($condition)->save($cfg_data);
        }
    }

    //添加修改合同
    private function updateAgreement($branch_id){
        $agreementModel = M("SysBranchAgreement");
        $agreement_data = $agreementModel->create();
        unset($agreement_data["id"]); //create会把post.id也填进去，此ID为主表sysbranch的id,需要去除
        if ($agreement_data["bundles"]) {
            $agreement_data["bundles"] = implode(",", $agreement_data["bundles"]);
        }
        $condition["branch_id"] = $branch_id;
        if ($agreementModel->where($condition)->count() == 0) { //没有合同
            $agreement_data["branch_id"] = $branch_id;
            $agreement_data["attach_group"] = md5(uniqid(mt_rand(), true));
            if ($agreementModel->add($agreement_data)) {
                $log["branch_id"] = $branch_id;
                $log["log_time"] = date("Y-m-d H:i:s");
                $user_session = session(USER_SESSION_KEY);
                $log["creater_id"] = $user_session->userId;
                $log["user_name"] = $user_session->userName;
                $log["content"] = "创建合同";
                M("SysAgreementLog")->add($log);
            }
        } else {
            $agreementModel->where($condition)->save($agreement_data);
        }
    }

    protected function _after_update($data, $options){
        parent::_after_update($data, $options); // TODO: Change the autogenerated stub
        //$this->updateAgreement($data["id"]);
        //$this->updateWxConfig($data["id"]);
        $this->addBranchLog($data["id"], "修改客户信息");
    }

    protected function _after_delete($data, $options){
        $this->_deleteOtherData($options["where"]["id"]);
        parent::_after_delete($data, $options);
    }

    /**删除其他数据，切换版本时，不删除人员和合同
     * @param $id
     */
    private function _deleteOtherData($id){
        D("SysBranchAgreement")->where(array("branch_id" => $id))->delete();
        D("SysUser")->where(array("branch_id" => $id))->delete();
        D("WxConfig")->where(array("branch_id" => $id))->delete();
        M("SysRole")->where(array("branch_id" => $id))->delete();
        M("ComStore")->where(array("branch_id" => $id))->delete();
        M("WxMenu")->where(array("branch_id" => $id))->delete();
        M("ComProduct")->where(array("branch_id" => $id))->delete();
        M("ComProductOptions")->where(array("branch_id" => $id))->delete();
        M("ComCategory")->where(array("branch_id" => $id))->delete();
        M("ComOrder")->where(array("branch_id" => $id))->delete();
    }

    private function initialData($branch_id, $branch_role, $is_reset = false){
        //公司模板还未创建，暂时不使用此方式，等创建后再用
//        $this->freeInitialData($branch_id, $branch_role, $is_reset);
//        return true;
        $data_file = "Install/initialData_Free.sql";
        $fp = fopen(RUNTIME_PATH . 'data_copy.lock', "w+");
        if (flock($fp, LOCK_EX + LOCK_NB)) {
            $this->startTrans();
            try {
                $branchData = M("SysBranch")->field("id,name,leader_id")->where("id=$branch_id")->find();
                if ($is_reset) {
                    $this->execute("delete from wx_menu where branch_id=$branch_id");
                    $this->execute("delete from com_store where branch_id=$branch_id");
                    $this->execute("delete from com_banner where branch_id=$branch_id");
                    $this->execute("delete from com_category where branch_id=$branch_id");
                    $this->execute("delete from com_product where branch_id=$branch_id");
                    $this->execute("delete from com_product_options where branch_id=$branch_id");
                    $sql = sprintf("update sys_branch set branch_role=%d where id=%d", $branch_role, $branch_id);
                    $this->execute($sql);
                    //设置商户管理员
                    $leader_id = $branchData["leader_id"];
                    if ($leader_id) {
                        $sql = sprintf("update sys_user set role_ids='%s' where id=%d", $branch_role, $leader_id);
                        $this->execute($sql);
                        //更新管理员权限表
                        $sql = sprintf("delete from sys_user_role where user_id=%d", $leader_id);
                        $this->execute($sql);
                        $sql = sprintf("insert sys_user_role(role_id,user_id)values(%d,%d)", $branch_role, $leader_id);
                        $this->execute($sql);
                    }
                }
                if (is_file($data_file)) {
                    $sql = file_get_contents($data_file);
                    if ($sql) {
                        $sql = str_replace("__BRANCH__", $branch_id, $sql);
                        $sql = str_replace("__BRANCH_NAME__", $branchData["name"], $sql);
                        $sql_list = explode("\r\n", $sql);
                        try {
                            foreach ($sql_list as $sql) {
                                $sql_trim = trim($sql);
                                if ($sql_trim && stripos($sql_trim, "/*") !== 0) { //跳过注释
                                    if (!$this->execute($sql)) {
                                        \Think\Log::write("Install/initialData.sql 语法执行失败:" . $sql);
                                    }
                                }
                            }
                        } catch (Exception $e) {
                            \Think\Log::write("Install/initialData.sql 语法执行失败:" . $e->getMessage());
                        }
                    } else {
                        \Think\Log::write("Install/initialData.sql 文件内容为空");
                    }
                } else {
                    \Think\Log::write("Install/initialData.sql 文件不存在");
                }
                $this->initOrderAttribute($branch_id);
                $this->commit();
                return true;
            } catch (Exception $ex) {
                $this->rollback();
                E($ex->getMessage());
            }
            flock($fp, LOCK_UN);
            fclose($fp);
        }
    }
    /**
     * 初始化，产品价格为面议
     * @param int $branchId 加盟ID
     * */
    private function initOrderAttribute($branchId){
        M('ComOrderAttribute')->where(['branch_id' => $branchId])->delete();
        $productOptions = M('ComProductOptions')->where(['branch_id' => $branchId, 'parent_id' => ['gt', 0]])->select();
        $productOrders = [];
        foreach ($productOptions as $product) {
            $productOrders[$product['product_id']][$product['parent_id']][] = $product;
        }
        $time = time();
        $data = [];
        foreach ($productOrders as $productId => $options) {
            $item = array_shift($options);
            $this->getAddOrderOption($this->getOrderOptionIdList(array_column($item, 'id'), $options), $data, $productId, $branchId, $time);
        }

        M('ComOrderAttribute')->addAll($data);
    }

    private function getAddOrderOption($list, &$data, $productId, $branchId, $time){
        foreach($list as $item){
            $data[] = [
                'value' => implode(',', $item),
                'real_cash' => 0,
                'real_cash' => 0,
                'product_id' => $productId,
                'branch_id' => $branchId,
                'is_open' => 1,
                'created_at' => $time,
                'updated_at' => $time,
            ];
        }
    }
    private function getOrderOptionIdList($ids, $list = []){
        $ids = is_array($ids) ? $ids : [$ids];
        if (empty($list)) {
            return $ids;
        }

        $items = array_shift($list);
        $data = [];
        $i = 0;
        if (count($ids) > count($items)) {
            foreach ($items as $itme) {
                foreach ($ids as $id) {
                    if (is_array($id)) {
                        $data[$i] = array_merge($id, [$itme['id']]);
                    } else {
                        $data[$i] = [$id, $itme['id']];
                    }

                    sort($data[$i]);
                    $i++;
                }
            }
        } else {
            foreach ($ids as $id) {
                foreach ($items as $itme) {
                    if (is_array($id)) {
                        $data[$i] = array_merge($id, [$itme['id']]);
                    } else {
                        $data[$i] = [$id, $itme['id']];
                    }

                    sort($data[$i]);
                    $i++;
                }
            }
        }

        return $this->getOrderOptionIdList($data, $list);
    }

    /**
     * 免费店铺初始化
     * */
    private function freeInitialData($branchId, $branch_role, $is_reset = false){
        $this->startTrans();
        try {
            $this->clearOldData($branchId, $branch_role, $is_reset);
            $this->setInitMenuInfo(self::FREE_TEMPLATE_BRANCH_ID, $branchId);
            $this->setInitStoreInfo(self::FREE_TEMPLATE_BRANCH_ID, $branchId);
            $this->setInitBannerInfo(self::FREE_TEMPLATE_BRANCH_ID, $branchId);
            $this->setInitShelfProductsInfo(self::FREE_TEMPLATE_BRANCH_ID, $branchId);
            $sql = "INSERT INTO `sys_role` (`name`, `is_valid`, `querykey`, `sort`, `branch_id`, `comments`, `is_admin`) VALUES ('超级管理员', '1', 'cjgly', NULL, {$branchId}, NULL, '1');";
            $this->execute($sql);
            $this->commit();
            return true;
        } catch (Exception $e) {
            $this->rollback();
            E($e->getMessage());
        }
    }

    /**
     * 初始化上架商品  com_category，com_product，com_product_options, com_order_attribute
     * @param  int $templateId 要复制企业的 ID
     * @param  int $branchId 等待复制的企业 ID
     * */
    private function setInitShelfProductsInfo($templateId, $branchId){
        try {
            //获取父级分类
            $categorys = D('com_category')->where(['branch_id' => $templateId, 'parent_id' => 0])->select();
            foreach ($categorys as $category) {
                $categoryPId = $category['id'];
                $category['branch_id'] = $branchId;
                unset($category['id']);
                $categoryNewPId = D('com_category')->add($category);

                //获取子级分类
                $categoryItems = D('com_category')->where(['branch_id' => $templateId, 'parent_id' => $categoryPId])->select();
                foreach ($categoryItems as $categoryItem) {
                    $categoryId = $categoryItem['id'];
                    $categoryItem['parent_id'] = $categoryNewPId;
                    $categoryItem['branch_id'] = $branchId;
                    unset($categoryItem['id']);
                    $categoryNewId = D('com_category')->add($categoryItem);

                    //添加产品
                    $products = D('com_product')->where(['branch_id' => $templateId, 'category_pid' => $categoryPId, 'category_id' => $categoryId])->select();
                    foreach ($products as $product) {
                        $productTemId = $product['id'];
                        $product['category_pid'] = $categoryNewPId;
                        $product['category_id'] = $categoryNewId;
                        $product['branch_id'] = $branchId;
                        unset($product['id']);
                        $productNewId = D('com_product')->add($product);

                        //添加规格名称
                        $comOrderAttributes = D('com_order_attribute')->where(['product_id' => $productTemId])->select();
                        $options = D('com_product_options')->where(['product_id' => $productTemId, 'parent_id' => 0])->select();
                        foreach ($comOrderAttributes as $key => $attribute) {
                            unset($comOrderAttributes[$key]['id']);
                            $comOrderAttributes[$key]['value'] = explode(',', $attribute['value']);
                            $comOrderAttributes[$key]['branch_id'] = $branchId;
                            $comOrderAttributes[$key]['product_id'] = $productNewId;
                        }

                        foreach ($options as $option) {
                            $optionsId = $option['id'];
                            unset($option['id']);
                            $option['branch_id'] = $branchId;
                            $option['product_id'] = $productNewId;
                            $optionNewId = D('com_product_options')->add($option);

                            //添加产品规格
                            $optionsItems = D('com_product_options')->where(['parent_id' => $optionsId])->select();
                            foreach ($optionsItems as $optionsItem) {
                                $oldId = $optionsItem['id'];
                                unset($optionsItem['id']);
                                $optionsItem['parent_id'] = $optionNewId;
                                $optionsItem['branch_id'] = $branchId;
                                $optionsItem['product_id'] = $productNewId;
                                $newId = D('com_product_options')->add($optionsItem);
                                foreach ($comOrderAttributes as $key => &$attribute) {
                                    $searchKey = array_search($oldId, $attribute['value']);
                                    $comOrderAttributes[$key]['value'][$searchKey] = $newId;
                                }
                            }

                            foreach ($comOrderAttributes as $key => $attribute) {
                                $comOrderAttributes[$key]['value'] = implode($attribute['value'], ',');
                            }

                            D('com_order_attribute')->addAll($comOrderAttributes);
                        }
                    }
                }
            }

            return true;
        } catch (Exception $e) {
            throw $e;
        }
    }

    /**
     * 初始化 com_banner
     * @param  int $templateId 要复制企业的 ID
     * @param  int $branchId 等待复制的企业 ID
     * */
    private function setInitBannerInfo($templateId, $branchId){
        $data = D('com_banner')->where(['branch_id' => $templateId])->select();
        try {
            foreach ($data as $key => $value) {
                $data[$key]['branch_id'] = $branchId;
                unset($value['id']);
                D('com_banner')->add($value);
            }
        } catch (Exception $e) {
            throw $e;
        }
    }

    /**
     * 初始化 com_store
     * @param  int $templateId 要复制企业的 ID
     * @param  int $branchId 等待复制的企业 ID
     * */
    private function setInitStoreInfo($templateId, $branchId){
        $data = D('com_store')->where(['branch_id' => $templateId])->find();
        unset($data['id']);
        $data['branch_id'] = $branchId;

        try {
            D('com_store')->add($data);
        } catch (Exception $e) {
            throw $e;
        }
    }

    /**
     * 上下级 关系绑定数组
     * */
    private function treeData($data, $field){

    }

    /**
     * 初始化 微信菜单
     * @param  int $templateId 要复制企业的 ID
     * @param  int $branchId 等待复制的企业 ID
     * */
    private function setInitMenuInfo($templateId, $branchId){
        $menuList = D('wx_menu')->where(['branch_id' => $templateId])->select();
        $data = [];
        foreach ($menuList as $key => $value) {
            $value['branch_id'] = $branchId;
            if ($value['parent_id'] == 0) {
                $data[$value['id']][] = $value;
            } else {
                $data[$value['parent_id']]['child'][] = $value;
            }
        }
        try {
            foreach ($data as $value) {
                $waitMainData = $value[0];
                unset($waitMainData['id']);
                $id = D('wx_menu')->add($waitMainData);
                $waitChildData = [];
                foreach ($value['child'] as $child) {
                    unset($child['id']);
                    $child['parent_id'] = $id;
                    array_push($waitChildData, $child);
                }

                D('wx_menu')->addAll($waitChildData);
            }
        } catch (Exception $e) {
            throw $e;
            return false;
        }

        return true;
    }

    /**
     * 清除旧的数据
     * */
    private function clearOldData($branch_id, $branch_role, $is_reset){
        if (false == $is_reset) {
            return true;
        }

        try {
            $this->execute("delete from wx_menu where branch_id=$branch_id");
            $this->execute("delete from com_store where branch_id=$branch_id");
            $this->execute("delete from com_banner where branch_id=$branch_id");
            $this->execute("delete from com_category where branch_id=$branch_id");
            $this->execute("delete from com_product where branch_id=$branch_id");
            $this->execute("delete from com_product_options where branch_id=$branch_id");
            $this->execute("delete from sys_role where branch_id=$branch_id");
            $this->execute("delete from com_order_attribute where branch_id=$branch_id");
            $sql = sprintf("update sys_branch set branch_role=%d where id=%d", $branch_role, $branch_id);
            $this->execute($sql);

            return true;
        } catch (Exception $e) {
            throw $e;
        }
    }

    public function getMaxAgreementNo(){
        $condition["start_date"] = date("Y-m-d");
        $max_datebill = M("SysBranchAgreement")->where($condition)->max("agreement_no");
        return $this->incBillNo($max_datebill, 4);
    }

    /**同步微信粉丝
     * @param $branch_id
     * @param $wxUsers
     */
    public function addFans($branch_id, $fans_data){
        $user_data = array();
        if ($fans_data) {
            $userModel = M("SysUser");
            $user_data["openid"] = $fans_data["openid"];
            $user_data["branch_id"] = $branch_id;
            if ($userModel->where($user_data)->count() > 0) {
                $userModel->where($user_data)
                    ->data([
                        'is_follow' => 1,
                        'name' => $fans_data["nickname"],
                        'head_pic' => $fans_data["headimgurl"],
                        'subscribe_scene' => $fans_data["subscribe_scene"],
                    ])->save();
                return false;
            }
            $user_data["name"] = removeEmoji($fans_data["nickname"]);
            $user_data["no"] = ""; //0000为管理用户起始编号
            $user_data["password"] = md5_plus("123456");
            $user_data["account"] = mb_substr($user_data["name"], 0, 4);
            $user_data["is_valid"] = 1;
            $user_data["user_type"] = USER_TYPE_CUSTOMER; //默认都是客户
            $regexEmoticons = '/[\x{000}-\x{FFF}]/u';
            $clean_text = preg_replace($regexEmoticons, '', $user_data["name"]);
            $querykey = firstPinyin($clean_text);
            $user_data["querykey"] = firstPinyin($querykey);
            $user_data["followed_at"] = time();
            $user_data["is_follow"] = 1;
            $user_data["role_ids"] = ROLE_ID_CUSTOMER;
            $user_data["head_pic"] = $fans_data["headimgurl"];
            $user_data["reg_time"] = time();
            $user_data["subscribe_scene"] = $fans_data["subscribe_scene"];
            return $userModel->add($user_data);
        }
        return false;
    }

    public function addDefaultCompanyTag($company_id){
        $result = array(
            ["branch_id" => $company_id, "value" => "成交客户", "type" => 0],
            ["branch_id" => $company_id, "value" => "意向客户", "type" => 0],
            ["branch_id" => $company_id, "value" => "商城订单", "type" => 1],
        );
        M("ComCompanyTag")->addAll($result);
    }


    public function changeBranchRole($id, $new_branch_role){
        if ($new_branch_role != 0) {
            $branchData = M("SysBranch")->field("leader_id,branch_role")->where("id=$id")->find();
            if ($new_branch_role != $branchData["branch_role"]) {
                $this->startTrans();
                try {
                    //设置商户设置的新版本
                    $sql = sprintf("update sys_branch set branch_role=%d where id=%d", $new_branch_role, $id);
                    $this->execute($sql);
                    //设置商户管理员
                    $leader_id = $branchData["leader_id"];
                    if ($leader_id) {
                        $sql = sprintf("update sys_user set role_ids='%s' where id=%d", $new_branch_role, $leader_id);
                        $this->execute($sql);
                        //更新管理员权限表
                        $sql = sprintf("delete from sys_user_role where user_id=%d", $leader_id);
                        $this->execute($sql);
                        $sql = sprintf("insert sys_user_role(role_id,user_id)values(%d,%d)", $new_branch_role, $leader_id);
                        $this->execute($sql);
                    }
                    //更新员工权限（如果原来是付费版本，现在变免费，权限变小）
                    $condition["a.id"] = $new_branch_role;
                    $new_permit_menus = M("SysRole a")->join("sys_role_operation b on a.id=b.role_id")->where($condition)->group("menu_id")->getField("menu_id", true);
                    if ($new_permit_menus) {
                        $new_permit_menu_values = implode(",", $new_permit_menus);
                        $sql = sprintf("delete a.* from sys_role_operation a inner join sys_role b on a.role_id=b.id where b.branch_id=%d and a.menu_id not in(%s)", $id, $new_permit_menu_values);
                        $this->execute($sql);
                    }
                    //如果还没初始化，就先初始化
                    if (M("ComStore")->where("branch_id=$id")->count() == 0) {
                        $this->initialData($id, $new_branch_role);
                    }
                    $this->commit();
                } catch (\Exception $exception) {
                    $this->rollback();
                    return false;
                }
            }
            return true;
        } else {
            //意向客户商城版本
            $sql = sprintf("update sys_branch set branch_role=%d where id=%d", 0, $id);
            $this->execute($sql);
            return true;
        }
    }

    /*maifei版本重置*/
    public function resetBranchRole($id){
        $branch_role = M("SysBranch")->where("id=$id")->getField("branch_role");
        if ($branch_role == ROLE_ID_COMPANY_FREE) {
            return $this->initialData($id, $branch_role, true);
        }
    }

}
