<?php

namespace ESAdmin\Controller;

use Common\Lib\Controller\DataController;

class  ComWithdrawalsController extends DataController {

    protected function _before_list(&$list)
    {
        parent::_before_list($list); // TODO: Change the autogenerated stub
        foreach($list as $key => $val){
            $list[$key]['capital_account'] = $val['withdrawal_type'] == FIN_CIZ_WITHDRAW ? $val['company_name'] : $val['user_name'];
            $list[$key]['actual_money'] = $val['status'] == 1 ? sprintf("%.2f", $val['money'] - $val['fee']):'';
            $list[$key]['object_type'] = $val['withdrawal_type'] == FIN_CIZ_WITHDRAW ? 'c':'u';
            $account_type = $val['withdrawal_type'] == FIN_CIZ_WITHDRAW ? 1 : 2;
            $object_id = $val['withdrawal_type'] == FIN_CIZ_WITHDRAW ? $val['company_id'] : $val['user_id'];
            $account_jurisdiction = A('ComCapitalDetails')->getAccountSystemManage($object_id,$account_type,[CAJ_BRANCH_WITHDRAWAL],[CAJ_BRANCH_WITHDRAWAL]);
            $account = A('ComCapitalDetails')->handlerAccountSystem($account_jurisdiction);
            $list[$key]['withdrawal_leader_view'] = $account['withdrawal_leader_view'];
            $list[$key]['attach_group'] = empty($list[$key]['attach_group']) ? '' : $list[$key]['attach_group'];
        }
    }
    protected function _parsefilter(&$filter)
    {
        parent::_parsefilter($filter); // TODO: Change the autogenerated stub
        $filter['a.withdrawal_type'] = array('in',[FIN_CIZ_WITHDRAW,FIN_UIZ_WITHDRAW]);
        if (!is_null($filter['a.capital_account_id'])){
            $capital_account = explode(':',$filter['a.capital_account_id']);
            if ($capital_account[0] == 'c') {
                $filter['a.company_id'] =  $capital_account[1];
                $filter['a.withdrawal_type'] = FIN_CIZ_WITHDRAW;
            } else {
                $filter['a.user_id'] =  $capital_account[1];
                $filter['a.withdrawal_type'] = FIN_UIZ_WITHDRAW;
            }
            unset($filter['a.capital_account_id']);
        }
        $aj = D('ComAccountJurisdiction') ;
        $aj-> setObjectVarious([CAJ_BRANCH_WITHDRAWAL]);
        $aj-> setOptions('jurisdiction','visiblers');
        $aj-> getLoginUserJurisdiction();
        $jurisdiction = $aj->getStore('jurisdiction');
        if ($jurisdiction === false) {
            $filter['a.id'] = 0;
        } elseif(is_array($jurisdiction)) {
            if (!empty($jurisdiction['users'][CAJ_BRANCH_WITHDRAWAL]) && !empty($jurisdiction['companys'][CAJ_BRANCH_WITHDRAWAL])){
                $filter['_string'] = '( a.withdrawal_type='.FIN_CIZ_WITHDRAW.' and a.company_id in ('.implode(',',$jurisdiction['companys'][CAJ_BRANCH_WITHDRAWAL]).') )';
                $filter['_string'] .= ' or (a.withdrawal_type='.FIN_UIZ_WITHDRAW.' and a.user_id in ('.implode(',',$jurisdiction['users'][CAJ_BRANCH_WITHDRAWAL]).') )';

            } else {
                if (empty($jurisdiction['users'][CAJ_BRANCH_WITHDRAWAL])) {
                    $filter['a.withdrawal_type'] = array(array('neq',FIN_UIZ_WITHDRAW),array('in',[FIN_CIZ_WITHDRAW,FIN_UIZ_WITHDRAW]),'and');
                } else {
                    $where['a.withdrawal_type']  = array('eq',FIN_UIZ_WITHDRAW);
                    $where['a.user_id']  = array('in',$jurisdiction['users'][CAJ_BRANCH_WITHDRAWAL]);
                    $where['_logic'] = 'and';
                }
                if (empty($jurisdiction['companys'][CAJ_BRANCH_WITHDRAWAL])) {
                    $filter['a.withdrawal_type'] = array(array('neq',FIN_CIZ_WITHDRAW),array('in',[FIN_CIZ_WITHDRAW,FIN_UIZ_WITHDRAW]),'and');
                } else {
                    $where['a.withdrawal_type']  = array('eq',FIN_CIZ_WITHDRAW);
                    $where['a.company_id']  = array('in',$jurisdiction['companys'][CAJ_BRANCH_WITHDRAWAL]);
                    $where['_logic'] = 'and';
                }
            }
            if ($where) {
                $filter['_complex'] = $where;
            }
        }
    }
    protected function _before_display_dataview(&$data)
    {
        parent::_before_display_dataview($data); // TODO: Change the autogenerated stub
        if (isset($data['id']) && $data['id'] > 0) {
            $data['capital_account'] = $data['withdrawal_type'] == FIN_CIZ_WITHDRAW ? $data['company_name'] : $data['user_name'];
            $this->assign('is_leader',$this->getUserHasAccountLeader($data));
        }
        $data['handle_time'] = time();
        $_filter['status'] = 1;
        $receivables_account = D('WrkReceivablesAccount')->setDacFilter("a")->field("a.id,a.name")->where($_filter)->select();
        $this->assign('receivables_account',$receivables_account);
        $data['attach_group'] = empty($data['attach_group']) ? genUniqidKey() : $data['attach_group'];
    }
    public function withdrawalAdoptAction()
    {
        if (IS_GET) {
            $id = I('get.id');
            $payment = D(CONTROLLER_NAME)->field('company_id,user_id,withdrawal_type,money,handle_time,fee,bank_account')->where('id = '.$id)->find();
            if (!$this->getUserHasAccountLeader($payment)) {
                die("无此功能操作权限");
            }
            $model['id'] = $id;
            $model['actual_money'] = sprintf("%.2f", $payment['money'] - $payment['fee']);
            $model['handle_time'] = date('Y-m-d',$payment['handle_time']);
            $model['account'] = sprintf("%.2f",$payment['money']);
            $model['fee'] = sprintf("%.2f",$payment['fee']);
            $model['bank_account'] = $payment['bank_account'];
            $this->assign('model',$model);
            $this->display();
        } else {
            $id = I('post.id');
            if ($id > 0) {
                $payment = D(CONTROLLER_NAME)->where('id = '.$id)->find();
                if (!$this->getUserHasAccountLeader($payment)) {
                    $this->responseJSON(buildMessage("无此功能操作权限！", 1));
                }
                if ($payment['status'] != 0 && !empty($payment['handle_time'])) {
                    $this->responseJSON(buildMessage( "已经审核过，不能再次审核！",1));
                    die;
                }
                $err_msg = D(CONTROLLER_NAME)->withdrawalAdopt($payment,$this->_user_session->userId);
                $this->ajaxReturn($err_msg);
            } else {
                $this->responseJSON(buildMessage( "参数错误！",1));
            }

        }
    }
    public function withdrawalRefuseAction()
    {
        if (IS_GET) {
            $model['id'] = I('get.id');
            $payment = D(CONTROLLER_NAME)->where('id = '.$model['id'] )->find();
            if (!$this->getUserHasAccountLeader($payment)) {
                die("无此功能操作权限");
            }
            $this->assign('model',$payment);
            $this->display();
        } else {
            $id = I('post.id');
            $payment = D(CONTROLLER_NAME)->where('id = '.$id)->find();
            if (!$this->getUserHasAccountLeader($payment)) {
                $this->responseJSON(buildMessage("无此功能操作权限！", 1));
            }
            if ($payment['status'] != 0 && !empty($payment['handle_time'])) {
                $this->responseJSON(buildMessage( "已经审核过，不能再次审核！",1));
                die;
            }
            if (!$id) {
                $this->responseJSON(buildMessage( "参数错误！",1));
            }
            $withdrawal["status"] = 2;
            $withdrawal["handle_time"] = time();
            $withdrawal["attach_group"] = I('post.attach_group');
            $withdrawal['operate_id'] = $this->_user_session->userId;
            $success = D(CONTROLLER_NAME)->where("id=$id")->save($withdrawal);
            if ($payment['withdrawal_type'] == FIN_CIZ_WITHDRAW){
                $members = M("SysBranch");
                $account = $members->field('money_auditing')->where('id = '.$payment['company_id'])->find();
                $balance_money  = sprintf("%.2f", $account['money_auditing'] - $payment['money']);
                $members->where("id=".$payment['company_id'])->setField("money_auditing", $balance_money);
            }elseif ($payment['withdrawal_type'] == FIN_UIZ_WITHDRAW){
                $members = M("SysUser");
                $account = $members->field('user_money_auditing')->where('id = '.$payment['user_id'])->find();
                $balance_money  = sprintf("%.2f", $account['user_money_auditing'] - $payment['money']);
                $members->where("id=".$payment['user_id'])->setField("user_money_auditing", $balance_money);
            }
            if (true){
                $condition["a.id"] = $id;
                $record = D(CONTROLLER_NAME)->setDacFilter("a")->relation(true)->field("a.*")->where($condition)->find();
                $record['capital_account'] = $record['withdrawal_type'] == FIN_CIZ_WITHDRAW ? $record['company_name'] : $record['user_name'];
                $record['actual_money'] = $record['status'] == 1 ? sprintf("%.2f", $record['money'] - $record['fee']):'';
                $record['object_type'] = $record['withdrawal_type'] == FIN_CIZ_WITHDRAW ? 'c':'u';
                $this->responseJSON(array("code"=>0, "message"=>"审核成功！","row"=>$record));
            }else{
                $this->responseJSON(array("code"=>1, "message"=>"审核失败"));
            }
        }
    }
    protected function getUserHasAccountLeader($data)
    {
        $object_id = $data['withdrawal_type'] == FIN_CIZ_WITHDRAW ? $data['company_id'] : $data['user_id'];
        $object_type = $data['withdrawal_type'] == FIN_CIZ_WITHDRAW ? 1 : 2;
        $jurisdiction =  D('ComAccountJurisdiction');
        $jurisdiction->setObjectType($object_type);
        $jurisdiction->setObjectId($object_id);
        $jurisdiction->setObjectVarious([CAJ_BRANCH_WITHDRAWAL]);
        $jurisdiction->handlerHasAccountLeader();
        return $jurisdiction->getStore('has_leader');
    }
    public function setAttachGroupAction()
    {
        if (IS_POST) {
            $condition['id'] = I('post.id');
            $save['attach_group'] = I('post.attach_group');
            D(CONTROLLER_NAME)->where($condition)->data($save)->save();
        }
    }
    public function withdrawalNoticeAction()
    {
        if (IS_POST) {
            $notice = I('post.notice');
            $id = I('post.id');
            $currency_tip = '';
            $withdrawal = D(CONTROLLER_NAME) ->where('id = '.$id)->find();
            $withdrawal['account'] = sprintf('%.2f',$withdrawal['money']);
            $withdrawal['pay_time_view'] = date('Y-m-d H:i:s',$withdrawal['handle_time']);
            //获取可见人
            if ($withdrawal['withdrawal_type'] == FIN_CIZ_WITHDRAW) {
                $account = M('SysBranch') ->field('money,money_auditing')-> where(['id' => $withdrawal['company_id']]) ->find();
                $withdrawal['account_balance'] = sprintf('%.2f',$account['money'] - $account['money_auditing']);
                $jurisdiction =  D('ComAccountJurisdiction');
                $jurisdiction->setObjectId($withdrawal['company_id']);
                $jurisdiction->setObjectType(1);
                $jurisdiction->setObjectVarious([CAJ_BRANCH_CUSTOMER_CAPITAL]);
                $jurisdiction->getAccountNoticeSendUsers('user');
                $branch_visiblers = $withdrawal;
                $jurisdiction->setObjectVarious([CAJ_BRANCH_WITHDRAWAL]);
                $jurisdiction->getAccountNoticeSendUsers('branch',false);
                $branch_visiblers['openid'] = $jurisdiction->getStore('branch_visiblers');
                $branch_visiblers['url'] = str_replace('shop','shop'.$this->_user_session->currBranchId,SHOP_ROOT).'/ComBranchCapital/capitalDetails/id/c:'.$withdrawal['company_id'].'.html';
                if(!$branch_visiblers['openid']){
                    $branch_visiblers['openid'] = D("ComRecharge")->getCapitalLeaderOpenid("ComWithdrawal");
                }
                //$branch_visiblers['account_balance'] = D("EShop/ComFinance")->getWxAccountMoney($withdrawal['receivable_id']);//获取收款账户的余额
                $withdrawal['openid'] = $jurisdiction->getStore('user_visiblers');
                $withdrawal['url'] = str_replace('shop','shop'.$this->_user_session->currBranchId,SHOP_ROOT).'/money/company/id/'.$withdrawal['company_id'].'.html';
            } else {
                $account = M('SysUser') ->field('user_money_auditing,user_money,openid')-> where(['id' => $withdrawal['user_id']]) ->find();
                $withdrawal['account_balance'] = sprintf('%.2f',$account['user_money'] - $account['user_money_auditing']);
                $branch_visiblers = $withdrawal;
                $branch_visiblers['url'] = str_replace('shop','shop'.$this->_user_session->currBranchId,SHOP_ROOT).'/ComBranchCapital/capitalDetails/id/u:'.$withdrawal['user_id'].'.html';;
                $jurisdiction =  D('ComAccountJurisdiction');
                $jurisdiction->setObjectId($withdrawal['user_id']);
                $jurisdiction->setObjectType(2);
                $jurisdiction->setObjectVarious([CAJ_BRANCH_WITHDRAWAL]);
                $jurisdiction->getAccountNoticeSendUsers('branch',false);
                $branch_visiblers['openid'] = $jurisdiction->getStore('branch_visiblers');
                if(!$branch_visiblers['openid']){
                    $branch_visiblers['openid'] = D("ComRecharge")->getCapitalLeaderOpenid("ComWithdrawal");
                }
                //$branch_visiblers['account_balance'] = D("EShop/ComFinance")->getWxAccountMoney($withdrawal['receivable_id']);//获取收款账户的余额
                $withdrawal['openid'] = $account['openid'];
                $withdrawal['url'] = str_replace('shop','shop'.$this->_user_session->currBranchId,SHOP_ROOT).'/money';
            }
            switch ($notice) {
                case 'adopt':
                    $withdrawal['transaction_type'] = '账户提现(成功)';
                    $currency_tip = TCT_WITHDRAWAL_COMPLETE_NOTICE;
                    $branch_currency_tip = TCT_WITHDRAWAL_COMPLETE_NOTICE;
                    $branch_visiblers['transaction_type'] = $withdrawal['transaction_type'];
                    break;
                case 'refuse':
                    $withdrawal['transaction_type'] = '账户提现(失败)';
                    $currency_tip = TCT_WITHDRAWAL_REFUSE_NOTICE;
                    $branch_currency_tip = TCT_BRANCH_WITHDRAWAL_REFUSE_NOTICE;
                    $branch_visiblers['transaction_type'] = $withdrawal['transaction_type'];
                    $branch_visiblers['account_balance'] = '';
                    break;
                default:
                    break;
            }
            $this->sendWxTemplate($branch_currency_tip,$branch_visiblers);
            $this->sendWxTemplate($currency_tip,$withdrawal);
        }
        //通知信息 id:id,notice:'refuse'
    }
    protected function sendWxTemplate($currency_tip,$data)
    {
        $template_id = getWxTemplateIdByStandardId('OPENTM415437052');
        $message = array();
        $body = array();
        $message["template_id"] = $template_id;
        $message["url"] = $data['url'];
        $remark = '感谢使用, 如有问题请及时联系我们!';
        if(strstr($currency_tip,'branch')){
            $remark = '';
            //$message["url"] = '';
        }
        $body["first"]["value"]    = getWxTemplateCurrencyTip($currency_tip);
        $body["keyword1"]["value"] = $data["transaction_type"];
        $body["keyword2"]["value"] = $data["account"];
        $body["keyword3"]["value"] = $data["pay_time_view"];
        $body["keyword4"]["value"] = $data["account_balance"];
        $body["remark"]["value"] = $remark;
        $message["body"] = $body;
        if ($data['openid']) {
            if (is_array($data['openid'])) {
                foreach ($data['openid'] as $val){
                    $message["openid"] = $val;
                    send_wx_message($message);
                }
            } else {
                $message["openid"] = $data['openid'];
                send_wx_message($message);
            }
        }
    }
}