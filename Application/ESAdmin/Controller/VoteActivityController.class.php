<?php
/**
 * @auhor kcg
 * */
namespace ESAdmin\Controller;

use Common\Lib\Controller\DataController;
use ESAdmin\Model\MiniConfigModel;
use ESAdmin\Model\VoteActivityModel;


/**
 *投票管理
 * */
class VoteActivityController extends DataController
{
    public function rosterAction($id){
        $this->assign('id', $id);
        $this->display('');
    }

    /**
     * 活动变更
     * @param $id
     */
    public function changeStatusAction($id){
        $model = D(CONTROLLER_NAME);
        $condition["id"] = array("in", $id);
        if (!$model->checkDataPermission($id)) {
            return $this->ajaxError('您没有权限!');
        }

        $vote = $model->where(['id' => $id])->find();
        if(empty($vote)){
            return $this->ajaxError('活动不存在!');
        }

        $status = $vote['status'] == 20 ? 10 : 20;
        if(!$model->where(['id' => $id])->save([
            'status' => $status,
            'update_time' => time()
        ])){
            return $this->ajaxError('操作失败!');
        }

        return $this->ajaxReturn(['code' => 0, 'message' => '操作成功!']);
    }

    public function qrcodeAction($id){
        $model = D(CONTROLLER_NAME);
        $condition["id"] = array("in", $id);
        if (!$model->checkDataPermission($id)) {
            exit('您没有权限');
        }

        $data = $model->where($condition)->find();
        $qrcode = $data['qrcode'];
        if(!$qrcode){
            $qrcode = $this->getQrcode($data['id']);
            if($qrcode){
                $model->where($condition)->save(['qrcode' => $qrcode]);
            }
        }
        if($qrcode){
            $data['qrcode'] = 'http://' . $_SERVER['SERVER_NAME'] . $qrcode;
        }

        $this->assign('model', $data);
        $this->display('QRcode');
    }

    private function getQrcode($scene){
        $wcaht = $this->getWeChat();
        $url = 'https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=' . $wcaht->checkAuth();
        $data['scene'] = $scene;
//        $data['page'] = 'pages/home/home';
        $res =  $this->post($url, $data);
        if(isset($res['errors'])){
            return false;
        }
        if(! $res){
            return false;
        }


        $path = './uploads/qrcode/qrcode_' . $scene . '.' . $res[0];
        file_put_contents($path, $res[1]);

        return $path;
    }

    private function post($url, $data = null){
        $ch = curl_init($url);
        if (stripos($url, "https://") !== FALSE) {
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // 对认证证书来源的检查
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); // 从证书中检查SSL加密算法是否存在
            //curl_setopt($ch, CURLOPT_SSLVERSION, 1); //CURL_SSLVERSION_TLSv1
        }
        if(is_array($data)){
            $data = json_encode($data, true);
        }

        curl_setopt($ch, CURLOPT_POST, true); // 发送一个常规的Post请求
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data); // Post提交的数据包
        curl_setopt($ch, CURLOPT_TIMEOUT, 5); // 设置超时限制防止死循环
        curl_setopt($ch, CURLOPT_HEADER, 0); // 显示返回的Header区域内容
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // 获取的信息以文件流的形式返回
        $result = curl_exec($ch); // 执行操作
        $info = curl_getinfo($ch);
        curl_close($ch); // 关闭CURL会话
        if($result === false){
            return false;
        }

        $type = str_replace('/', '', strchr($info['content_type'], '/'));


        return [$type, $result];
    }
    private function getWeChat(){
        Vendor('Wechat.TPWechat', '', '.class.php');
        $config =  (new MiniConfigModel)->getConfig();
        $options = array(
            'appid' => $config['appid'],
            'appsecret' => $config['secret'],
        );

        $_tpWeChat = new \TpWechat($options);

        return $_tpWeChat;
    }
    protected function _before_detail(&$data){
        if ($data['end_time'] <= time()) {
            exit('活动已结束禁止修改');
        }

        parent::_before_detail($data); // TODO: Change the autogenerated stub
    }

    protected function _before_write($type, &$data){
        $data['name'] OR $this->ajaxError('请输入活动名称!');
        $data['cover_pic'] OR $this->ajaxError('请上传活动封面图片!');
        $data['start_time'] OR $this->ajaxError('请选择活动开始时间!');
        $data['vote_cycle'] = intval($data['vote_cycle']);
        $data['vote_cycle'] > 0 OR $this->ajaxError('投票周期必须大于0天!');
        $data['vote_num'] = intval($data['vote_num']);
        $data['vote_num'] > 0 OR $this->ajaxError('可投票数量必须大于0票!');
        $data['start_time'] OR $this->ajaxError('请选择活动结束时间!');
        $data['end_time'] OR $this->ajaxError('请选择活动结束时间!');
        $data['start_time'] = strtotime($data['start_time']);
        $data['end_time'] = strtotime($data['end_time'] . ' 23:59:59');

        $nowTime = strtotime(date('Y-m-d 00:00:00'));
        if (self::ACTION_ADD === $type) {
            $data['start_time'] >= $nowTime OR $this->ajaxError('活动开始时间必须大于当前北京时间!');
            $data['end_time'] >= $data['start_time'] OR $this->ajaxError('活动结束时间必须大于活动开始时间!');
        } else if (self::ACTION_DETAIL === $type) {
            $vote = VoteActivityModel::findById($data['id']);
            //已开始
            if($vote['start_time'] > $nowTime){
                $data['start_time'] >= $nowTime OR $this->ajaxError('活动开始时间必须大于当前北京时间!');
            }

            $data['end_time'] >= $nowTime OR $this->ajaxError('活动结束时间必须大于当前时间!');
        }

        $data['details_pic'] = implode(',', empty($data['details_pic']) ? [] : $data['details_pic']);
        $data['cover_pic'] =  str_replace('\\', '/',  $data['cover_pic']);
        $data['details_pic'] =  str_replace('\\', '/',  $data['details_pic']);

        parent::_before_write($type, $data);
    }

    protected function ajaxError($msg){
        return $this->ajaxReturn(['code' => 1, 'message' => $msg]);
    }

    protected function _before_list(&$list){
        foreach ($list as $key => &$val) {
            $val['start_time'] = date('Y-m-d', $val['start_time']);
            $val['end_time'] = date('Y-m-d', $val['end_time']);
            $val['details_pic'] = explode(',', $val['details_pic']);
        }
    }

    public function _before_delete($id){
        $data = VoteActivityModel::findById($id);
        $msg = VoteActivityModel::isDelete($data);
        if($msg !== true){
            return $this->ajaxError($msg);
        }
    }

    public function _parsefilter(&$filter){
        $status = intval(I('status', 0));
        switch($status){
            case 1:
                $filter['a.start_time'] = ['gt', time()];
                break;
            case 2:
                $filter['a.end_time'] = ['gt', time()];
                $filter['a.start_time'] = ['lt', time()];
                break;
            case 3:
                $filter['a.end_time'] = ['lt', time()];
                break;
        }

        parent::_parsefilter($filter); // TODO: Change the autogenerated stub
    }
}