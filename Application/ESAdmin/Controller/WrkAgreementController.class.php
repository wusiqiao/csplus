<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/11/26
 * Time: 9:50
 */

namespace ESAdmin\Controller;
use Common\Lib\Controller\ComplexDataController;
use Org\Util\Strings;
use Think\Exception;

class WrkAgreementController extends ComplexDataController {
    public function indexAction()
    {
        $menuList = $this->_user_session->permissionList[ACCESS_MENUS_KEY];

        $permissions = [];
        if ($menuList[$this->_permission_name] && ($this->_user_session->isAdmin || $menuList[$this->_permission_name]["allow"])) {
            $permissions['WrkInvoicePlanDetail'] = $menuList["WrkInvoicePlanDetail"]['allow'];
            $permissions['WrkReceivables'] = $menuList["WrkReceivables"]['allow'];
            $permissions['WrkPrompt'] = $menuList["WrkPrompt"]['allow'];
			$permissions['WrkTaskPlan'] = $menuList["WrkTaskPlan"]['allow'];
        }
        $this->assign("menu_permissions",$permissions);
        if(I("get.company_id")){
            $this->assign("company_id",I("get.company_id"));
            $this->assign("company_name",I("get.name"));
        }
        parent::indexAction(); // TODO: Change the autogenerated stub
    }

    public function _parsefilter(&$filter)
    {
        parent::_parsefilter($filter); // TODO: Change the autogenerated stub
        $state = I("post.wip*state");
        if($state == 1){
            $filter['wip.state'] = array("in","1,2");
            $filter['a.invoice_type'] = 1;
        }elseif($state == 2){
            $filter['a.invoice_type'] = 0;
        }elseif($state != ""){
            //未结束
            $filter['wip.state'] = $state;
            $filter['wip.creater_id'] = array("exp" ,"is not null");
            $filter['a.invoice_type'] = 1;
        }
        $wr_state = I("post.wr_status");
        if($wr_state == 1){
            //收款状态已结束
            $filter['wr.status'] = array("in","1,2");
        }elseif($wr_state == 2){
            //无收款计划
            $filter['wip.id'] = array("neq","");
            $filter['_string'] = "wr.id is null";
        } elseif($wr_state !=""){
            $filter['wr.status'] = $wr_state;
        }
        $start_time = I("post.qdr-start_time");
        $time = I("post.time");
        if($start_time == ""){
            if($time == ""){
                $time = 4;//本年
            }
            if($time != "all"){
                $date = D("WrkInvoicePlan")->getQdrDate($time);
                $filter['a.start_time'] = array(array("egt",$date['begin']),array("elt",$date['end']));
            }
        }
        if(I("get.company_id")){
            $filter['a.company_id'] = I("get.company_id");
            if(!$start_time && !I("post.time")){
                unset($filter['a.start_time']);
            }
        }
        if(I("post.q-is_valid") == ""){
            $filter['a.is_valid'] = 1;
        }
        if ($filter['a.is_task_plan'] == 0 && $filter['a.is_task_plan'] != null){
			$filter['a.is_task_plan'] = 1;
			$filter['a.state'] = 1;
		} elseif ($filter['a.is_task_plan'] == 1){
			unset($filter['a.is_task_plan']);
			$filter['a.state'] = 3;
		} elseif ($filter['a.is_task_plan'] == 2){
			$filter['a.is_task_plan'] = 0;
		}

    }

    public function _before_list(&$list)
    {
        $user_id = $this->_user_session->userId;
        for ($i=0; $i<count($list);$i++) {
            //判断当前用户是否是开票负责人可见人
            if($list[$i]['wip_leader_id'] == $user_id){
                $list[$i]['is_invoice_leader'] = 1;
            }
            if($list[$i]['wip_visiblers']){
                $visiblers = explode(",",$list[$i]['wip_visiblers']);
                $list[$i]['is_invoice_visibler'] = in_array($user_id,$visiblers);
            }
	        if($list[$i]['customer_leader_id'] != ""){
                $list[$i]['customer_leader'] = M("SysUser")->where("id = " .$list[$i]['customer_leader_id'])->getField("name");
            }
            if($list[$i]['company_id'] != "") {
                $list[$i]['customer_branch_name'] = M("SysBranch")->where("id = " . $list[$i]['company_id'])->getField("name");
                $com = D("WrkInvoicePlan")->getCompanyLeader($list[$i]['company_id'],CAJ_BRANCH_AGREEMENT);
		    if($list[$i]['customer_leader'] == ""){
                    $list[$i]['customer_leader'] = $com['customer_leader'];
                }
            }
            if($list[$i]['leader_id'] != "") {
                $leader = M("SysUser")->where("id = " . $list[$i]['leader_id'])->field("name,staff_name")->find();
                $list[$i]['service_man_name'] = $leader['staff_name']??$leader['name'];
            }
            if($list[$i]['wip_state'] == 1 or $list[$i]['wip_state'] == 2){
                $list[$i]['wip_balance'] = $list[$i]['wip_amount_paid'] - $list[$i]['agreement_money'];
                $list[$i]['wip_unpaid'] = 0;
            }else{
                $list[$i]['wip_balance'] = "";
                $list[$i]['wip_unpaid'] = $list[$i]['agreement_money'] - $list[$i]['wip_amount_paid'];
                if($list[$i]['wip_unpaid'] < 0){
                    $list[$i]['wip_unpaid'] = 0;
                }
            }
			$list[$i]['is_task_plan_state'] = $list[$i]['is_task_plan'];
            $list[$i]['start_time'] = date("Y/m/d",$list[$i]['start_time']);
            $list[$i]['finish_time'] = $list[$i]['finish_time'] == "" ? "-" : date("Y/m/d",$list[$i]['finish_time']);
            //已结束合同获取实际结束日期
            $list[$i]['end_time'] = D(CONTROLLER_NAME)->getActualFinishTime($list[$i]);
        }
        parent::_before_list($list); // TODO: Change the autogenerated stub
    }

    protected function _before_detail(&$data)
    {
        if($data['company_id'] != "") {
            $data['customer_branch_name'] = M("SysBranch")->where("id = " . $data['company_id'])->getField("name");
            $com = D("WrkInvoicePlan")->getCompanyLeader($data['company_id'],CAJ_BRANCH_AGREEMENT);
            $data['customer_leader'] = $com['customer_leader'];
            $data['customer_visiblers'] = $com['customer_visiblers'];
        }
        if($data['customer_leader_id']){
            $data['customer_name'] = M("SysUser")->where("id = " . $data['customer_leader_id'])->getField("name");
        }
        if($data['leader_id'] != "") {
            $leader = M("SysUser")->where("id = " . $data['leader_id'])->field("staff_name,name")->find();
            $data['service_man_name'] = $leader['staff_name'] == "" ? $leader['name']:$leader['staff_name'];
        }
        $data['start_time'] = date("Y/m/d",$data['start_time']);
        if($data['finish_time'] != ""){
            $data['finish_time'] = date('Y/m/d H:i:s',strtotime(date("Y/m/d",$data['finish_time']).' +1 day -1 second'));
        }
        parent::_before_detail($data); // TODO: Change the autogenerated stub
    }

    //获取plan_id 合同页面跳转新增/编辑开票页面
    public function getPlanDetailIdAction(){
        $id = I("post.id");
        if($id){
            $tmp = M("WrkInvoicePlan")
                ->alias("a")
                ->join("wrk_invoice_plan_detail as b on a.id = b.plan_id")
                ->where("a.agreement_id = $id and a.type = 1")
                ->getField("a.id");
            if($tmp){
                $visible = D("WrkInvoicePlanDetail")
                    ->setDacFilter("a")
                    //->join("wrk_invoice_plan as b on b.id = a.plan_id")
                    ->where("a.agreement_id = $id and a.type = 1")
                    ->getField("a.id");
                if($visible){
                    $this->ajaxReturn(array("code"=>1,"id"=>$tmp));
                }else{
                    $this->ajaxReturn(array("code"=>2,"id"=>$tmp));
                }
            }else{
                $this->ajaxReturn(array("code"=>0));
            }
        }else{
            $this->ajaxReturn(array("code"=>0));
        }
    }

    public function nameListAction(){
        $name = I("q");
        $condition['name'] = array("like","%".$name."%");
        $condition['branch_id'] = $this->_user_session->currBranchId;
        $result = M("WrkAgreement")->where($condition)->field("name as id, name")->select();
        $this->ajaxReturn($result);
    }

    public function customerListAction(){
        $str = I('q');
        $condition = [];
        if (!empty($str)) {
            $where['name']  = array('like', '%'.$str.'%');
            $where['querykey']  = array('like', '%'.$str.'%');
            $where['_logic'] = 'or';
            $condition['_complex'] = $where;
        }
        $condition['branch_id'] = $this->_user_session->currBranchId;
        $customer_data = M('SysUser')
            ->where($condition)
            ->field("id,name,querykey")->select();
        $this->ajaxReturn($customer_data);
    }

    public function service_manListAction(){
        $str = I('q');
        $condition = [];
        if (!empty($str)) {
            $where['name']  = array('like', '%'.$str.'%');
            $where['staff_name']  = array('like', '%'.$str.'%');
            $where['querykey']  = array('like', '%'.$str.'%');
            $where['mobile'] = array('like', $str . '%');
            $where['_logic'] = 'or';
            $condition['_complex'] = $where;
            /*$where['a.mobile']  = [['exp','is not null'],['exp','<> ""']];
            $where['a.is_follow']  = 1;
            $where['_logic'] = 'or';
            $condition['_complex'] = $where;*/
        }
        $condition['branch_id'] = $this->_user_session->currBranchId;
        $condition['user_type'] = USER_TYPE_COMPANY_MANAGER;//商户员工
        $condition['_string'] = " mobile <> '' or is_follow = 1";//商户员工
        $customer_data = M('SysUser')
            ->where($condition)
            ->field("id,name,querykey,mobile,staff_name")->select();
        foreach($customer_data as $k=>$v){
            $branch_name = M("SysUser a")
                ->join("sys_user_branch b on a.id = b.user_id")
                ->join("sys_branch as c on b.branch_id = c.id")
                ->where("a.id = ".$v['id']." and b.type = 2")->getField("c.name");
            $customer_data[$k]['branch_name'] = $branch_name == "" ? "无部门" : $branch_name;
            if($v['staff_name'] != ""){
                $customer_data[$k]['name'] = $v['staff_name'];
            }
        }
        $this->ajaxReturn($customer_data);
    }
    
    public function leaderListAction(){
        $str = I('q');
        $branch_id = I("branch_id");
        //if ($this->isAdmin || $branch_id == $this->companyId) {
            $condition = [];
            if (!empty($str)) {
                $where['a.name'] = array('like', '%' . $str . '%');
                $where['a.querykey'] = array('like', '%' . $str . '%');
                $where['a.mobile'] = array('like', $str . '%');
                $where['_logic'] = 'or';
                $condition['_complex'] = $where;
            }
            if ($branch_id){
                $condition["b.branch_id"] = $branch_id;
            }
            //$condition["b.type"] = 1;
            $customer_data = M('SysUser a')
                ->join("sys_user_branch b on a.id=b.user_id")
                ->where($condition)
                ->field("a.id,a.name,a.querykey,a.mobile,b.branch_id")->limit(20)->select();//
            $this->responseJSON($customer_data);
        //}
    }


    function order_snListAction(){
        $str = I('q');
        $condition = [];
        $condition['a.branch_id'] = $this->_user_session->currBranchId;
        $agreement = M("WrkAgreement a")->where($condition)->field('order_sn')->select();
        $order_sn = [];
        foreach ($agreement as $k=>$v){
            if($v['order_sn'] != ""){
                array_push($order_sn,$v['order_sn']);
            }
        }
        $order_sn = array_unique($order_sn);
        if($order_sn){
            $condition['a.order_sn']  = array(array('like', '%'.$str.'%'),array("not in",$order_sn));
        }else{
            $condition['a.order_sn']  = array('like', '%'.$str.'%');
        }
        $order_data = M('ComOrder')
            ->alias("a")
            ->where($condition)
            ->join("sys_user b on a.user_id = b.id")
            ->limit(20)
            ->field("a.id,a.order_sn as name,a.user_id,b.name as user_name,a.product_category,a.product_attribute,a.order_desc,a.branch_id,a.real_cash")->select();
        foreach($order_data as $k=>$v){
            $order_data[$k]['product_category'] = explode("-",$v['product_category']);
            $product_attributes = json_decode($order_data[$k]['product_attribute'],true);
            for($i =0;$i<3;$i++){
                if($product_attributes[$i]['parent_name']){
                    $order_data[$k]['product_attributes'][$i] = $product_attributes[$i]['parent_name']."：".$product_attributes[$i]['name'];
                }else{
                    $order_data[$k]['product_attributes'][$i] = "";
                }
                $con['a.type'] = 1;
                $con['a.user_id'] = $v['user_id'];
                $con['b.type'] = ORG_COMPANY;
                $order_data[$k]['branch_info'] = M("SysUserBranch")
                    ->alias("a")
                    ->join("sys_branch b on a.branch_id = b.id")
                    ->where($con)->field("a.branch_id,b.name")->select();
                /*foreach($order_data[$k]['branch_info'] as $key=>$val){
                    $order_data[$k]['branch_info'][$key]['customer_user'] = D(CONTROLLER_NAME)->getCustomerUserData(CONTROLLER_NAME,$val['branch_id']);
                }*/
                //$order_data[$k]['branch_info'] = M("SysBranch")->where("id =".$v['branch_id'])->field("id,name")->find();
            }
            $order_data[$k]['deleteAble'] = 0;
        }
        $this->ajaxReturn($order_data);
    }

    //合同编辑页面选择客户公司
    public function companyListAction()
    {
        $str = I('q');
        $condition = [];
        if (!empty($str)) {
            $where['a.name']  = array('like', '%'.$str.'%');
            $where['a.querykey']  = array('like', '%'.$str.'%');
            $where['_logic'] = 'or';
            $condition['_complex'] = $where;
        }
        $condition['a.parent_id'] = $this->_user_session->currBranchId;
        $condition['a.type']=1;
        $condition['a.is_valid']=1;
        $company_data = M("SysBranch a")
            ->join("left join sys_user b on a.customer_leader_id = b.id")
            ->where($condition)
            ->field("a.id,a.name,a.querykey,a.customer_leader_id,b.staff_name,b.name as customer_leader_name")
            ->select();
        foreach ($company_data as $k=>$v){
            /*$tmp = D("WrkInvoicePlan")->getCompanyLeader($v['id'],CAJ_BRANCH_AGREEMENT);
            $company_data[$k]['customer_leader'] = $tmp['customer_leader'];
            $company_data[$k]['customer_visiblers'] = $tmp['customer_visiblers'];*/
            $company_data[$k]['customer_user'] = D(CONTROLLER_NAME)->getCustomerUserData(CONTROLLER_NAME,$v['id']);
        }
        $this->ajaxReturn($company_data);
    }

    public function service_leaderListAction(){
        $condition['u.user_type'] = USER_TYPE_COMPANY_MANAGER;
        $condition['u.branch_id'] = $this->_user_session->currBranchId;
        $id = I('get.id');
        if (strpos($id,'c') !== false) {
            $id = str_replace("c","",$id);
            $condition['uda.target_id'] = $id;
            $condition['uda.type'] = 0;
        } else {
            $id = str_replace("u","",$id);
            $condition['uda.target_id'] = $id;
            $condition['uda.type'] = 1;
        }
        if(I("get.leader_id")){
            $condition['u.id'] = array("neq",I("get.leader_id"));
        }
        $result = M("SysUser")
                    ->alias('u')
                    ->where($condition)
                    ->join("inner join sys_user_data_access as uda on uda.user_id = u.id")
                    ->field("u.id as value,u.name,u.mobile,u.is_follow,u.role_ids,u.staff_name")
                    ->select();
        foreach ($result as $k=>$v){
            $branch_name = M("SysUserBranch a")->join("sys_branch b on a.branch_id = b.id")->where("a.user_id = ".$v['value']." and a.type = 2")->getField("b.name");
            $result[$k]['text'] = ($v['staff_name']==""?$v['name']:$v['staff_name'])." - ". ($branch_name == ""? "无部门":$branch_name);
        }
        $this->ajaxReturn(build_tree_list($result));
    }

    //激活合同
    public function activeAgreementAction(){
        $id = I("post.id");
        $agreement = M("WrkAgreement a")
            ->join("left join sys_branch b on a.company_id = b.id")
            ->where("a.id = $id")->field("a.state,a.company_id,b.tag_type,a.invoice_type")->find();
        if($agreement['state'] != 0 && $agreement['state'] != 2){
            $this->ajaxReturn(buildMessage("已激活合同无法激活！",0));
        }
        $result = M("WrkAgreement")->where("id = $id")->setField("state",1);
        if($result){
            $this->addLog($id);
            $invoice_creater = M("WrkInvoicePlan")->where("agreement_id = $id")->getField("creater_id");
            if(!$invoice_creater && $agreement['invoice_type'] && $agreement['state'] != 2){
                M("WrkInvoicePlan")->where("agreement_id = $id")->setField("creater_id",$this->_user_session->userId);
            }
            D("ComCompany")->setCompanyTagType($agreement['company_id']);
            $this->ajaxReturn(array('message'=>"激活成功","code"=>1));
        }else{
            $this->ajaxReturn(array('message'=>"激活失败","code"=>0));
        }
    }

    public function unfreezeAgreementAction(){
        $id = I("post.id");
        $result = M("WrkAgreement")->where("id = $id")->getField("state");
        if($result != 2){
            $this->ajaxReturn(array('message'=>"操作失败","code"=>0));
        }
        $result = M("WrkAgreement")->where("id = $id")->setField("state",1);
        if($result){
            $this->addLog($id);
            //判断是否有暂停任务 有则激活
			$taskPlans = D('WrkTaskPlan')->field('id,status,o_status')->where(array('contract_id'=>array('eq',$id)))->select();
			foreach ($taskPlans as $taskPlan){
				if ($taskPlan['o_status'] == 1){
					$taskPlan['status'] = 1;
					D('WrkTaskPlan')->save($taskPlan);
				}
			}

            $this->ajaxReturn(array('message'=>"操作成功","code"=>1));
        }else{
            $this->ajaxReturn(array('message'=>"操作失败","code"=>0));
        }
    }


    //冻结合同
    public function freezeAgreementAction(){
        $id = I("post.id");
        $result = M("WrkAgreement")->where("id = $id")->getField("state");
        if($result == 3){
            $this->ajaxReturn(buildMessage("已结束合同无法冻结！",0));
        }
        $result = M("WrkAgreement")->where("id = $id")->setField("state",2);
        if($result){
            $this->addLog($id);
            //停止任务
			D('WrkTaskPlan')->where(array('contract_id'=>array('eq',$id),'status'=>array('eq',1)))->setField('status',2);

            $this->ajaxReturn(array('message'=>"冻结成功","code"=>1));
        }else{
            $this->ajaxReturn(array('message'=>"冻结失败","code"=>0));
        }
    }

    //结束合同判断是否有未结束工作
    public function isHasWorkPlan(){
        $agreement_id = I("post.id");
        $invoice_type = I("post.invoice_type");
        $result = [];
        if($invoice_type){
            $invoice = M("WrkInvoicePlan")->where("agreement_id = $agreement_id")->field("id,state,type")->find();
            //如果未结束且是有计划开票
            if($invoice['state'] == 0 && $invoice['type'] == 1){
                $condition['plan_id'] = $invoice['id'];
                $condition['state'] = array("neq",1);//不等于全部已开
                $condition['type'] = 0;//开票计划
                $invoice['count'] = M("WrkInvoicePlanDetail")->where($condition)->count();
                $result['code'] = 2;
                $result['invoice'] = int_trans_ch($invoice['count'])."期票据未开。";
            }elseif($invoice['state'] == 0){
                $result['code'] = 2;
                $result['invoice'] = "一项无计划票据未开。";
            }
        }
        $receivables = M("WrkReceivables")->where("contract_id = $agreement_id")->field("id,status")->find();
        if(isset($receivables) && $receivables['status'] == 0){
            $condition = [];
            $condition['receivables_id'] = $receivables['id'];
            $condition['status'] = array("neq",2);//不等于已收
            $receivables['count'] = M("WrkReceivablesItem")->where($condition)->count();
            $result['code'] = 2;
            $result['receivables'] = int_trans_ch($receivables['count'])."期收款未完成。";
        }
        if($result){
            $this->ajaxReturn($result);
        }
    }

    //结束合同
    public function finishAgreementAction(){
        $id = I("post.id");
        if(!I("post.confirm")){
            $this->isHasWorkPlan();
        }
        $result = M("WrkAgreement")->where("id = $id")->setField("state",3);
        if($result){
            $this->addLog($id);
            //结束开票工作
            $plan = M("WrkInvoicePlan")->where("agreement_id = $id")->field("id,type")->find();
            M("WrkInvoicePlan")->where("id = ".$plan['id'])->setField("state",2);//手动结束
            M("WrkInvoicePlan")->where("id = ".$plan['id'])->setField("update_time",time());//手动结束
            if($plan['type'] == 1){
                //有计划的取消未开的
                $condition['branch_id'] = $this->_user_session->currBranchId;
                $condition['plan_id'] = $plan['id'];
                $condition['state'] = array(array("neq",1),array("neq",2));
                $condition['type'] = 0;
                M("WrkInvoicePlanDetail")->where($condition)->setField("state",100);
            }
            //结束收款
            $receivables_id = M("WrkReceivables")->where("contract_id = $id")->getField("id");
            D("WrkReceivables")->badDept($receivables_id);
            $this->ajaxReturn(array('message'=>"结束成功","code"=>1));
        }else{
            $this->ajaxReturn(array('message'=>"结束失败","code"=>0));
        }
    }



    public function deleteAgreementAction(){
        $id = I("post.id");
        $state = M("WrkAgreement")->where("id = $id")->getField("state");
        if($state != 0){
            $this->ajaxReturn(array("code"=>1,"message"=>"已激活合同不能删除！"));
        }else{
            $model = M("WrkAgreement");
            try{
                $model->startTrans();
                if(!I("post.confirm")){
                    $this->isHasWorkPlan();
                }
                $result = M("WrkAgreement")->where("id = $id")->delete();
                if($result){
                    //删除合同对应开票计划
                    $plan_id = M("WrkInvoicePlan")->where("agreement_id = $id")->getField("id");
                    M("WrkInvoicePlan")->where("id = $plan_id")->delete();
                    M("WrkInvoicePlanDetail")->where("plan_id = $plan_id")->delete();
                    $model->commit();
                    $this->ajaxReturn(array("code"=>0,"message"=>"删除成功！"));
                }else{
                    $this->ajaxReturn(array("code"=>1,"message"=>"删除失败！"));
                }
            }catch(\Think\Exception $ex){
                $model->rollback();
            }
        }
    }

    public function updateMoneyAction(){
        if(IS_POST){
            $money = I("post.money");
            if($money <= 0){
                $this->ajaxReturn(array("code"=>0,"message"=>"请输入正确的金额！"));
            }
            $id = I("post.id");
            $state = M("WrkAgreement")->where("id = $id")->getField("state");
            if($state != 3){
                $result = M("WrkAgreement")->where("id = $id")->setField("agreement_money",$money);
                if($result !== false){
                    $this->addLog($id);
                    //修改成功，发送通知给用户
                    $send_result = D("WrkAgreement")->sendWXUpdateMoneyMessage($id,$money);
                    $msg = (!empty($send_result) && $send_result['errcode'] == 0) ? "修改成功！":"修改成功！模板通知发送失败：".getGlobalReturnCode($send_result["errcode"]);
                    $this->ajaxReturn(array("code"=>"1","message"=>$msg));
                }else{
                    $this->ajaxReturn(array("code"=>"0","message"=>"修改失败！"));
                }
            }else{
                $this->ajaxReturn(array("code"=>"0","message"=>"已结束合同无法修改！"));
            }

        }else{
            $model['id'] = I("id");
            $model['money'] = I("money");
            $this->assign("model",$model);
            $this->display();
        }
    }

    public function _before_add(&$data)
    {
        parent::_before_add($data); // TODO: Change the autogenerated stub
        $data['attach_group'] = genUniqidKey();
        $data['leader_id'] = $this->_user_session->userId;
        $data['service_man_name'] = $this->_user_session->userName;
		$data['is_task_plan'] = 1;
    }

    public function _before_write($type, &$data)
    {
        if($data['agreement_money'] <= 0){
            $this->ajaxReturn(buildMessage("请输入正确的合同金额！",1));
        }
	    //处理用户与公司绑定
        //$this->handlerUserBranch($data['company_id'],$data['customer_leader_id']);//(负责人改为从已绑定的获取，不需要再次绑定)
        $condition['branch_id'] = $this->_user_session->currBranchId;
        $condition['company_id'] = $data['company_id'];
        $condition['name'] = $data['name'];
        if($type == 1 or $type == 3){
            $count = M("WrkAgreement")->where($condition)->count();
            $data['sys_sn'] = "A".$condition['branch_id'].$this->_user_session->userId.time();
            $data['create_time'] = time();
            $data['creater_id'] = $this->_user_session->userId;
        }elseif($type == 2){
            $condition['id'] = array("neq",$data['id']);
            $count = M("WrkAgreement")->where($condition)->select();
            $data['update_time'] = time();
            //开票类型不等于不开票 并且合同已激活
            if($data['invoice_type'] != 0 && $data['state'] != 0){
                $is_invoice = M("WrkInvoicePlan")->where("agreement_id = ".$data['id'])->getField("creater_id");
                if($is_invoice == ""){
                    M("WrkInvoicePlan")->where("agreement_id = ".$data['id'])->setField("creater_id",$this->_user_session->userId);
                }
            }
        }
        if($count){
            //$this->ajaxReturn(buildMessage("合同名称已存在！",1));
            $condition['name'] = array('like',sprintf('%s(_)',$data['name']));
            $overflow = D(CONTROLLER_NAME)->field('name')->where($condition)->order('name desc')->find();
            if ($overflow) {
                $reg= '/.*\(\D*(\d*).*/i';
                preg_match_all($reg,$overflow['name'],$want);
                $data['name'] = $data['name'].'('.($want[1][0] + 1).')';
            } else {
                $data['name'] = $data['name'].'(1)';
            }
        }
        $tmp=[];
        //服务明细
        foreach ($data['type1'] as $k=>$v){
            $tmp[$k] = array("id"=>$k+1,'type1'=>$data['type1'][$k],
                'type2'=>$data['type2'][$k],
                'attributes1'=>$data['attributes1'][$k],
                'attributes2'=>$data['attributes2'][$k],
                'attributes3'=>$data['attributes3'][$k]);
        }
        array_push($tmp,$data['order_desc']);
        $data['product_options'] = json_encode($tmp);
        $data['start_time'] = strtotime($data['start_time']);
        if($data['finish_time'] != ""){
            if(strtotime($data['finish_time']) < $data['start_time']){
                exit("合同结束时间小于合同开始时间");
            }
            $data['finish_time'] = strtotime($data['finish_time']."+1 day -1 second");
        }
        //去除与负责人相同的可见人
        foreach($data['visiblers'] as $k=>$v){
            if($v == $data['leader_id']){
                unset($data['visiblers'][$k]);
            }
        }
        $data['visiblers'] = implode(",",$data['visiblers']);
        $data['collaborators'] = implode(",",$data['collaborators']);
        parent::_before_write($type, $data); // TODO: Change the autogenerated stub
    }
    
    public function handlerUserBranch($company_id,$user_id){
        $condition['user_id'] = $user_id;
        $condition['branch_id'] = $company_id;
        $condition['type'] = 1;
        $result = M("SysUserBranch")->where($condition)->find();
        if(!$result){
            M("SysUserBranch")->add($condition);
        }
    }

    public function getLogAction(){
        $condition['content'] = I("post.id");
        $condition['func'] = "WrkAgreement";
        $result = M("SysLog")->where($condition)->field("user_name,operation,create_time")->order("create_time desc")->select();
        foreach($result as $k=>$value){
            $result[$k]['id'] = $k+1;
            $result[$k]['create_time'] = date("Y-m-d H:i:s",$value['create_time']);
            $array = [
                "add"=>"新增合同",
                "update"=>"修改合同",
                "updateMoney"=>"修改合同金额",
                "activeAgreement"=>"激活合同",
                "freezeAgreement"=>"冻结合同",
                "unfreezeAgreement"=>"解冻合同",
                "finishAgreement"=>"结束合同",
                "copy"=>"另存新增合同",
                "orderCreateAgm"=>"订单自动创建合同",
                "fileAgreement"=>"归档",
            ];
            $result[$k]['operation'] = $array[$value['operation']] == "" ? "-":$array[$value['operation']];
        }
        $this->ajaxReturn($result);
    }

    //获取服务明细
    public function getOptionsAction(){
        $condition['id'] = I("post.id");
        $options = M("WrkAgreement")->where($condition)->getField('product_options');
        $options = json_decode($options,true);
        $this->ajaxReturn($options);
    }

    //新增服务明细
    public function addOptionsAction(){
        $condition['a.branch_id'] = $this->_user_session->currBranchId;
        $condition['a.state'] = 1;
        $result = M("ComProduct")
            ->alias("a")
            ->join("com_category as b on a.category_id = b.id")
            ->where($condition)->field("a.id,a.product_title as name,a.category_id,a.category_pid,b.name as type2")->select();
        foreach ($result as $key=>$value){
            $condition = array();
            $condition['branch_id'] = $this->_user_session->currBranchId;
            $condition['id'] = $value['category_pid'];
            $result[$key]['type1'] = M("ComCategory")->where($condition)->getField("name");
            $condition = array();
            $condition['branch_id'] = $this->_user_session->currBranchId;
            $condition['parent_id'] = 0;
            $condition['product_id'] = $value['id'];
            $parent_options = M("ComProductOptions")->where($condition)->field("id,name")->select();
            $result[$key]['child'] = $parent_options;
            foreach ($result[$key]['child'] as $k=>$v){
                $condition = array();
                $condition['branch_id'] = $this->_user_session->currBranchId;
                $condition['parent_id'] = $v['id'];
                $options = M("ComProductOptions")->where($condition)->field("id,name")->select();
                $result[$key]['child'][$k]['child'] = $options;
            }
        }
        $this->ajaxReturn($result);
    }

    //获取催款、收款id
    public function getReceivablePromptIdAction(){
        $id = I("post.id");
        $type = I("post.type");
        $is_receivable_plan = M("WrkReceivables")->where("contract_id = $id")->getField("id");
        $is_prompt_plan = M("WrkPrompt")->where("contract_id = $id")->getField("id");
        if($is_receivable_plan != null && $type == 1){
            $is_receivable_plan = D("WrkReceivables")->setDacFilter("a")->where("a.contract_id = $id")->getField("a.id");
            if(!$is_receivable_plan){
                $this->ajaxReturn(array("error"=>2,"message"=>"您没有权限查看此数据!"));
            }
        }else if($is_prompt_plan != null && $type == 2){
            $is_prompt_plan = D("WrkPrompt")->setDacFilter("a")->where("a.contract_id = $id")->getField("a.id");
            if(!$is_prompt_plan){
                $this->ajaxReturn(array("error"=>2,"message"=>"您没有权限查看此数据!"));
            }
        }
        $this->ajaxReturn(array("error"=>0,"rec"=>$is_receivable_plan,"prompt"=>$is_prompt_plan));
    }

    public function getCompanyNameAction(){
        $id = I("post.id");
        $name = M("SysBranch")->where("id = $id")->getField("name");
        $this->ajaxReturn($name);
    }

    public function getCompanyCustomerAction(){
        $company_id = I("post.company_id");
        $module = I("post.module") == "" ? CONTROLLER_NAME : I("post.module");
        $result = D(CONTROLLER_NAME)->getCustomerUserData($module,$company_id);
        $this->ajaxReturn($result);
    }

    //归档合同
    public function fileAgreementAction($id){
        $model = D(CONTROLLER_NAME);
        try{
            $model->startTrans();
            $condition['id'] = array("in",$id);
            $condition['state'] = 3;//已结束
            $condition['is_valid'] = 1;
            $count = $model->where($condition)->count();
            if($count != count($id)){
                $this->ajaxReturn(buildMessage("操作失败，仅已结束合同可进行归档操作！",1));
            }
            $model->where($condition)->setField("is_valid",0);
            foreach ($id as $v){
                $this->addLog($v);
            }
            $model->commit();
            $this->ajaxReturn(buildMessage("操作成功<br>合同归档后，可在“已归档”页签中查看"));
        }catch (\Think\Exception $ex){
            $model->rollback();
            $this->ajaxReturn(buildMessage("操作失败！",1));
        }
    }

    /**
	 * 判断当前用户该合同的权限
	 */
    public function getWrkLeaderOrCollaboratorAction()
	{
		try{
			$id = I('id');
			$pv = D(CONTROLLER_NAME)->getPermitValue($id);
			if (!$pv){
				throw new Exception('您不是此合同的负责人或协作人，没有权限新增！');
			}

		    $this->ajaxReturn(buildMessage());
		} catch (Exception $e) {
		    $this->ajaxReturn(buildErrorMessage($e->getMessage()));
		}
	}
}