<?php

namespace ESAdmin\Controller;


class  UserParseController extends SysUserController {

    public function handlerBranchLists($data)
    {
        $compans = D(CONTROLLER_NAME)->getUserBindCompanys($data);
        $this->companys = $compans;
//        var_dump($compans);die;
    }

    //编辑页面ajax刷新
    public function branchListAction($id)
    {
        $compans = D(CONTROLLER_NAME)->getUserBindCompanys(['id'=>$id]);
        $this->companys = $compans;
        $this->display('ajax');
    }

    public function indexesCompanyAction()
    {
        if (IS_GET) {
            // $user_ids = I("user_ids");
            // $data = D('SysUser')->where([
            // 'id'=>array('in',$user_ids),
            // 'branch_id'=>$this->_user_session->currBranchId
            // ])->select();

            $this->company_data = json_encode(M('SysBranch')
                ->where(['parent_id'=>$this->_user_session->currBranchId])
                ->field("id,name,linkman,contact,querykey")->select());
            // var_dump($this->company_data);
            // $this->assign('model',$data);
            $this->display('bind_company');
        } else {
            $user_ids = I('post.user_ids');
            $branch_ids = I('post.branch_ids');
            $data = [];
            $condition['user_id'] = array('in',$user_ids);
            // D('SysUserBranch')->where($condition)->delete();
            $user_data = [];
            foreach ($user_ids as $k => $v) {
                foreach ($branch_ids as $k1 => $v1) {
                    
                    $sysUserBranch = D('SysUserBranch')->where(['user_id'=>$v,'branch_id'=>$v1])->select();
                    if (empty($sysUserBranch)) {
                    
                        $user_data[] = array(
                            'user_id'=>$v,
                            'type'=>1,
                            'branch_id'=>$v1
                        );
                    }

                }
            }
            D('SysUserBranch')->addAll($user_data);
            $data['message'] = "关联成功";
            $data['code'] = 0;
            $this->ajaxReturn($data);
        }
    }
    // public function indexesCompanyAction()
    // {
    //     if (IS_GET) {
    //         //获取未绑定改用户的公司列表
    //         $companys = D(CONTROLLER_NAME)->getUserIndexesCompany(I('get.id'));
    //         $user = D(CONTROLLER_NAME)->where('id = '.I('get.id'))->find();
    //         $user['mobile'] = $user['mobile'] ?? '未绑定';
    //         $this->user = $user;
    //         $this->companys = $companys;
    //         $this->handlerShowCompanyData($companys);
    //         $this->display('indexes_company');
    //     } else {
    //         $postdata = I('post.');
    //         if (isset($postdata['company_id']) && isset($postdata['id']) ) {
    //             //进行绑定
    //             $result = D(CONTROLLER_NAME) ->handlerUserSingleBindCompany(['id'=>$postdata['id'],'company_id' =>$postdata['company_id']]);
    //             $this->ajaxReturn($result);
    //         } else {
    //             $this->ajaxReturn(buildMessage("请选择需要绑定的公司！", 1));
    //         }
    //     }

    // }
    //修改用户类型
    public function editUserTypeAction()
    {
        if (IS_GET) {
            $this->ids = I('get.ids');
            $this->display('editUserType');
        } else {
            $postdata = I('post.');
            $result = [];
            $condition['id'] = array("in",$postdata['ids']);
            $condition['branch_id'] = $this->_user_session->currBranchId;
            $data['user_type'] = $postdata['user_type'];
            D('SysUser')->where($condition)->save($data);
            // if (） {
                $result['code'] = 0;
                $result['message'] = "修改用户类型成功";
            // } else {
            //     $result['code'] = 1;
            //     $result['message'] = "修改用户类型失败";
            // }
            $this->ajaxReturn($result);
        }

    }
    public function unbindCompanyAction()
    {
        if (IS_POST) {
            $postdata = I('post.');
            $result = D(CONTROLLER_NAME)->unbindCompany($postdata);
            $this->ajaxReturn($result);
        }
    }
    public function addTargetAction(){
        if (IS_POST) {
            $condition['value'] = I('post.value');
            $condition['branch_id'] = getBrowseBranchId();
            $condition['created_at'] = time();
            $model = I('post.type') == 'group' ? D('SysTargetGroup') : D('SysTargetTag');
            $result = $model->add($condition);
            exit(json_encode($result ? ['error'=>0,'message'=>'增加成功','data'=>$result] : ['error'=>1,'message'=>'增加失败']));
        }

    }
    protected function _before_display_dataview(&$data)
    {
        parent::_before_display_dataview($data); // TODO: Change the autogenerated stub
        $data['binded_time'] = $data['mobile'] ? ($data['binded_at'] ? date('Y-m-d H:i:s',$data['binded_at']) : date('Y-m-d H:i:s','1536631751') ) : '未绑定';
        $data['follow_time'] = $data['is_follow'] == 1 ? date('Y-m-d H:i:s',$data['followed_at']) : '未关注';

    }

    protected function handlerShowCompanyData($data)
    {
        $template = [];
        foreach($data as $key => $val) {
            $template[$val['id']] = $val;
        }
        $this->company_data = $data ? json_encode($template) : json_encode([]);
    }
    ///////////多级选项
    public function handlerTagsSearch($data,&$_filter)
    {
        $tags = $this->handlerTagsPolymorphic($data);
        $user_ids = [];
        foreach ($data as $k => $v) {
            if (in_array("other", $v)) {
                $v = array_diff($v,['other']);
                $other = M('SysUserRelationTag')->alias('a')
                        ->join('sys_target_tag as b on b.id = a.tag')
                        ->where(['a.branch_id' => getBrowseBranchId(),'b.branch_id' => getBrowseBranchId(),'b.id'=>array('exp','is not null')])->getField('user_id',true);
                $tmp = [];
                if (!empty($v)) {
                    $condition["a.branch_id"] = getBrowseBranchId();
                    $condition["b.tag"] = array('in', $v);
                    $sysTargetTag = M('SysUser')->alias('a')
                        ->join('sys_user_relation_tag as b on b.user_id = a.id')
                        ->where($condition)
                        ->getField('user_id',true);
                    $tmp = $sysTargetTag;
                    $other = array_diff($other,$tmp);
                }
                if (!empty($other)) {
                     $_filter["a.id"][] = array('not in', $other);
                }
            } else {
                $user_ids = M('SysUserRelationTag')->where(['tag'=>['in',$v]])->getField('user_id',true);
                if ($user_ids){
                    $_filter["a.id"][] = array('in',$user_ids);
                }else{
                    $_filter["a.id"] = 0;
                }
            }
        }

        // $tags = ;
        // var_dump($tags);

        // if (count($data) == 1){
        //     if ($tags[0] == 'other') {
        //         $condition['branch_id'] = getBrowseBranchId();
        //         $user_ids = M('SysUserRelationTag')->where($condition)->getField('user_id',true);
        //         if ($user_ids){
        //             $_filter["a.id"][] = array('not in',$user_ids);
        //         }
        //     } else {
        //         $condition['tag'] = array('in',$tags);
        //         $condition['branch_id'] = getBrowseBranchId();
        //         $user_ids = M('SysUserRelationTag')->where($condition)->getField('user_id',true);
        //         if ($user_ids){
        //             $_filter["a.id"][] = array('in',$user_ids);
        //         }else{
        //             $_filter["a.id"] = 0;
        //         }
        //     }
        // } else {
        //     $user_ids = [];
        //     foreach ($data as $k => $v) {
        //         if (in_array("other", $v)) {
        //             $v = array_diff($v,['other']);
        //             $other = M('SysUserRelationTag')->where(['branch_id' => getBrowseBranchId()])->getField('user_id',true);

        //             $condition["a.branch_id"] = getBrowseBranchId();
        //             $condition["b.tag"] = array('in', $v);
        //             $sysTargetTag = M('SysUser')->alias('a')
        //                 ->join('sys_user_relation_tag as b on b.user_id = a.id')
        //                 ->where($condition)
        //                 ->getField('user_id',true);
        //             $tmp = $sysTargetTag;

        //             $other = array_diff($other,$tmp);
        //             if (!empty($other)) {
        //                  $_filter["a.id"][] = array('not in', $other);
        //             }
        //         } else {
        //             $user_ids = M('SysUserRelationTag')->where(['tag'=>['in',$v]])->getField('user_id',true);
        //             if ($user_ids){
        //                 $_filter["a.id"][] = array('in',$user_ids);
        //             }else{
        //                 $_filter["a.id"] = 0;
        //             }
        //         }
        //     }
            // if ($tags) {
            //     $condition = [];
            //     foreach($tags as $key =>$val) {
            //         $temp = explode(',',$val);
            //         $temp_condition = [];
            //         foreach($temp as $k => $v){
            //             $temp_condition['_string'][] = ' FIND_IN_SET(\''.$v.'\',a.tag_ids) ';
            //         }
            //         $condition['_string'][] = implode(' and ',$temp_condition['_string']);
            //     }
            //     $condition['_string']['_logic'] = 'or';
            // }
            // $_filter['_complex'] =  $condition['_string'];
            // var_dump($tags);
        // }
    }
    public function handlerTagsPolymorphic($data)
    {
        if(!$data)
        {
            return [];
        }
        $count = count($data);
        $tags_parse = [];
        if( $count == 1 )
        {
            $inc_data = array_shift($data);
            return isset($inc_data) ? $inc_data : $data;
        }
        else
        {
            for ($i = array_keys($data)[0] ; $i < max(array_keys($data)) ; $i ++)
            {
                if($i == array_keys($data)[0])
                {
                    $tip = $data[$i];
                }
                else
                {
                    $tip = $tags_parse;
                }
                $temp = [];
                for ( $a = 0 ; $a < count($tip); $a++)
                {
                    for ( $n = 0 ; $n < count($data[$i+1]) ; $n ++ )
                    {
                        $temp[] = $tip[$a] . ',' . $data[ $i + 1 ][$n];
                    }
                }
                $tags_parse = $temp;
            }
            return $tags_parse;
        }
    }
}