<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/6/13
 * Time: 16:37
 */

namespace ESAdmin\Controller;
use Common\Lib\Controller\DataController;
use Think\Exception;

class WxOperateTemplateController extends DataController
{
    const BLACK_CUTTER = '：';
    protected $_store = ['OPENTM206903766','OPENTM408101579','OPENTM403179495'];
    protected $_store_notice = ['OPENTM206903766'];
    protected $_buffer_time = 3 * 24 * 60 * 60;
    protected $storage = [];
    protected $request = [];
    protected $_model = [];
    public function _initialize()
    {
        parent::_initialize();
        if (IS_GET){
            $this->assign('version','1.0.0');
        }
    }
    protected function _parsefilter(&$filter)
    {
        parent::_parsefilter($filter); // TODO: Change the autogenerated stub
        $filter['relation.use'] = 1;
        if (I('view-date') == 1) {
            unset($filter['relation.created_at']);
            $filter['relation.created_at'] = [ 'BETWEEN',[strtotime(date('Y-m',strtotime('-1 month'))),strtotime(date('Y-m',time()))]];
        }
        if (isset($filter['relation.message_state'])) {
            switch ($filter['relation.message_state']) {
                case 0:
                    $filter['a.message_type'] = 0;
                    unset($filter['relation.message_state']);
                    break;
                case 1:
                    $filter['a.message_type'] = 1;
                    $filter['relation.message_state'] = array('in',[0,1]);
                    if (isset($filter['relation.created_at'])) {
                        $filter['relation.created_at'] = array($filter['relation.created_at'],['lt',time() - $this->_buffer_time],'and');
                    } else {
                        $filter['relation.created_at'] = ['lt',time() - $this->_buffer_time];
                    }
                    break;
                case 2:
                    $filter['a.message_type'] = 1;
                    $filter['relation.message_state'] = 2;
                    break;
                case 3:
                    $filter['a.message_type'] = 1;
                    $filter['relation.message_state'] = 3;
                    break;
                case 4:
                    $filter['a.message_type'] = 1;
                    $filter['relation.message_state'] = array('in',[0,1]);
                    if (isset($filter['relation.created_at'])) {
                        $filter['relation.created_at'] = array($filter['relation.created_at'],['gt',time() - $this->_buffer_time],'and');
                    } else {
                        $filter['relation.created_at'] = ['gt',time() - $this->_buffer_time];
                    }
//                    $filter['relation.created_at'] =
                    break;
            }
        }
    }
    public function helpAction()
    {
        $this->assign('tip',I('get.tip'));
        $this->display();
    }
    public function _before_list(&$list)
    {
        parent::_before_list($list); // TODO: Change the autogenerated stub

        foreach($list as $key =>$value){
            if ($value['message_type'] == 1 && $value['relation_message_state'] != 1) {
                switch ($value['relation_message_state']) {
                    case 0:
                    case 1:
                        $list[$key]['message_state'] =  ($value['relation_created_at'] + $this->_buffer_time > time()) ? 4 : 1 ;
                        break;
                    case 2:
                        $list[$key]['message_state'] = 2;
                        break;
                    case 3:
                        $list[$key]['message_state'] = 3;
                        break;
                }
            } else {
                $list[$key]['message_state'] =  0;
            }
            $list[$key]['id'] = $value['relation_id'];
            $list[$key]['name'] = empty($value['name']) ? $value['title'] : $value['name'];
            $list[$key]['send_state'] = $value['relation_state'] == 1 ? '发送成功' :  '发送失败';
            $list[$key]['send_type'] = $value['relation_mold'] == 1 ? '微信模板' : '短信模板';
            $list[$key]['view_name'] = $value['relation_object_type'] == 1 ? $value['relation_company_name'] : $value['user_name'];
        }
    }

    public function index_bakAction()
    {
//        $this->select_companyAction();
        $this->display();
    }

    public function historyAction()
    {
        $templates = D(CONTROLLER_NAME) ->field('title,template_id')->where('branch_id = '.getBrowseBranchId().' and title is not null')->distinct(true)->select();
        $this->assign('templates',$templates);
        $this->display();
    }
    public function planAction()
    {
        $this->assign('the_current_time',date('Y-m',time()));
        $this->display();
    }
    public function plan_listAction()
    {
        $page_index = I("page/d", 1);
        $page_size = I("rows/d", 1024);
        $_order = array();
        $this->_parseOrder($_order);
        $_filter = array();
        parseQueryParams($_filter);
        if (!empty($_filter['a.life'])) {
            $_filter['a.life'] = strtotime($_filter['a.life']);
        }
        $_filter['a.mold'] = WX_OPERATE_MOLD_DEFAULT;
        $count = D('WxNoticeTemplateLibrary')->setDacFilter("a")->where($_filter)->count();
        $list = D('WxNoticeTemplateLibrary')->setDacFilter("a")->relation(true)->field("a.*")->where($_filter)->page($page_index, $page_size)->order($_order)->select();
        foreach($list as $key => $val) {
            $list[$key]['has_current'] = date('Y-m',$val['life']) == date('Y-m',time()) ? 1 : 0;
            $list[$key]['not_yet_count'] = D(CONTROLLER_NAME)->getPlanNotYetCount($val['id']);

        }
        $result["total"] = $count;
        $result["rows"] = $list;
        header('Content-Type:application/json; charset=utf-8');
        exit(json_encode($result));
    }
    public function send_detailAction(){
        if (I('get.id')) {
            $condition['relation.id'] = I('get.id');
            $data =    D(CONTROLLER_NAME)  ->alias('a')
                                           ->field('user.name as user_name,user.mobile as user_mobile,relation.mobile,a.content as template_content,relation.company_name,relation.mold,FROM_UNIXTIME(relation.created_at,\'%Y-%m-%d %H:%i:%s\') as created_time,relation.content as relation_content,a.title,a.name,relation.object_type')
                                           ->join('right join wx_notice_relation_user relation on relation.notice_id = a.id')
                                            ->join('left join sys_user user on user.id = relation.user_id')
                                           ->where($condition)->find();
            if ($data['object_type'] == 1) {
                $data['content'] = $this->handlerNoticeContentRecords(['content'=> $data['relation_content']]);
            } else {
                $data['content'] = $this->handlerNoticeContentRecords(['content'=> $data['template_content']],'content',3);
            }
            $model['created_time'] = $data['created_time'];
            $model['mold'] = $data['mold'] == 1 ? '微信模板通知': '短信模板通知';
            $model['mobile'] = empty($data['mobile']) ? $data['mobile']: $data['user_mobile'];
            $model['user_name'] = $data['user_name'];
            $model['send_name'] = $data['object_type'] == 1 ? $data['company_name']: $data['user_name'];
            $model['name'] = empty($data['name']) ? $data['title'] : $data['name'];
            $this->assign('model',$model);
            $this->assign('content',json_encode($data['content']));
            $this->display();
        }
    }
    public function addAppointAction()
    {
        if (IS_POST) {
            $postdata = I('post.');
            //判断是否已添加
            $condition['use'] = 0;
            $condition['company_id'] = $postdata['company_id'];
            $condition['notice_id'] = $postdata['id'];
            $condition['object_type'] = 1;
            $condition['state'] = WX_TEMPLATE_SEND_DEFAULT;
            $companys = M('wx_notice_relation_user') ->where($condition)->count();
            if ($companys > 0) {
                $this->ajaxReturn(buildMessage('你已经添加过该公司'));
            } else {
                $data = [
                    'notice_id' => $postdata['id'],
                    'company_id' => $postdata['company_id'],
                    'object_type' => 1,
                    'use' => 0,
                    'state' => WX_TEMPLATE_SEND_DEFAULT,
                    'created_at' => time(),
                    'updated_at' => time()
                ];
                $result = M('wx_notice_relation_user')->add($data);
                if ($result) {
                    $this->ajaxReturn(buildMessage('添加成功'));
                } else {
                    $this->ajaxReturn(buildMessage('添加失败',1));
                }
            }
        }
    }
    public function company_additiveAction()
    {
        if ($id = I('get.id')) {
            $condition['use'] = 0;
            $condition['notice_id'] = $id;
            $condition['object_type'] = 1;
            $condition['state'] = WX_TEMPLATE_SEND_DEFAULT;
            $companys = M('wx_notice_relation_user') ->where($condition)->getField('company_id',true);
            $condition = array();
            $condition['a.type'] = 1;
            $condition['a.id'] = array('not in',$companys);
            $user_session = session(USER_SESSION_KEY);
            if ($user_session->userIdentity == USR_IDENTITY_NORMAL) {
                if ($user_session->userDataAccess['_branchs']) {
                    $condition['a.id'] = array('in',$user_session->userDataAccess['_branchs']);
                } else {
                    $this->ajaxReturn([]);
                }
            }
            if (trim(I('q')) != '') {
                $condition['a.name'] = array('like',sprintf('%%%s%%',trim(I('q')) ));
            }
            $condition['a.leader_id'] = array('gt',0);
            $departments = D('SysBranch')->setDacFilter("a")->callFilter(false)->where($condition)->field('a.id,a.name')->order("a.code")->select();;
            $this->ajaxReturn($departments);
        }
    }
    public function send_premiseAction(){
        if (IS_GET) {
            $condition['id'] = I('get.id');
            $model = D(CONTROLLER_NAME)->where($condition)->find();
            $content = $this->handlerNoticeContentRecords($model);
            $this->assign('has_current',date('Y-m',$model['life']) == date('Y-m',time()) ? 1 : 0);
            $this->assign('id',I('get.id'));
            $this->assign('created_time',date('Y-m-d  H:i:s',$model['created_at']));
            $this->assign('model',$model);
            $this->assign('content',json_encode($content));
            $this->display();
        }
    }
    public function planCompanyListAction()
    {
        $page_index = I("page/d", 1);
        $page_size = I("rows/d", 1024);
        $_order = array();
        $this->_parseOrder($_order);
        $_filter = array();
        parseQueryParams($filter);
        $_filter['a.id'] = I('get.id');
        $_filter['nrc.use'] = 0;
        $_filter['nrc.object_type'] = 1;
        $type = I('post.type',0);
        if ($type == 0){
            $where['notice_id'] = I('get.id');
            $where['use'] = 1;
            $where['object_type'] = 1;
            $where['state'] = WX_TEMPLATE_SEND_SUCCESS;
            $companys = M('wx_notice_relation_user')->where($where)->getField('company_id',true);
            if ($companys) {
                $_filter['nrc.company_id'] =array('not in',$companys);
            }
        }
        $field = "nrc.company_id as id,nrc.created_at,";
        $field.= "(select count(*) from wx_notice_relation_user where state = ".WX_TEMPLATE_SEND_SUCCESS." and object_type = 1  and notice_id = ".I('get.id')."  and company_id = branch.id) as time,";
        $field.= "branch.name as company_name,user.name as leader_name,user.mobile as leader_mobile,user.openid as leader_openid";
        $_order = 'time asc, nrc.id desc';
        $count = D('WxNoticeTemplateLibrary')
                    ->alias("a")
                    ->join('inner join wx_notice_relation_user as nrc on nrc.notice_id = a.id')
                    ->where($_filter)->count();
        $list = D('WxNoticeTemplateLibrary')
                    ->alias("a")->field($field)
                    ->join('inner join wx_notice_relation_user as nrc on nrc.notice_id = a.id')
                    ->join('inner join sys_branch as branch on branch.id = nrc.company_id')
                    ->join('left join sys_user as user on user.id = branch.leader_id')
                    ->where($_filter)
                    ->page($page_index, $page_size)
                    ->order($_order)->select();
        $where_has_send['notice_id'] = I('get.id');
        $where_has_send['use'] = 1;
        $where_has_send['object_type'] = 1;
        $where_has_send['state'] = WX_TEMPLATE_SEND_SUCCESS;
        foreach($list as $key =>$value){
            $bind_state = '';
            $bind_state .= !empty($value['leader_mobile']) && strlen($value['leader_mobile']) == 11 ? '绑定手机' : '';
            $bind_state .= !empty($value['leader_openid']) ? ($bind_state == '' ? '绑定公众号' : '|绑定公众号') : '';
            $list[$key]['bind_state'] = empty($bind_state) ? '未知' : $bind_state;
            $where_has_send['company_id'] = $value['id'];
            $res = M('wx_notice_relation_user') ->where($where_has_send) ->count();
            $list[$key]['has_send'] = $res > 0 ? '已发送' : '未发送';
        }
        $result["total"] = $count;
        $result["rows"] = $list;
        header('Content-Type:application/json; charset=utf-8');
        exit(json_encode($result));
    }
    public function appoint_planAction()
    {
        $condition["standard_id"] = array('in',$this->_store);
        $list = M('WxTemplateMessage')
            ->field("id as value,title as text")
            ->where($condition)->select();
        if (empty(I('get.token_hash'))){
            if (empty(I('get.id'))) {
                $specifics = [
                    'templates' => count($list) > 0 ? $list : [],
                    'sign' => 'append',
                    'contents' => [],
                    'id' => 0,
                    'companys'=>[],
                    'selected'=>'',
                    'name'=>''
                ];
            } else {
                $id = I('get.id');
                $data = D(CONTROLLER_NAME)->getPreviewUpdateData($id);
                $example = $this->handlerContentRecords(D('EShop/WxBranchTemplate')->getContentTemplate($data['notice']['template_id']),'example');
                $content = $this->handlerNoticeContentRecords($data['notice']);
                $specifics = [
                    'templates' => count($list) > 0 ? $list : [],
                    'sign' => 'update',
                    'contents' => ['content_records'=>$content,'example_records'=>$example],
                    'id' => $id,
                    'companys'=>$data['companys'],
                    'selected'=>$data['notice']['template_id'],
                    'name' =>$data['notice']['name']
                ];
            }
            $token_hash =  strtoupper(hash('md5',time()));
        } else {
            $token_hash = I('get.token_hash');
            $specifics = [];
        }
        $this->assign('token_hash',$token_hash);
        $this->assign('specifics',json_encode($specifics));
        $this->display('appoint_plan');
    }
    /*用于获取下级公司*/
    public function treeCompanyAction() {
        $condition = array();
        if (trim(I('keyword')) != '') {
            $condition['a.name'] = array('like',sprintf('%%%s%%',trim(I('keyword')) ));
        }
        $condition['a.type'] = 1;
        $user_session = session(USER_SESSION_KEY);
//        if ($user_session->userIdentity == USR_IDENTITY_NORMAL) {
//            if ($user_session->userDataAccess['_branchs']) {
//                $condition['a.id'] = array('in',$user_session->userDataAccess['_branchs']);
//            } else {
//                $this->ajaxReturn([]);
//            }
//        }
        $condition['a.leader_id'] = array('gt',0);
        $departments = D('ComDepartment')->getUserBranchTree($condition, $this->_user_session);
        $this->ajaxReturn($departments[0]['children'] ?? []);
    }
    public function deleteCompanyAction()
    {
        if (IS_POST) {
            $postdata = I('post.');
            $condition['company_id'] = array('in',$postdata['companys']);
            $condition['use'] = 0;
            $condition['notice_id'] = $postdata['id'];
            $condition['object_type'] = 1;
            $condition['state'] = WX_TEMPLATE_SEND_DEFAULT;
            $result = M('wx_notice_relation_user')->where($condition)->delete();
            if ($result) {
                $this->ajaxReturn(buildMessage('删除成功!'));
            } else {
                $this->ajaxReturn(buildMessage('删除失败!',1));
            }
        }
    }
    public function deletePlanAction(){
        if (IS_POST) {
            $id = I('post.id');
            $condition['id'] = $id;
            $result = D(CONTROLLER_NAME)->where($condition)->find();
            if ($result) {
                $res = D(CONTROLLER_NAME)->where($condition)->data(['mold'=>2]) ->save();
                if ($res) {
                    $condition['use'] = 0;
                    $condition['notice_id'] = $id;
                    $condition['object_type'] = 1;
                    $condition['state'] = WX_TEMPLATE_SEND_DEFAULT;
                    M('wx_notice_relation_user')->where($condition)->delete();
                    $this->ajaxReturn(buildMessage('删除成功!'));
                } else {
                    $this->ajaxReturn(buildMessage('删除失败!',1));
                }
            } else {
                $this->ajaxReturn(buildMessage('删除成功!'));
            }
        }
    }
    public function select_companyAction()
    {
        if (IS_GET) {
            $token_hash = I('get.token_hash');
            $this->assign('token_hash',$token_hash);
            $this->display('select_company');
        } else {
            if($this->handlerTemplateCUPImplementRevise()){
                if ($this->storage->operation == 'append') {
                    $result = D(CONTROLLER_NAME)->templateAppendImplement($this->storage);
                    $this->ajaxReturn($result ? ['error' =>0,'message' => '清卡计划添加成功','id'=>$result] : ['error' =>1,'message' => '清卡计划添加失败']);
                } else {
                    $result = D(CONTROLLER_NAME)->previewUpdateImplement($this->storage);
                    $this->ajaxReturn($result ? ['error' =>0,'message' => '清卡计划修改成功','id'=>$result] : ['error' =>1,'message' => '清卡计划修改失败']);
                }
            }
        }
    }
    public function sendWxTemplateAction()
    {
        $postdata = I('post.');
        //发送模板消息
        $standard_id = M('wx_template_message')->where('id = '.$postdata['template_id'])->getField('standard_id');
        $template_data['template_id'] = getWxTemplateIdByStandardId($standard_id);
        $template_data['notice_id'] = $postdata['id'];
        $content = D(CONTROLLER_NAME)->where('id = '.$postdata['id'])->getField('content');
        $template_data['content'] = $this->handlerNoticeContentRecords(['content'=>$content]);
        $companys = $this->generatorFromNotice($postdata['companys'],$template_data['notice_id'],$content);
        if ($companys) {
            $this->handlerSendTemplateFromCompany($template_data,$companys);
            $this->ajaxReturn(['error' =>0,'message' => '发送完成']);
        } else {
            $this->ajaxReturn(['error' =>0,'message' => '发送完成']);
        }
    }
    protected function generatorFromNotice($companys,$notice_id,$content)
    {
        $companys_result = D(CONTROLLER_NAME)->getCompanyOpenidsFromTemplate($notice_id,$companys);
        $companys_data = [];
        foreach($companys_result as $key=>$value){
            $companys_data[$value['company_id']] = $value;
        }
        $condition['company_id'] = array('in',$companys);
        $condition['use'] = 0;
        $condition['notice_id'] = $notice_id;
        $field = '*';
        $result = M('wx_notice_relation_user')->field($field)->where($condition)->select();
        $array = [];
        $success = [];
        foreach($result as $key => $value) {
            $temp = $value;
//            unset($temp['id']);
            $temp['user_id'] = $companys_data[$value['company_id']]['user_id'];
            $temp['company_name'] = $companys_data[$value['company_id']]['company_name'];
            $temp['mobile'] = $companys_data[$value['company_id']]['mobile'];
            $temp['use'] = 1;
            $temp['content'] = $content;
            $temp['keyt'] = strtoupper(hash('md5',time().$value['company_id']));
            $temp['mold'] = 1;
            $companys_data[$value['company_id']]['keyt'] = $temp['keyt'];
            if (empty($companys_data[$value['company_id']]['openid'])) {
                $temp['state'] = 2;
                $temp['errcode'] = 400;
                $temp['errmsg'] = 'openid缺失';
				$temp['updated_at'] = time();
				M('wx_notice_relation_user')->save($temp);
            } else {
                $success['success'][$value['company_id']] = $companys_data[$value['company_id']];
            }
            $array[] = $temp;
        }
//        $result = M('wx_notice_relation_user')->addAll($array);
//        if ($result){
//            return $success;
//        } else {
//            return false;
//        }
		if ($success){
			return $success;
		} else {
			return false;
		}
    }
    public function hasSendIngAction()
    {
        if (IS_POST) {
            $postdata = I('post.');
            $condition['notice_id'] = $postdata['id'];
            $condition['company_id'] = array('in',$postdata['companys']);
            $condition['object_id'] = 1;
            $condition['use'] = 1;
            $condition['state'] = array('eq',0);
            $result = M('wx_notice_relation_user')->where($condition)->count();
            if ($result > 0){
                $this->ajaxReturn(['error' =>1]);
            } else {
                $this->ajaxReturn(['error' =>0]);
            }
        }
    }
    //发送模板消息
    protected function handlerSendTemplateFromCompany($template_data,$companys)
    {
        if (!empty($companys['success'])) {
            //异步发送模板消息
            $this->handlerWXSendTemplate($template_data,$companys,$template_data['notice_id']);
        }
        $finally['notice_id'] =$template_data['notice_id'];
        if (isset($companys['error'])) {
            $finally['error'] = $companys['error'];
        }
        //处理用户发送是否成功信息
        D(CONTROLLER_NAME)->companySendTemplateFinally($finally);
    }

    protected function handlerWXSendTemplate($template_data,$companys,$notice_id = 0)
    {
        $company['success'] = [];
        $company['error'] = $companys['error'];
        $message = array();
        $body = array();
        $message["template_id"] = $template_data['template_id'];
        $message["url"] = str_replace('shop','shop'.$this->_user_session->currBranchId,SHOP_ROOT).'/Notice/notice_view/keys/';
        foreach ( $template_data['content'] as $key =>$val) {
            $body[$val['field']]["value"] = $val['value'];
        }
        $message["body"] = $body;
        $data['message'] = $message;
        $data['companys'] = $companys['success'];
        $data['notice_id'] = $notice_id;
        send_wx_group_message($data,true);
    }
    //处理template的openid
    protected function handlerUserOpenidsFromTemplate($companys)
    {
        $array = [];
        if ($companys) {
            foreach($companys as $key => $val) {
                if (empty($val['openid'] )){
                    $array['error'][$val['company_id']] = ['id'=>$val['company_id'],'errcode' => '400' , 'errmsg' => 'openid缺失'];
                } else {
                    $array['success'][$val['company_id']] = $val;
                }
            }
        }
        return $array;
    }
    public function isNameVariousAction()
    {
        if (IS_POST) {
            $isVarious = $this->handlerIsNameVarious(I('post.'));
            if ($isVarious) {
                $this->ajaxReturn(['error'=>1,'message' => '名称重复']);
                return false;
            } else {
                $this->ajaxReturn(['error'=>0]);
            }
        }
    }
    protected function handlerIsNameVarious($data) {
        $where_name['mold'] = 0;
        $where_name['name'] = $data['name'];
        $where_name['branch_id'] = $this->_user_session->currBranchId;
        $where_name['life'] = strtotime(date('Y-m',time()));
        if ($data['id'] > 0) {
            $where_name['id'] = array('neq',$data['id']);
        }
        $has_double = M('wx_notice_template_library')->where($where_name)->count();
        return $has_double > 0 ? true : false;
    }
    //发送/存为草稿 request 处理函数 template_data 用于发送模板消息存放信息
    protected function handlerTemplateCUPImplementRevise()
    {
        $this->request = (object) I('post.');
        $this->storage = (object) $this->storage;
        if ($this->request->selected > 0) {
            $this->storage->operation = 'append';
            //处理content
            if(is_array($this->request->contents['content_records']) && count($this->request->contents['content_records']) > 0) {
                foreach( $this->request->contents['content_records'] as $key => $val) {
                    if (empty(trim($val['value']))){
                        $this->ajaxReturn(['error'=>1,'message' => $val['placeholder']]);
                        return false;
                    } else {
                        $this->storage->content_array[] = trim($val['key']) === '' ?
                        $val['field'].self::BLACK_CUTTER.trim($val['value']) :
                        $this->request->contents['example_records'][$key]['key'].self::BLACK_CUTTER.$val['field'].self::BLACK_CUTTER.trim($val['value']) ;
                    }
                }
            }
            //判断是否有空值
            if(count($this->request->contents['content_records']) > $this->storage->content_array) {
                $this->ajaxReturn(['error'=>1,'message' => '发送通知时字段内容不能为空']);
                return false;
            } else {
                $this->storage->content = $this->handlerContentCUEnRecords($this->storage->content_array);
            }
            if(empty($this->request->companys) || count($this->request->companys) == 0) {
                $this->ajaxReturn(['error'=>1,'message' => '请至少选择一个公司']);
                return false;
            }
            //判断是否名称重复
            $isVarious = $this->handlerIsNameVarious(I('post.'));
            if ($isVarious) {
                $this->ajaxReturn(['error'=>1,'message' => '名称重复']);
                return false;
            }
            if ($this->request->id > 0) {
                $this->storage->operation = 'update';
                $this->storage->{$this->storage->operation}['id'] = $this->request->id;

            } else {
                if (!empty($this->_store_notice)) {
                    $t_where['id'] = $this->request->selected;
                    $t_where['standard_id'] = array('in',$this->_store_notice);
                    $count_n = M('wx_template_message')->where($t_where)->count();
                    if ($count_n > 0) {
                        $this->storage->{$this->storage->operation}['message_type'] = 1;
                    }
                }
                $this->storage->{$this->storage->operation}['licence_plate'] = genUniqidKey();
                $this->storage->{$this->storage->operation}['life'] = strtotime(date('Y-m',time()));
            }

            $this->storage->template_data['content'] = $this->request->contents['content_records'];
            $this->storage->template_data['template_id'] = $this->request->selected;
            $this->storage->companys = $this->request->companys;
            if (!$this->handlerHasTemplate($this->request->selected)) {
                $this->ajaxReturn(['error' =>1,'message' =>'所属的微信消息模板不存在或已删除,不能发送模板消息!']);
                return false;
            }
            //整理出所需添加的数组
//            $this->storage->key = $this->request->key;
            $this->storage->{$this->storage->operation}['content'] = $this->storage->content;
            $this->storage->{$this->storage->operation}['template_id'] = $this->request->selected;
            $this->storage->{$this->storage->operation}['branch_id'] = $this->_user_session->currBranchId;
            $this->storage->{$this->storage->operation}['created_at'] = time();
            $this->storage->{$this->storage->operation}['updated_at'] = time();
            $this->storage->{$this->storage->operation}['name'] = $this->request->name;
            $this->storage->{$this->storage->operation}['mold'] = WX_OPERATE_MOLD_DEFAULT;
            //新增字段 lynn start
            $this->storage->{$this->storage->operation}['user_id'] = $this->_user_session->userId;
            $this->storage->{$this->storage->operation}['creator_id'] = $this->_user_session->userId;
            //新增字段 lynn end
            $this->storage->{$this->storage->operation}['title'] = D('EShop/WxBranchTemplate')->getTemplateTitle($this->request->selected);//Sep 28 新增title
            $this->storage->{$this->storage->operation}['point'] = $this->request->point;
            $this->storage->{$this->storage->operation}['send_at'] = null;
            $this->storage->{$this->storage->operation}['type'] = 2;
            return true;
        } else {
            $this->ajaxReturn(['error' =>1,'message' =>'操作失败!']);
            return false;
        }
    }
    protected  function handlerNoticeContentRecords($data,$inc='content',$c = 2)
    {
        $result = array();
        $content_records = explode("\r\n", $data[$inc]);
        foreach ($content_records as $content_record){
            $items = explode(self::BLACK_CUTTER,$content_record);
            if (count($items) == $c){
                $result[$inc."_records"][] = array("field"=>$items[0], "value"=>$items[1]);
            }else{
                $result[$inc."_records"][] = array("key"=>$items[0],"field"=>$items[1], "value"=>$items[2]);
            }
        }
        $this->handlerContentDetailData($result[$inc."_records"]);
        return $result[$inc."_records"];
    }
    //模板处理函数
    protected function handlerContentRecords($data,$inc ='all')
    {
        $result = array();
        if ($inc === 'all') {
            $result["content_records"] = $this->handlerContentRecords($data,'content');
            $result["example_records"] = $this->handlerContentRecords($data,'example');
            return $result;
        } else {
            if ($inc == 'example') {
                $count = substr_count($data[$inc],self::BLACK_CUTTER);
            }
            $content_records = explode("\r\n", $data[$inc]);
            foreach ($content_records as $key => $content_record){
                if (strpos($content_record,'.DATA') || $inc =='example') {
                    if (($inc == 'example' && $key >=(count($content_records) - $count - 2)) || $inc == 'content') {
                        $items = explode(self::BLACK_CUTTER, $content_record);
                        if($items[0] !='' || $items[1] != '') {
                            if (count($items) == 1) {
                                $result[$inc . "_records"][] = array("key" => "", "title" => $items[0]);
                            } else {
                                $result[$inc . "_records"][] = array("key" => $items[0], "title" => $items[1]);
                            }
                        }
                    } else {
                        if (trim($content_record) != '') {
                            $result[$inc . "_records"]['first'] = array("key" => "", "title" => $content_record);
                        }
                    }
                }
            }
            return $result[$inc."_records"];
        }
    }
    protected function handlerContentDetailData(&$content)
    {
        foreach ($content as $key => $value) {
            if ($key == 0) {
                $content[$key]['placeholder'] = '请输入消息提示';
                $content[$key]['view'] = '消息提示';
            } else if (trim($value['key']) != '') {
                $content[$key]['placeholder'] = '请输入'.$value['key'];
                $content[$key]['view'] = $value['key'];
            } else {
                $content[$key]['placeholder'] = '请输入消息备注';
                $content[$key]['view'] = '消息备注';
            }
        }
//        var_dump($content);die;
    }
    //储存于数据库时 content的数据处理
    protected function handlerContentCUEnRecords($content)
    {
        return implode("\r\n",$content);
    }
    //判断该模板是否存在
    protected function handlerHasTemplate($template_id)
    {
        $result = D('wx_template_message')->where('id = '.$template_id)->count();
        return ($result > 0) ? true : false;
    }

	protected function handlerContentAppendData(&$content)
	{
		foreach ($content as $key => $value) {
			$content[$key]['field'] = str_replace(array('{{','.DATA}}'),'',$value['title']);
			$content[$key]['value'] = '';
			$content[$key]['color'] = '#000000';
			if ($key == 0) {
				$content[$key]['placeholder'] = '请输入消息提示';
				$content[$key]['view'] = '消息提示';
			} else if (trim($value['key']) != '') {
				$content[$key]['placeholder'] = '请输入'.$value['key'];
				$content[$key]['view'] = $value['key'];
			} else {
				$content[$key]['placeholder'] = '请输入消息备注';
				$content[$key]['view'] = '消息备注';
			}
		}
//        var_dump($content);die;
	}



	/**
	 * 获取清卡模板
	 * 当天负责人是否创建了通知模板（创建用户的id、template_id、当天时间）
	 * 如果有则直接使用该消息模板，没有则查出内容填充在页面，页面上替换应内容：服务商、通知内容、时间、备注等
	 */
	public function indexAction(){
		$template = D('WxTemplateMessage')->getScenarioTemplate('OPENTM403179495','清卡');
		$template_id = $template['id'];
		$this->assign('template_id',$template_id);
		if (empty($template_id)){
			$this->ajaxReturn(array('error'=>1,'message'=>'该消息模板不可用'));
		}
		$data['template_id'] = $template_id;
		//当天是否有生成过消息内容
		$notice = D(CONTROLLER_NAME)
			->where(
				array('template_id'=>array('eq',$template_id),
					'creator_id'=>array('eq',$this->userId),
					'created_at'=>array(array('egt',strtotime(date('Y-m-d 00:00:00'))),array('elt',strtotime(date('Y-m-d 23:59:59'))))
				)
			)
			->find();

		if (empty($notice)){
			$template = D('EShop/WxBranchTemplate')->getContentTemplate($template_id);
			$result = $this->handlerContentRecords($template,'all');
			$this->handlerContentAppendData($result['content_records']);
			$mobile = D("SysUser")->where(array('id'=>array('eq',$this->userId)))->getField('mobile');
			foreach($result['content_records'] as $key=>$value){
				switch ($value['view'])
				{
					case '消息提示';
						$result['content_records'][$key]['value'] = '你好，请你将税控器及时清卡';
						break;
					case '服务商';
						$result['content_records'][$key]['value'] = $this->companyName;
						break;
					case '内容';
						$result['content_records'][$key]['value'] = '本月的缴税已经全部申报完，若您有税控器，请您于15号以前清卡或反写，以免税控被锁死。为了避免给您造成不必要的麻烦，请一定要及时清卡';
						break;
					case '时间';
						$result['content_records'][$key]['value'] = date('Y年m月d日');
						break;
					case '消息备注';
						$result['content_records'][$key]['value'] = "感谢您的配合，如有不明白的地方请联系".$mobile;
						break;
				}
			}
			$data['content'] = $result['content_records'];

			//生成今日发送的消息模板
			$content_array = array();
			foreach( $data['content'] as $key => $val) {
				if (!empty(trim($val['value']))){
					$content_array[] = trim($val['key']) === '' ?
					$val['field'].self::BLACK_CUTTER.trim($val['value']) :
					$val['key'].self::BLACK_CUTTER.$val['field'].self::BLACK_CUTTER.trim($val['value']) ;
				}
			}
			$content = $this->handlerContentCUEnRecords($content_array);
			$template_library_info = array();
			$template_library_info['title'] = '清卡通知';
			$template_library_info['template_id'] = $data['template_id'];
			$template_library_info['content'] = $content;
			$template_library_info['branch_id'] = $this->companyId;
			$template_library_info['type'] = 2;
			$template_library_info['created_at'] = time();
			$template_library_info['updated_at'] = time();
			$template_library_info['user_id'] = $this->userId;
			$template_library_info['creator_id'] = $this->userId;
			$template_library_info['name'] = '清卡通知';
			$template_library_info['mold'] = WX_OPERATE_MOLD_DEFAULT;
			$template_library_info['message_type'] = 1;
			$template_library_info['licence_plate'] = genUniqidKey();
			$template_library_info['life'] = strtotime(date('Y-m',time()));

			$data['notice_id'] = D('WxNoticeTemplateLibrary')->add($template_library_info);

		} else {
			$data['notice_id'] = $notice['id'];
			$data['content'] = $this->handlerNoticeContentRecords($notice);
		}


		$this->assign('libraryinfo',json_encode($data));
		$staticInfo = D(CONTROLLER_NAME)->statisticalNotice($template_id,CONTROLLER_NAME,$this->companyId);
		$this->assign('staticInfo',json_encode($staticInfo));

		$this->display();

	}

	public function getYearAction(){
		//时间从2018年开始往后倒今年
		$year = array();
		for($i=2017;$i<=date('Y');$i++){
			$year[] = array('name'=>$i.'年','value'=>$i);
		}
		$this->ajaxReturn($year);
	}

	public function getMonthAction(){
		$month = array(
			array('name'=>'一月','value'=>'01'),
			array('name'=>'二月','value'=>'02'),
			array('name'=>'三月','value'=>'03'),
			array('name'=>'四月','value'=>'04'),
			array('name'=>'五月','value'=>'05'),
			array('name'=>'六月','value'=>'06'),
			array('name'=>'七月','value'=>'07'),
			array('name'=>'八月','value'=>'08'),
			array('name'=>'九月','value'=>'09'),
			array('name'=>'十月','value'=>'10'),
			array('name'=>'十一月','value'=>'11'),
			array('name'=>'十二月','value'=>'12')
		);
		$this->ajaxReturn($month);
	}

	/**
	 * edit_notic_remark
	 * 编辑通知的备注
	 */
	public function edit_notic_remarkAction(){
		try{
			$data = I('post.');
			$content_array = array();
			foreach( $data['content'] as $key => $val) {
				if (empty(trim($val['value']))){
					throw new Exception($val['placeholder']);
				} else {
					$content_array[] = trim($val['key']) === '' ?
						$val['field'].self::BLACK_CUTTER.trim($val['value']) :
						$val['key'].self::BLACK_CUTTER.$val['field'].self::BLACK_CUTTER.trim($val['value']) ;
				}
			}
			$content = $this->handlerContentCUEnRecords($content_array);
			if ($data['id']){

				$savedata['id'] = $data['id'];
				$savedata['content'] = $content;
				$savedata['updated_at'] = time();
				D('WxNoticeTemplateLibrary')->save($savedata);
			} else {
				//新增操作
				$template_library_info = array();
				$template_library_info['title'] = '清卡通知';
				$template_library_info['template_id'] = $data['template_id'];
				$template_library_info['content'] = $content;
				$template_library_info['branch_id'] = $this->companyId;
				$template_library_info['type'] = 2;
				$template_library_info['created_at'] = time();
				$template_library_info['updated_at'] = time();
				$template_library_info['user_id'] = $this->userId;
				$template_library_info['creator_id'] = $this->userId;
				$template_library_info['name'] = '清卡通知';
				$template_library_info['mold'] = WX_OPERATE_MOLD_DEFAULT;
				$template_library_info['message_type'] = 1;
				$template_library_info['licence_plate'] = genUniqidKey();
				$template_library_info['life'] = strtotime(date('Y-m',time()));

				$data['id'] = D('WxNoticeTemplateLibrary')->add($template_library_info);
			}

			$this->ajaxReturn(array('notice_id'=>$data['id'],'error'=>0,'message'=>'保存成功'));
		} catch (Exception $e) {
			$this->ajaxReturn(array('error'=>1,'message'=>$e->getMessage()));
		}
	}

	/**
	 * 获取负责的公司
	 * 管理员可以获取所有公司
	 * 本期则根据服务商负责人查询客户
	 */
	public function noticeCompanyListAction(){

		$template_id = I('template_id');
		$year = I('year') ? I('year') :date('Y');
		$month = I('month') ? I('month') :date('m');

		$life_time = strtotime($year."-".$month);

		//获取商户负责人管理的客户公司id列表
		$list = D("SysUserModuleSetting")->getCompanysByModule(CONTROLLER_NAME, $keyword='',array(DAC_PERMIT_VALUE_COLLABORATOR,DAC_PERMIT_VALUE_LEADER));
		$company_id_list = array();
		foreach ($list as $val){
			$company_id_list[] = $val['id'];
		}
		if (empty($company_id_list)){
			$this->ajaxReturn();
		}


		//发送状态全部：0未处理1成功2失败
		//
		$wherestr = "WHERE tempDate.company_id > 0";

		$bidstr = implode(",",$company_id_list);

		$havingstr = 'HAVING tempDate.company_id > 0';
		//发送状态：0未处理1成功2失败
		if (I('state') != '' && I('state') == 0){
			$havingstr .= " AND (tempDate.state < 1 OR tempDate.state IS NULL)";
		} elseif (I('state') == 1){
			$wherestr .= " AND tempDate.state = 1";
		} elseif(I('state') == 2) {
			$wherestr .= " AND tempDate.state = 2";
		}

		//消息状态：0未查看、1已查看、2已确认(发送成功才有该筛选条件)
		if (I('message_state') != '' && I('message_state') == 0){
			$wherestr .= " AND tempDate.message_state <> 2";
		} elseif (I('message_state') == 2){
			$wherestr .= " AND tempDate.message_state = 2";
		}

		//是否已关注：0未关注、1已关注
		if (I('is_follow') != '' && I('is_follow') == 0){
			$wherestr .= " AND (tempDate.is_follow < 1 OR tempDate.is_follow IS NULL)";
		} elseif (I('is_follow') == 1){
			$wherestr .= " AND tempDate.is_follow = 1";
		}

		//关键字查询
		if (I('keyword')){
//			$where['_string'] = ' (b.name like "%'.I('keyword').'%")  OR ( c.name like "%'.I('keyword').'%") ';
			$wherestr .= " AND tempDate.company_name like '%".I('keyword')."%' OR tempDate.customer_name like '%".I('keyword')."%'";
		}


		$sql = "SELECT *,count(tempDate.wnru_id) as message_num FROM(
				SELECT b.id AS company_id,b.`name` AS company_name,
				c.`name` AS customer_name,c.head_pic,c.mobile AS customer_mobile,c.is_follow,
				cn.`name` AS c_name,cn.head_pic AS c_head_pic,cn.mobile AS c_mobile,cn.is_follow AS c_is_follow,
				manaer.`name` AS sender_name,u.`name` AS upleader_name,
				wntl.template_id,wntl.id AS wntl_id,wntl.life,wnru.id as wnru_id,
				wnru.state,wnru.created_at,wnru.message_state,wnru.sure_time
				FROM sys_branch AS b
				LEFT JOIN wx_notice_template_library AS wntl ON wntl.template_id  = ".$template_id." AND wntl.branch_id = ".$this->companyId." AND wntl.life = '".$life_time."'
				LEFT JOIN wx_notice_relation_user AS wnru ON  wntl.id = wnru.notice_id AND wnru.company_id = b.id
				LEFT JOIN sys_user as c ON c.id = b.customer_leader_id
				LEFT JOIN sys_user_module_setting as cnotice ON cnotice.company_id = b.id AND cnotice.type = ".DAC_SETTING_TYPE_CUSTOMER." AND cnotice.permit_value = ".DAC_PERMIT_VALUE_NOTICER." AND cnotice.module = 'WxOperateTemplate' AND cnotice.branch_id = '".$this->companyId."'
				LEFT JOIN sys_user as cn ON cn.id = cnotice.user_id
				LEFT JOIN sys_user_module_setting as upleader ON upleader.company_id = b.id AND upleader.type = ".DAC_SETTING_TYPE_BRANCH." AND upleader.permit_value = ".DAC_PERMIT_VALUE_NOTICER." AND upleader.module = 'WxOperateTemplate' AND upleader.branch_id = '".$this->companyId."'
				LEFT JOIN sys_user as u ON u.id = upleader.user_id
				LEFT JOIN sys_user_module_setting as ums ON ums.company_id = b.id AND ums.type = ".DAC_SETTING_TYPE_BRANCH." AND ums.permit_value = ".DAC_PERMIT_VALUE_LEADER." AND ums.module = 'WxOperateTemplate' AND ums.branch_id = '".$this->companyId."'
				LEFT JOIN sys_user as manaer ON manaer.id = ums.user_id
				WHERE b.type = 1 AND b.id IN (".$bidstr.")
				ORDER BY wnru.id DESC limit 999999999) AS tempDate
				".$wherestr."
				GROUP BY tempDate.company_id
				".$havingstr."
				ORDER BY tempDate.company_id ASC
				";


		$company_list = M()->query($sql);


		//数据整理
		foreach($company_list as $key=>$company){
			$company_list[$key]['company_name'] = $company['company_name'] ? $company['company_name']:'';
			if ($company['c_name']){
				$company_list[$key]['customer_name'] = $company['c_name'] ? $company['c_name']:'';
				$company_list[$key]['head_pic'] = $company['c_head_pic'] ? $company['c_head_pic']:'';
				$company_list[$key]['customer_mobile'] = $company['c_mobile'] ? $company['c_mobile']:'';
				$company_list[$key]['is_follow'] = $company['c_is_follow'] ? '已关注':'未关注';
			} else {
				$company_list[$key]['customer_name'] = $company['customer_name'] ? $company['customer_name']:'';
				$company_list[$key]['head_pic'] = $company['head_pic'] ? $company['head_pic']:'';
				$company_list[$key]['customer_mobile'] = $company['customer_mobile'] ? $company['customer_mobile']:'';
				$company_list[$key]['is_follow'] = $company['is_follow'] ? '已关注':'未关注';
			}


			$company_list[$key]['sender_name'] = $company['sender_name'] ? $company['sender_name']:'';
			$company_list[$key]['upleader_name'] = $company['upleader_name'] ? $company['upleader_name']:'';

			$company_list[$key]['life'] = $company['life'] ? $company['life']:'';


			$company_list[$key]['send_able'] = 1; //1可以再次发送、0不可以再次发送
			$company_list[$key]['sure_time'] = $company['sure_time'] ? date('Y-m-d H:i',$company['sure_time']) : '';
			$company_list[$key]['send_able'] = $company['sure_time'] ? 0 : 1;
			if ($year != date('Y') || $month != date('m')){
				$company_list[$key]['send_able'] = 0;
			}

			switch ($company['message_state']){
				case 0:$company_list[$key]['message_state'] = '未确认';break;
//				case 1:$company_list[$key]['message_state'] = '已查看';break;
				case 2:$company_list[$key]['message_state'] = '已确认';break;
//				case 3:$company_list[$key]['message_state'] = '已取消';break;
				default:$company_list[$key]['message_state'] = '未确认';
			}
			$company_list[$key]['customer_mobile'] = $company['customer_mobile'] ? $company['customer_mobile']:'';
			$company_list[$key]['created_at'] = $company['created_at'] ? date('Y-m-d H:i',$company['created_at']):'';
			switch ($company['state']){
				case 0:$company_list[$key]['state'] = '未发送';break;
				case 1:$company_list[$key]['state'] = '已发送';break;
				case 2:$company_list[$key]['state'] = '发送失败';break;
			}
			$company_list[$key]['message_num'] = $company['state'] ? $company['message_num']:0;
		}


		$this->ajaxReturn($company_list);
	}

	/**
	 * @param $company_id	客户公司id
	 * @param $template_id	微信模板id
	 * @param $life			年月时间戳
	 * @param $branch_id	商户公司id
	 * @return mixed		最后一个发送的状态详情
	 */
	protected function lastNoticeInfo($company_id,$template_id,$life,$branch_id){
		$info = D(CONTROLLER_NAME)->alias('a')
			->field('b.message_state,FROM_UNIXTIME(b.created_at,\'%Y-%m-%d %H:%i\') as wnru_created_at,b.state,FROM_UNIXTIME(b.sure_time,\'%Y-%m-%d %H:%i\') as sure_time')
			->join('LEFT JOIN wx_notice_relation_user as b ON b.notice_id = a.id')
			->where(array(
					"a.template_id" => array('eq',$template_id),
					"a.branch_id"=>array('eq',$branch_id),
					"a.life"=>array("eq",$life),
					"b.company_id"=>array('eq',$company_id),
					'b.state' => array('egt',1)
				))
			->order('b.id DESC')
			->find();
		return $info;
	}



	/**
	 * 该消息内容是否存在，存在则创建需要发送的关系表wx_notice_relation_user
	 * 不存在则创建wx_notice_template_library并生成发送的关系表wx_notice_relation_user
	 * 发送消息内容
	 */
	public function sendNoticeAction(){
		$post = I('POST.');
		//获取到了wx_notice_template_library的数据后创建wx_notice_relation_user的数据
		$notice_id = $post['id'];
		//获取公司的负责人的openid
		$where['b.type'] = array('eq',1);
		$where['b.id'] = array('in',$post['companys']);
		$company_list = M('SysBranch')->alias('b')
			->field('b.id as company_id,b.name as company_name,b.parent_id,u.id as user_id,u.mobile,u.openid,cn.id as c_user_id,cn.mobile as c_mobile,cn.openid as c_openid')
			->join('left join sys_user as u ON u.id = b.customer_leader_id')
			->join('LEFT JOIN sys_user_module_setting as cnotice ON cnotice.company_id = b.id AND cnotice.type = '.DAC_SETTING_TYPE_CUSTOMER.' AND cnotice.permit_value = '.DAC_PERMIT_VALUE_NOTICER.' AND cnotice.module = "WxOperateTemplate" AND cnotice.branch_id = "'.$this->companyId.'"')
			->join('LEFT JOIN sys_user as cn ON cn.id = cnotice.user_id')
			->join('LEFT JOIN wx_notice_relation_user AS wnru ON wnru.company_id = b.id')
			->where($where)
			->group('b.id')
			->select();
		$append_relation =[];
		$upLeaderOpenid = [];
		foreach ($company_list as $val) {
			if ($val['c_user_id']){
				$val['user_id'] = $val['c_user_id'];
				$val['mobile'] = $val['c_mobile'];
				$val['openid'] = $val['c_openid'];
			}
			$append_relation[] = [
				'notice_id' => $notice_id,
				'company_id' => $val['company_id'],
				'company_name'=>$val['company_name'],
				'mobile' => $val['mobile'],
				'user_id' => $val['user_id'],
				'object_type' => 1,
				'use' => 0,
				'state' => WX_TEMPLATE_SEND_DEFAULT,
				'keyt' => strtoupper(hash('md5',time().$val['company_id'])),
				'created_at' => time(),
				'updated_at' => time()
			];
			$user_id = D('SysUserModuleSetting')->getMemberByModuleAndCompanyId(CONTROLLER_NAME,$val['company_id'],DAC_PERMIT_VALUE_NOTICER);
			if ($user_id){
				$upLeaderOpenid[$user_id]['openid'] = M('SysUser')->where(array('id'=>array('eq',$user_id)))->getField('openid');
			}
		}

		if (!empty($append_relation)){
			M('wx_notice_relation_user')->addAll($append_relation);
		}
		//发送
		$template_data['notice_id'] = $notice_id;
		$content = D(CONTROLLER_NAME)->where('id = '.$notice_id)->getField('content');
		$standard_id = M('wx_template_message')->where('id = '.$post['template_id'])->getField('standard_id');
		$template_data['template_id'] = getWxTemplateIdByStandardId($standard_id);
		if (empty($template_data['template_id'])){
			$this->ajaxReturn(['error' =>1,'message' => '发送失败']);
		}
		$template_data['content'] = $this->handlerNoticeContentRecords(['content'=>$content]);
		$companys = $this->generatorFromClearNotice($post['companys'],$template_data['notice_id'],$content);
		if ($companys['success']) {
			$company['success'] = [];
			$message = array();
			$body = array();
			$message["template_id"] = $template_data['template_id'];
			$message["url"] = str_replace('shop','shop'.$this->_user_session->currBranchId,SHOP_ROOT).'/ComWxOperateTemplate/index/keys/';
			foreach ( $template_data['content'] as $key =>$val) {
				$body[$val['field']]["value"] = $val['value'];
			}
			$message["body"] = $body;
			$data['message'] = $message;
			$data['companys'] = $companys['success'];
			$data['notice_id'] = $notice_id;
			send_wx_group_message($data,true);
			//获取通知人
			$sendUpLeader = array(
				'template_id'=>getWxTemplateIdByStandardId('OPENTM414554920'),
				'url'=>str_replace('shop','shop'.$this->_user_session->currBranchId,SHOP_ROOT).'/WxOperateTemplate/index',
				'body'=>array(
				'first'=>array('value'=>'你好，本次已对'.count($companys['success']).'家公司发送清卡通知，请知悉。'),
				'keyword1'=>array('value'=>'清卡通知'),
				'keyword2'=>array('value'=>'工作通知'),
				'keyword3'=>array('value'=>($this->_user_session->staffName?$this->_user_session->staffName:$this->userName).'-通知清卡'),
				'keyword4'=>array('value'=>date('Y-m-d H:i:s')),
				'remark'=>array('value'=>'点击详情可查看客户的确认情况。'),
			)
			);
			if ($upLeaderOpenid){
				foreach($upLeaderOpenid as $user){
					$sendUpLeader['openid'] = $user['openid'];
					send_wx_message($sendUpLeader);
				}
			}
			$this->ajaxReturn(['error' =>0,'message' => '发送完成']);
		} else {
			$this->ajaxReturn(['error' =>1,'message' => '发送失败']);
		}
	}

	protected function generatorFromClearNotice($companys,$notice_id,$content)
	{
		$companys_result = D(CONTROLLER_NAME)->getCompanyUserOpenidsFromTemplate($notice_id,$companys);
		$companys_data = [];
		foreach($companys_result as $key=>$value){
			$companys_data[$value['company_id']] = $value;
		}
		$condition['company_id'] = array('in',$companys);
		$condition['use'] = 0;
		$condition['notice_id'] = $notice_id;
		$field = '*';
		$result = M('wx_notice_relation_user')->field($field)->where($condition)->select();
		$array = [];
		$success = [];
		foreach($result as $key => $value) {
			$temp = $value;
			$temp['use'] = 1;
			$temp['content'] = $content;
			$temp['keyt'] = strtoupper(hash('md5',time().$value['company_id']));
			$temp['mold'] = 1;
			$companys_data[$value['company_id']]['keyt'] = $temp['keyt'];
			if (empty($companys_data[$value['company_id']]['openid'])) {
				$temp['state'] = 2;
				$temp['errcode'] = 400;
				$temp['errmsg'] = 'openid缺失';
				$temp['updated_at'] = time();
			} else {
				$success['success'][$value['company_id']] = $companys_data[$value['company_id']];
			}
			M('wx_notice_relation_user')->save($temp);
			$array[] = $temp;
		}
		if ($success){
			return $success;
		} else {
			return false;
		}
	}
}