<?php

namespace ESAdmin\Controller;
use Common\Lib\Controller\DataController;
use Common\Lib\Controller\TreeController;

class SysDocumentController extends DataController {
    public function assignPermissions($controller = CONTROLLER_NAME)
    {
        parent::assignPermissions($controller); // TODO: Change the autogenerated stub
        $this->login_branch  = $this->_user_session->currBranchId;
        $this->is_staff  = $this->hasBranchStaff() ? 1 : 0;
        $this->target_branch = I('q-branch_id') ?? 0;
        $this->selected = I('checked_id') ?? 0;
    }
    protected function _before_add(&$data)
    {
        parent::_before_add($data); // TODO: Change the autogenerated stub
        $this->pid = I('pid');
    }

    protected function _parsefilter(&$filter)
    {
        parent::_parsefilter($filter); // TODO: Change the autogenerated stub
        if (empty($filter["a.branch_id"])){
            $filter["a.branch_id"] = array('eq',$this->_user_session->currBranchId);
        }
        if (!empty(I("post.keyword"))){
            $filter["a.name"] = array('like',"%".I("post.keyword")."%");
        }
    }

    protected function _before_detail(&$data)
    {
        parent::_before_detail($data); // TODO: Change the autogenerated stub
        $data["state"] = $data["type"] == 1 ? "opened" : "closed";
        $data["name"] = $data["type"] == 1 ? $data["name"].'.'.$data["ext"] :  $data["name"];
    }
    public function listAction($id = null,$target = 'myBranch') {
        $_filter = array();
        $this->_parsefilter($_filter);
        $_filter['a.is_valid'] = 1;
        //判断是用户还是商户登录
        $is_action = true;
        if ($this->hasBranchStaff()) {
            $obj_company_id = $_filter['a.branch_id'];
            if (empty($obj_company_id)){ //没有传入$obj_company_id,就返回空
                exit(json_encode(['data' => [],'isAction' =>false]));
            }
            //点击的是我的
            if ($target === 'myBranch'){
                $_filter['a.target_branch'] = $_filter['a.branch_id'];
                $_filter['a.branch_id'] = $this->_user_session->currBranchId;
                if ($this->_user_session->is_leader == 0) {
                    //获取文档功能协作人和负责人，如果当前用户是协作人或负责人，就可以看到该公司所有文档（不加其他where条件），但是协作人不能删除
                    $condition['module'] = CONTROLLER_NAME;
                    $condition['branch_id'] = getBrowseBranchId();
                    $condition['company_id'] =$obj_company_id;
                    $condition["type"] = DAC_SETTING_TYPE_BRANCH;
                    $user_ids = M("SysUserModuleSetting")->where($condition)->getField('user_id',true);
                    //没有负责人或协作人，或当前用户在里面，就加上user_id=当前用户的条件
                    if (empty($user_ids) || !in_array(strval($this->_user_session->userId), $user_ids)) {
                        $_filter['a.user_id'] = $this->_user_session->userId;
                    }
                }
            } else {
                $_filter['a.target_branch'] = 0;
            }
        } else {
            if ($target === 'myBranch'){
                $_filter['a.branch_id'] = $this->_user_session->currBranchId;
                $_filter['a.target_branch'] = 0;
            } else {
                $_filter['a.target_branch'] = $this->_user_session->currBranchId;
                unset($_filter['a.branch_id']);
            }
        }
        $_order = array("type asc,a.id");
        $this->_parseOrder($_order);
        $list = D(CONTROLLER_NAME)->alias("a")->field("a.*")->where($_filter)->order($_order)->select();
//        if ($list) {
//            unset($_filter["a.parent_id"]);
//            $documents = D(CONTROLLER_NAME)->alias('a')->field("a.*")->where($_filter)->select();
//            $this->handlerDocumentsSize($documents);
//        }
        $ids = [];
        if(I("post.keyword") && $list){
            //关键词搜索时 $ids为搜索出的结果id数组
            $list = $this->getChildren($list,$_filter);
            $ids = $list['ids'];
            unset($list['ids']);
        }
        //用户权限值，如果是商户登录，判断权限值，客户登录默认最大
        if ($obj_company_id) {
            $globalUserPermit = D("SysUserModuleSetting")->getPermitValue("SysDocument", $obj_company_id);
        }else{
            $globalUserPermit = DAC_PERMIT_VALUE_LEADER;
        }
        foreach ($list as $key => $value) {
            $list[$key]["state"] = $value["type"] == 1 ? "opened" : "closed";
//            $list[$key]["name"] = $value["type"] == 1 ? $value["name"].'.'.$value["ext"] :  $value["name"];
//            $list[$key]["size"] = $value["type"] == 1 ? $value["size"] :  $documents[$value['id']]['size'];
            $list[$key]["size"] = $value["type"] == 1 ? $value["size"] :  0;
            $list[$key]['time'] = date('Y年m月d日 H:i:s',$value['updated_at']);
            if ($target === 'myBranch') {
                $list[$key]["share_toggle"] = $this->hasFilerShare($value);
                if ($value['share'] == 1 ){
                    $list[$key]["visible"] = true;
                }else {
                    $list[$key]["visible"] = $list[$key]["share_toggle"];
                }
                //二次判断，如果登录用户是创建人，也有最高权限
                if ($value["user_id"] == $this->_user_session->userId){
                    $userPermit = DAC_PERMIT_VALUE_LEADER;
                }else{
                    $userPermit = $globalUserPermit;
                }
                $list[$key]["permit_value"] = $userPermit;
            } else {
                $list[$key]["visible"] = true;
                $list[$key]["permit_value"] = DAC_PERMIT_VALUE_LEADER;
            }
        }
        $list = $this->handlerDocumentTree($list);
        if(I("post.keyword")){
            $result = [];
            foreach ($ids as $k=>$id){
                $result[$id] = $list[$id];
            }
        }else{
            $result = $list;
        }
        header('Content-Type:application/json; charset=utf-8');
        exit(json_encode(['data' => $result,'isAction' =>$is_action] ?? ['data' => [],'isAction' =>$is_action]));
    }


    public function getChildren($list,$condition){
        $ids = array_column($list,"id");
        $condition['a.parent_id'] = array("in",$ids);
        unset($condition['a.name']);
        $result = M("SysDocument a")->where($condition)->select();
        $result = array_merge($result,$list);
        $result['ids'] = $ids;
        return $result;
    }

    protected function _before_write($type, &$data)
    {
        parent::_before_write($type, $data); // TODO: Change the autogenerated stub
        //文件上传处理
        $files = reset($_FILES);
        if (($data['type'] == 1 || (empty($data['type']) && $data['type'] != 0)) && (empty($files) || $files === false || empty($files['name'] ))) {
            $this->ajaxReturn(buildMessage('请上传文件',1));
        } else {
            //判断文件名称是否重复
            $condition['parent_id'] = $data['parent_id'];
            $condition['name'] = $data['name'];//名称不能一样
            $condition['is_valid'] = 1;
            $condition["branch_id"] = $this->_user_session->currBranchId;
            $condition["target_branch"] = $data["target_branch"];
            if ($type == parent::ACTION_DETAIL) {
                $condition['id'] = array('neq',$data['id']);
            } else if ($type == parent::ACTION_ADD) {
                $data['created_at'] = time();
            }
            $count = D(CONTROLLER_NAME)->where($condition)->count();
            if ($count > 0) {
                $condition['name'] = array('like',sprintf('%s(_)',$data['name']));
                $overflow = D(CONTROLLER_NAME)->field('name')->where($condition)->order('name desc')->find();
                if ($overflow) {
                    $reg= '/.*\(\D*(\d*).*/i';
                    preg_match_all($reg,$overflow['name'],$want);
                    $data['name'] = $data['name'].'('.($want[1][0] + 1).')';
                } else {
                    $data['name'] = $data['name'].'(1)';
                }
            }
            if ($_FILES && !empty($files['name']) && $data['type'] == 1) {
                $upload = new UploadController();
                $info = $upload->documentUpload();
                if ($info) {
                    $data['path'] = $info['file']['url'];
                    $data['size'] = $info['file']['size'];
                    $data['format'] = $info['file']['type'];
                    $data['ext'] = $info['file']['ext'];
                } else {
                    $this->ajaxReturn(buildMessage('上传文件失败',1));
                }
            }
            $data['updated_at'] = time();
        }
    }
    public function keyNameFromDirectoryTreeAction() {
        $condition['a.type'] = 0;
        $condition['a.is_valid'] = 1;
        if ($this->_user_session->userType == USER_TYPE_COMPANY_MANAGER) {
            $condition['a.target_branch'] = I('get.target_branch');
            $condition['a.branch_id'] = $this->_user_session->currBranchId;
        }
        $list = D(CONTROLLER_NAME)->alias("a")->where($condition)->field("a.id as value,a.name as text,a.parent_id")->select();

        $this->ajaxReturn($this->build_tree_list_search($list));
    }
    public function appendFileAction()
    {
        $this->target_branch  = I('q-branch_id') ?? 0;
        $this->pid = I('pid') ?? 0;
        $this->display('append_file');
    }
    //修改文件名称
    public function editFileAction()
    {
        if (IS_POST) {
            $requset = I('post.');
            if ($requset['branch_id'] != $this->_user_session->currBranchId) {
                $this->ajaxReturn(buildMessage('您不能执行此操作!',1));
            }
            $condition['parent_id'] = $requset['parent_id'] ?? 0;
            $condition['name'] = $requset['name'];//名称不能一样
            $condition['id'] = array('neq',$requset['id']);
            $condition['branch_id'] = $requset['branch_id'];
            $condition['is_valid'] = 1;
            $condition['target_branch'] = $requset['target_branch'];
            $result = D(CONTROLLER_NAME)->where($condition)->count();
            if ($result > 0) {
                $this->ajaxReturn(buildMessage('名称重复!',1));
            } else {
                $where['id'] = $requset['id'];
                $save['name'] = $requset['name'];
                $save['updated_at'] = time();
                $res = D(CONTROLLER_NAME)->where($where)->save($save);
                if ($res) {
                    $this->ajaxReturn(buildMessage('名称修改成功',0));
                } else {
                    $this->ajaxReturn(buildMessage('名称修改失败!',1));
                }
            }
        }
    }
    public function shareFileAction()
    {
        if (IS_POST) {
            $postdata = I('post.');
            $condition['id'] = $postdata['id'];
            $the_file = D(CONTROLLER_NAME) ->where($condition)->find();
            if ($this->hasFilerShare($the_file)) {
                $data['share'] = $the_file['share'] == 1 ? 0 : 1;
                $message =  $the_file['share'] == 1 ? '取消与他人共享该文件' : '开启与他人共享该文件';
                $result = D(CONTROLLER_NAME) ->where($condition)->data($data)->save();
                if ($result) {
                    $this->ajaxReturn(buildMessage('已成功'.$message,0));
                } else {
                    $this->ajaxReturn(buildMessage('操作失败!',1));
                }
            } else {
                $this->ajaxReturn(buildMessage('您没有此权限!',1));
            }
        }

    }
    //文件移动
    public function moveFolderAction()
    {
        if (IS_GET) {
            $id = I('get.id');
            //获取parent_id
            $checked = D(CONTROLLER_NAME)->where('id = '.$id) -> find();
            $_filter['a.type'] = 0;
            $_filter['a.is_valid'] = 1;
            $this->_parsefilter($_filter);
            $_filter['a.branch_id'] = $checked['branch_id'];
            $_filter['a.target_branch'] = I('get.target_branch');
            $_order = array("a.parent_id asc");
            $this->_parseOrder($_order);
            $list = D(CONTROLLER_NAME)->alias("a")->field("a.id,a.parent_id,a.name")->where($_filter)->order($_order)->select();
            $this->_before_list($list);
            foreach ($list as $key => $value) {
                $list[$key]["parent_id"] = $value['parent_id'] ?? 0;
            }
            $list = $this->handlerDocumentTree($list);
            $this->target_branch =I('get.target_branch');
            $this->lists = json_encode($list);
            $this->model = json_encode(['id' => $id,'parent_id' => $checked['parent_id']]);
            $this->display('move_folder');
        } else {
            $request = I('post.');
            $condition['id'] = $request['id'];
            //获取name
            $target = D(CONTROLLER_NAME)->field('name,branch_id,target_branch,type')->where($condition)->find();
            $where['name'] = $target['name'];
            $where['is_valid'] = 1;
            $where['type'] = $target['type'];
            $where['branch_id'] = $target['branch_id'];
            $where['target_branch'] = $target['target_branch'];
            $where['parent_id'] = $request['pid'];
            $hasDouble =D(CONTROLLER_NAME)->where($where)->count();
            if (!$hasDouble) {
                $save['parent_id'] = $request['pid'];
                $save['updated_at'] = time();
                $result = D(CONTROLLER_NAME)->where($condition)->save($save);
                if ($result) {
//                    $layout = $this->handlerFolderUpdate($request['id'],$request['old_pid']);
//                    foreach($layout as $key => $val) {
//                        $layout[$key]['name'] = $val['type'] == 1 ? $val['name'].'.'.$val['ext'] : $val['name'];
//                    }
//                    $template = [];
//                    foreach($layout as $key => $value) {
//                        $template[$value['parent_id']][] = $value;
//                    }
//                    ksort($template);
//                    $layout = [];
//                    foreach($template as $key => $value) {
//                        foreach($value as $k => $v) {
//                            $layout[] = $v;
//                        }
//                    }
                    $this->ajaxReturn(buildMessage('文件移动成功',0));
                } else {
                    $this->ajaxReturn(buildMessage('文件移动失败',1));
                }
            } else {
                $this->ajaxReturn(buildMessage('文件已存在',1));
            }

        }
    }
    public function deleteFileAction()
    {
        if (IS_POST) {
            $request = I('post.');
            $where['id'] = $request['id'];
            $file = D(CONTROLLER_NAME)->where($where)->find();
            $close = [];
            $close[] = $request['id'];
            $this->handlerDeleteFile($file,$close);
            $where['id'] = array('in',$close);
            $save['is_valid'] = 0;
            $save['updated_at'] = time();
            $save['deleted_at'] = time();
            $result = D(CONTROLLER_NAME)->where($where)->save($save);
            if ($result) {
//                $layout = $this->handlerFolderUpdate($file['parent_id']);
                $this->ajaxReturn(buildMessage('删除成功',0));
            } else {
                $this->ajaxReturn(buildMessage('删除失败',1));
            }
        }
    }
    protected function handlerDeleteFile($file,&$data)
    {
        $condition['parent_id'] = $file['id'];
        $result = D(CONTROLLER_NAME)->where($condition)->getField('id',true);
        if ($result) {
            foreach($result as $key =>$val) {
                $data[] = $val;
                $where['id'] = $val;
                $this->handlerDeleteFile(D(CONTROLLER_NAME)->where($where)->find(),$data);
            }
        }
//        ;
    }
    //用于处理文件size
    protected function handlerDocumentsSize(&$document)
    {
        $handler_data = [];
        $document_data = [];
        foreach ($document as $key => $val) {
            $handler_data[$val['parent_id']][]= $val;
        }
        foreach ($document as $key => $val) {
            $document[$key]['size'] = $val['type'] == 1? $val['size'] :$this->handlerDocumentsJuniorSize($val['id'],$handler_data);
            $document_data[$val['id']] = $document[$key];
        }
        $document = $document_data;
    }
    protected function handlerDocumentsJuniorSize($id,$handler_data)
    {
        $size = 0;
        if ($handler_data[$id]) {
            foreach($handler_data[$id] as $key => $val) {
                if ($val['type'] == 1) {
                    $size += $val['size'];
                } else {
                    $size += $this->handlerDocumentsJuniorSize($val['id'],$handler_data);
                }
            }
        }
        return $size;
    }
    public function getParentSizeAction()
    {
        if (IS_POST) {
            $result = $this->handlerFolderUpdate(I('post.parent_id'));
            if ($result){
                $template = [];
                foreach($result as $key => $value) {
                    $template[$value['parent_id']] = $value;
                }
                ksort($template);
                $result = [];
                foreach($template as $key => $value) {
                    $result[] = $value;
                }
                $this->ajaxReturn(buildMessage($result,0));
            } else {
                $this->ajaxReturn(buildMessage([],1));
            }
        }
    }
    protected function hasLeader(){
        return $this->_user_session->is_leader == 1 ? true : false;
    }

    /*
     *  返回当前用户是否有该文件共享权限
     */
    private function hasFilerShare($file_author = null)
    {
        if ($file_author['user_id'] == $this->_user_session->userId){
            return true;
        }else if ($this->hasBranchStaff()) {
            if ($this->hasLeader()){
                return true;
            }
            $condition['module'] = CONTROLLER_NAME;
            $condition['company_id'] = $file_author['target_branch'];
            $condition['permit_value'] = 8;
            $condition["type"] = DAC_SETTING_TYPE_BRANCH;
            $service_ids = M("SysUserModuleSetting")->where($condition)->getField('user_id',true);
            if (in_array($this->_user_session->userId,$service_ids)) {
                return true;
            } else {
                return false;
            }
        } else if(!$this->hasBranchStaff()) {
            $where['id'] = $this->_user_session->currBranchId;
            $where['leader_id'] = $this->_user_session->userId;
            $where['parent_id'] = $this->_user_session->parentBranchId;
            if (M("SysBranch")->where($where)->count() > 0){
                return true;
            } else {
                return false;
            }
        }
        return false;
    }
    protected function handlerFolderUpdate() {
        $result = [];
        $_filter = array();
        $_filter['a.is_valid'] = 1;
        $this->_parsefilter($_filter);
        $documents = D(CONTROLLER_NAME)->alias('a')->field("a.*,if(a.type = 1,'opened','closed') as state")->order('a.parent_id')->where($_filter)->select();
        $this->handlerDocumentsSize($documents);
        $numargs = func_num_args();
        $arg_list = func_get_args();
        for ($i = 0; $i < $numargs; $i++) {
            $this->LayerLoopForFolder($arg_list[$i],$documents,$result);

        }
        return $result;
    }
    protected function LayerLoopForFolder($id,$documents,&$data)
    {
        if (!empty($documents[$id]) && $documents[$id] > 0) {
            $data[] = $documents[$id];
            if ($documents[$id]['parent_id'] > 0){
                $this->LayerLoopForFolder($documents[$id]['parent_id'],$documents,$data);
            }
        }
    }
    protected function hasBranchStaff()
    {
        return $this->_user_session->userType == USER_TYPE_COMPANY_MANAGER ? true : false;
    }
    //数据处理函数
    protected function handlerDocumentTree($document,$first = '首页') {
        if ($document) {
            foreach ($document as $k=>$v){
                if(I("post.keyword")){
                    $document[$k]["text"] = str_replace(I("post.keyword"),"<p style='color:red;display: contents'>".I("post.keyword")."</p>",$document[$k]['name']);
                }else{
                    $document[$k]["text"] = $document[$k]["name"];
                }
            }
            $tree  =  $this->build_tree_list($document,'id',$first);
            return $tree;
        }
    }
    /* 产生列表，按层级排序 */
    protected function build_tree_list($list, $id_field = 'value',$first = '首页') {
        $parent_list = [];
        $tree_list = [];
        foreach($list as $key =>$value) {
            $list[$key]['mold'] = $value['type'] == 1 ? 'file' : 'folder';
            $list[$key]['name'] = $value['type'] == 1 ? $value['name'].'.'.$value['ext'] : $value['name'];
            $parent_list[$value['parent_id']][] = $list[$key];
        }
        foreach($list as $key =>$value) {
            if ($value['parent_id'] == 0 && empty(I("post.keyword"))) {
                $tree_list[$value[$id_field]] = $value;
                $tree_list[$value[$id_field]]['current'] = $first.'/'.$value['name'];
                $tree_list[$value[$id_field]]['children'] = $this->build_tree_subsidiary($value[$id_field],$parent_list,$tree_list[$value[$id_field]]['current']);
            }elseif(!empty(I("post.keyword"))){
                $tree_list[$value[$id_field]] = $value;
                $tree_list[$value[$id_field]]['current'] = $first.'/'.$value['name'];
                $tree_list[$value[$id_field]]['children'] = $this->build_tree_subsidiary($value[$id_field],$parent_list,$tree_list[$value[$id_field]]['current']);
            }
        }
        return $tree_list;
    }
    protected function build_tree_subsidiary($parent_id,$data,$current)
    {
        if ($data[$parent_id]) {
            $subsidiary = [];
            foreach($data[$parent_id] as $key => $value) {
                $template = $value;
                $template['current'] = $current.'/'.$value['name'];
                $template['children'] = $this->build_tree_subsidiary($value['id'],$data,$template['current']);
                $subsidiary[$value['id']] = $template;
            }
            return $subsidiary;
        } else {
            return [];
        }
    }
    /* 产生列表，按层级排序 */
    protected function build_tree_list_search($list, $id_field = 'value') {
        $result = array();
        $handler = array();
        foreach ($list as $item) {
            $item["prefix"] = "";
            $item["template"] = "";
            $result[$item[$id_field]] = $item;
        }
        foreach ($result as $key => $item) {
            $parent_id = $item["parent_id"];
            $parent_prefix = $result[$parent_id]["prefix"];
            $parent_template = $result[$parent_id]["template"];
            if ($result[$parent_id]) {
                $result[$key]["prefix"] = $parent_prefix . '　';
                $result[$key]["template"] = $parent_template.$result[$parent_id][$id_field].'_';
                $result[$key]["text"] = $parent_prefix . '　└─' . $item["text"];
            }
        }
        foreach($result as $key => $item){
            $handler[$item['template'].$item[$id_field]] = $item;
        }
        ksort($handler,SORT_STRING );
        return array_values($handler);
    }

    public function getCompanysAction($keyword = null){
        $list = D("SysUserModuleSetting")->getCompanysByModule(CONTROLLER_NAME, $keyword);
        $this->responseJSON($list);
    }
}
