<?php

namespace ESAdmin\Controller;

use Common\Lib\Controller\ComplexDataController;

class  WrkReceivablesController extends ComplexDataController {

    public function indexAction()
    {
        $red_notice = D(CONTROLLER_NAME)->getIsShowReceivablesNotice();
        $this->assign("show_notice",empty($red_notice) ? 0 : 1);
        parent::indexAction(); // TODO: Change the autogenerated stub
    }

    public function listAllAction() {
        $page_index = I("page/d", 1);
        $page_size = I("rows/d", 1024);
        $_order = array();
        $this->_parseOrder($_order);
        $_filter = array();
        $this->_parseFilter($_filter);
        $status = I('status');
        if (!empty($status)) {
            switch ($status) {
                case '1':
                    $_filter['a.status'] = 0;
                    break;
                case '2':
                    $_filter['a.status'] = array('in',[1,2]);
                    break;
            }
        }
        //默认取当天数据
        $begin_date = I('begin_date');
        if (!empty($begin_date)) {
            $begin_date = strtotime($begin_date);
        }
        $end_date = I('end_date');
        if (!empty($end_date)) {
            $end_date = strtotime($end_date) + (60*60)*24 - 1;
        }
        if (!empty($end_date) && !empty($begin_date)) {
            $_filter['c.start_time'][] = array('between',[$begin_date,$end_date]);
        }

        $company_id = I('company_id');
        if (!empty($company_id)) {
            $_filter['c.company_id'] = $company_id;
        }
        $leader_id = I('leader_id');
        if (!empty($leader_id)) {
            $_filter['a.leader_id'] = $leader_id;
        }
        $customer_leader_id = I('customer_leader_id');
        if (!empty($customer_leader_id)) {
            $_filter['c.customer_leader_id'] = $customer_leader_id;
        }
        $contract_id = I('contract_id');
        if (!empty($contract_id)) {
            $_filter['a.contract_id'] = $contract_id;
        }
        $_filter['a.branch_id'] = $this->_user_session->currBranchId;
        $count = D('WrkReceivables')->setDacFilter("a")
        ->join('LEFT JOIN wrk_agreement c ON c.id = a.contract_id')
        ->join('LEFT JOIN sys_branch d ON d.id = c.company_id')
        ->field("a.id,c.agreement_sn as contract_no,d.name as company_name,c.customer_leader_id,c.name as contract_name,c.agreement_money,c.start_time,a.leader_id,a.status")
        ->where($_filter)
        ->count();
        $_order = "c.start_time desc";
        $list = D('WrkReceivables')->setDacFilter("a")
        ->join('LEFT JOIN wrk_agreement c ON c.id = a.contract_id')
        ->join('LEFT JOIN sys_branch d ON d.id = c.company_id')
        ->field("a.id,c.agreement_sn as contract_no,c.company_id,d.name as company_name,c.customer_leader_id,c.name as contract_name,c.agreement_money,c.start_time,a.leader_id,a.status")
        ->where($_filter)
        ->page($page_index, $page_size)->order($_order)->select();
        foreach ($list as $k => $v) {
            // $list[$k]['customer_leader_id'] = M("SysUser")->field("id,name")->where(['id'=>$v['customer_leader_id']])->getField('name');
            $list[$k]['customer_leader_name'] = $this->getCustomerleader('WrkReceivables',$v['company_id']);

            $list[$k]['leader_id'] = M("SysUser")->field("id,name")->where(['id'=>$v['leader_id']])->getField('name');
            $actual_amount = 0;
            $advance = M("WrkReceivablesAdvance")
            ->field('id,pay_amount')
            ->where(['receivables_id' =>$v['id'] ])
            ->select();
            foreach ($advance as $k1 => $v1) {
                $actual_amount += (float)$v1['pay_amount'];
            }
            $record = M("wrkReceivablesRecord")
            ->field('id,pay_amount')
            ->where(['receivables_id' =>$v['id'] ])
            ->select();
            foreach ($record as $k1 => $v1) {
                $actual_amount += (float)$v1['pay_amount'];
            }
            $list[$k]['actual_amount'] = $actual_amount;
            $bad_dept_amount = M("WrkBadDept")->where(['receivables_id' =>$v['id']])->getField('bad_dept_amount');
            if (!empty($bad_dept_amount)) {
                $list[$k]['bad_dept_amount'] = $bad_dept_amount;
            }else{
                $list[$k]['bad_dept_amount'] = '-';
            }
        }

        $result["total"] = $count;
        $result["rows"] = $list;
        header('Content-Type:application/json; charset=utf-8');
        exit(json_encode($result));
    }
    public function listAction() {
        $page_index = I("page/d", 1);
        $page_size = I("rows/d", 1024);
        $_order = array();
        $this->_parseOrder($_order);
        $_filter = array();
        $this->_parseFilter($_filter);
        // $_filter['b.receivable_date'] = [];
        //0-全部1-逾期2-未付3-已付
        $status = I('status');
        if (!empty($status)) {
        	switch ($status) {
        		case '1':
        			$_filter['b.receivable_date'][] = array('LT',strtotime(date('Y-m-d')));
        			$_filter['b.status'] = array('in',[0,1]);
        			break;
        		case '2':
			        $_filter['b.status'] = array('in',[0,1]);
        			break;
        		case '3':
			        $_filter['b.status'] = 2;
        			break;
        	}
        }
        //默认取当天数据
        $begin_date = I('begin_date');
        if (!empty($begin_date)) {
        	$begin_date = strtotime($begin_date);
        }
        // else{
        // 	$begin_date = strtotime(date('Y-m-d'));
        // }
        $end_date = I('end_date');
        if (!empty($end_date)) {
        	$end_date = strtotime($end_date) + (60*60)*24 - 1;
        }
        // else{
        //     $end_date = strtotime(date('Y-m-d')) + (60*60)*24 - 1;
        // }
        if (!empty($end_date) && !empty($begin_date)) {
            $_filter['b.receivable_date'][] = array('between',[$begin_date,$end_date]);
        }
		// $_filter['b.receivable_date'][] = array('between',[$begin_date,$end_date]);

		$company_id = I('company_id');
		if (!empty($company_id)) {
			$_filter['c.company_id'] = $company_id;
        }
    	$leader_id = I('leader_id');
		if (!empty($leader_id)) {
        	$_filter['a.leader_id'] = $leader_id;
        }
    	$customer_leader_id = I('customer_leader_id');
		if (!empty($customer_leader_id)) {
        	$_filter['c.customer_leader_id'] = $customer_leader_id;
        }
        $contract_id = I('contract_id');
        if (!empty($contract_id)) {
            $_filter['a.contract_id'] = $contract_id;
        }
        $_filter['b.id'] = array('exp','is not null');
        $_filter['a.branch_id'] = $this->_user_session->currBranchId;
        $count = D('WrkReceivables')->setDacFilter("a")
        ->join('LEFT JOIN wrk_receivables_item b ON b.receivables_id = a.id')
        ->join('LEFT JOIN wrk_agreement c ON c.id = a.contract_id')
        ->join('LEFT JOIN sys_branch d ON d.id = c.company_id')
        ->field("a.id,c.agreement_sn as contract_no,d.name as company_name,c.customer_leader_id,c.name as contract_name,a.leader_id,b.receivables_amount,
            b.receivable_date,b.coupon_amount,b.actual_amount,b.offline_amount,b.balance_amount,b.wechat_amount,b.actual_date,b.status")
        ->where($_filter)
        // ->fetchSql(true)
        ->count();
        $_order = "receivable_date desc";
        $list = D('WrkReceivables')->setDacFilter("a")
        ->join('LEFT JOIN wrk_receivables_item b ON b.receivables_id = a.id')
        ->join('LEFT JOIN wrk_agreement c ON c.id = a.contract_id')
        ->join('LEFT JOIN sys_branch d ON d.id = c.company_id')
        ->join('LEFT JOIN wrk_receivables_account e ON e.id = b.account_id')
        ->field("a.id,c.agreement_sn as contract_no,c.company_id,d.name as company_name,c.customer_leader_id,c.name as contract_name,a.leader_id,b.receivables_amount,b.receivable_date,b.actual_amount,b.coupon_amount,b.offline_amount,b.balance_amount,b.wechat_amount,b.actual_date,b.status")
        ->where($_filter)
        ->page($page_index, $page_size)->order($_order)
        // ->fetchSql(true)
        ->select();
        foreach ($list as $k => $v) {
   //  		$tmp = M("SysUser")->field("id,name")->where(['id'=>$list[$k]['customer_leader_id']])->find();
			// $list[$k]['customer_leader_id'] = $tmp['name'];
            $list[$k]['customer_leader_name'] = $this->getCustomerleader('WrkReceivables',$v['company_id']);
    		$tmp = M("SysUser")->field("id,name")->where(['id'=>$list[$k]['leader_id']])->find();
			$list[$k]['leader_id'] = $tmp['name'];
            
            if (in_array($v['status'],[0,1]) && $v['receivable_date'] < strtotime(date('Y-m-d')) ){
                $list[$k]['status'] = 3;
            }
        }

        $result["total"] = $count;
        $result["rows"] = $list;
        header('Content-Type:application/json; charset=utf-8');
        exit(json_encode($result));
    }

    protected function _before_write($type, &$data)
    {
        parent::_before_write($type, $data);
        $data['update_time'] = time();
        $data['updater_id'] = $this->_user_session->userId;
        if ($type == 1) {
            $data['create_time'] = time();
            $data['creater_id'] = $this->_user_session->userId;
        }
    }

   protected function _before_detail(&$data) {
        $contract_id = $data['contract_id'];
        $condition = [];
        $condition["id"] = $contract_id;
        $wrkAgreement = M("WrkAgreement")->alias('a')
   		->join('LEFT JOIN sys_branch b ON b.id = a.company_id')
   		->join('LEFT JOIN sys_user c ON c.id = a.customer_leader_id')
        ->join('LEFT JOIN com_store d ON d.branch_id = a.branch_id')
		->field('a.id,a.company_id,b.name as company_name,a.agreement_sn,a.sys_sn,a.name,a.agreement_money,a.start_time,a.finish_time,c.name as customer_leader_id,a.branch_id,d.unline_card_number')
        ->where(['a.id' => $contract_id])
    	->find();

        $data['notice_id'] = I('notice_id');
    	if (!empty($wrkAgreement)) {
    		$wrkAgreement['show_start_time'] = date('Y-m-d',$wrkAgreement['start_time']);
    		$wrkAgreement['show_finish_time'] = date('Y-m-d',$wrkAgreement['finish_time']);
    	}
        
        $service_man =  M("SysUser")->where(['id' => $data['leader_id']])->find();
        if($service_man['staff_name'] != ""){
            $data["service_man_name"] = $service_man['staff_name'];
        }else{
            $data["service_man_name"] = $service_man['name'];
        }
        $wrkAgreement["customer_leader_name"] = $this->getCustomerleader('WrkReceivables',$wrkAgreement['company_id']);
        $data["wrkAgreement"] = $wrkAgreement;
        // $data['attach_group'] = genUniqidKey();
       //是否可见人
       if($data['visiblers']){
           $user_id = $this->_user_session->userId;
           $visiblers = explode(",",$data['visiblers']);
           $data['is_visibler'] = in_array($user_id,$visiblers);
       }
   }

	public function createLog($content = "",$operation = ACTION_NAME,$kind = 0) {
        $sysUser = M("SysUser")->where(['id'=>$this->_user_session->userId])->find();
        if (!empty($sysUser['staff_name'])) {
            $data["user_name"] = $sysUser['staff_name'];
        } else {
            $data["user_name"] = $sysUser['name'];
        }
        $data["branch_name"] = $this->_user_session->currBranchName;
        $data["kind"] = $kind;
        $data["func"] = CONTROLLER_NAME;
        $data["operation"] = $operation;
        $data["content"] = $content;
        $data["create_time"] = time();
        $data["ip"] = get_client_ip();
        M("SysLog")->add($data);
    }
   	//获取收款计划
   	public function getItemAction($id = null,$notice_id = null) {
        $item = M("WrkReceivablesItem")
        ->field('id,receivable_date,receivables_amount,actual_date,actual_amount,coupon_amount,offline_amount,balance_amount,wechat_amount,status,begin_date,end_date,attach_group,press_last_date')
        ->where(['receivables_id' =>$id])
        ->select();
        $unconfirmed_amount = D("WrkReceivables")->where(['id'=>$id])->getField('unconfirmed_amount');
        $notice_sum = (float)M("wrkReceivablesNotice")->where(['id' =>$notice_id,'status'=>1])->getField("offline_amount");
        if (empty($notice_sum)) {
            $notice_sum = 0;
        }
    	$status = ["未收","部分已收","已收","逾期"];
        $costmer_status = ["未付","部分已付","已付","逾期"];

        foreach ($item as $k => $v) {
            $item[$k]['show_receivables_date'] = !empty($v['receivable_date'])?date('Y-m-d',$v['receivable_date']):'';
            $item[$k]['show_actual_date'] = !empty($v['actual_date'])?date('Y-m-d',$v['actual_date']):'-';
            $item[$k]['show_begin_date'] = !empty($v['begin_date'])?date('Y-m-d',$v['begin_date']):'';
            $item[$k]['show_end_date'] = !empty($v['end_date'])?date('Y-m-d',$v['end_date']):'';
            $item[$k]['show_press_last_date'] = !empty($v['press_last_date'])?date('Y-m-d',$v['press_last_date']):'';
            //查询跟收款计划相关的账户和记录
            $account = M("wrkReceivablesAccount")
            ->alias('a')
            ->join('LEFT JOIN wrk_receivables_record b ON b.account_id = a.id')
            ->join('LEFT JOIN wrk_receivables_item_record c ON c.record_id = b.id')
            ->field('a.id,a.name')
            ->where(['c.item_id' =>$v['id']])
            ->select();
            $tmp = [];
            foreach ($account as $k1 => $v1) {
                array_push($tmp,$v1['name']);
            }
            $tmp = array_unique($tmp);
            $tmp = implode(",",$tmp);
            if($tmp == '') {
                $item[$k]['account_name'] = '-';
            }else{
                $item[$k]['account_name'] = $tmp;
                
            }
    		$item[$k]['unpaid_amount'] = $v['receivables_amount'] - $v['actual_amount'];

            $promptItem = M("WrkPromptItem")
            ->where([
                'receivables_item_id' =>$v['id'],
                'press_last_date'=>array('exp','is not null')
            ])->select();
            if (!empty($promptItem)) {
                $item[$k]['prompt_flag'] = 1; 
            }else{
                $item[$k]['prompt_flag'] = 0;
            }

            if ($notice_sum > 0) {
                if ($notice_sum > ($v['receivables_amount'] - $v['actual_amount'])) {
                    $notice_sum = $notice_sum - ($v['receivables_amount'] - $v['actual_amount']);
                }else{
                    $notice_sum = 0;
                }
                $item[$k]['notice_flag'] = 1; 
            }else{
                $item[$k]['notice_flag'] = 0;
            }

            if ($unconfirmed_amount > 0) {
                if ($unconfirmed_amount > ($v['receivables_amount'] - $v['actual_amount'])) {
                    $item[$k]['unconfirmed_amount'] = $v['receivables_amount'] - $v['actual_amount'];
                    $unconfirmed_amount = $unconfirmed_amount - ($v['receivables_amount'] - $v['actual_amount']);
                }else{
                    $item[$k]['unconfirmed_amount'] = sprintf("%.2f",$unconfirmed_amount);
                    $unconfirmed_amount = 0;
                }
                $item[$k]['confirm_flag'] = 1; 
            }else{
                $item[$k]['unconfirmed_amount'] = '-';
                $item[$k]['confirm_flag'] = 0;
            }

            if (in_array($v['status'],[0,1])){
                if ($v['receivable_date'] < strtotime(date('Y-m-d'))) {
                    $item[$k]['status'] = 3;
                }
            }

    		$item[$k]['show_status'] = $status[$item[$k]['status']];
            $item[$k]['show_costmer_status'] = $costmer_status[$item[$k]['status']];      

            $item[$k]['prompt_item_id'] = M("WrkPromptItem")->where(['receivables_item_id' =>$v['id']])->getField('id');
    	}
    	$this->ajaxReturn($item);
    }

    public function statisticsAction($id = null) {
        $item = M("WrkReceivables")->alias('a')
        ->join('LEFT JOIN wrk_agreement b ON b.id = a.contract_id')
        ->field('a.id,b.agreement_money,a.status')
        ->where(['a.id' =>$id])
        ->find();
        $rst['status'] = $item['status'];
        if ($item['status'] != 0) {
            $rst['show_status'] = '已结束';
        } else {
            $rst['show_status'] = '未结束';
        }
        $paid_amount = $item['agreement_money'];
        $actual_amount = 0;
        
        $advance = M("WrkReceivablesAdvance")
        ->field('id,pay_amount')
        ->where(['receivables_id' =>$id])
        ->select();
        foreach ($advance as $k => $v) {
            $actual_amount += (float)$v['pay_amount'];
        }
        $record = M("wrkReceivablesRecord")
        ->field('id,pay_amount')
        ->where(['receivables_id' =>$id])
        ->select();
        foreach ($record as $k => $v) {
            $actual_amount += (float)$v['pay_amount'];
        }
        $unpaid_amount = (float)$paid_amount - (float)$actual_amount;
        //统计退款
        $refund = M("WrkRefund")->alias('a')
        ->join('LEFT JOIN wrk_receivables_account b ON b.id = a.account_id')
        ->field('a.id,a.refund_date,a.refund_amount,a.attach_group,a.status')
        ->where(['a.receivables_id' =>$id])
        ->select();
        $refund_amount = 0;
        foreach ($refund as $k => $v) {
            $refund_amount += (float)$v['refund_amount'];
        }
        //统计坏账
        $badDept = M("WrkBadDept")->alias('a')
        ->join('LEFT JOIN wrk_receivables_account b ON b.id = a.account_id')
        ->field('a.id,a.bad_dept_date,a.bad_dept_amount,a.attach_group,a.status')
        ->where(['a.receivables_id' =>$id])
        ->find();
        $rst['actual_amount'] = $actual_amount;
        $rst['unpaid_amount'] = $unpaid_amount;
        $rst['refund_amount'] = $refund_amount;
        $rst['bad_dept_amount'] = $badDept['bad_dept_amount'];
        $this->ajaxReturn($rst);
    }

    public function getAdvanceAction($id = null) {
        $advance = M("WrkReceivablesAdvance")->alias('a')
        ->join('LEFT JOIN wrk_receivables_account b ON b.id = a.account_id')
        ->field('a.id,a.pay_date,a.pay_amount,b.name as account_name,a.poundage,a.net_amount as offline_amount')
        ->where(['a.receivables_id' =>$id])
        ->order("pay_date asc")
        ->select();
        $record = M("wrkReceivablesRecord")->alias('a')
        ->join('LEFT JOIN wrk_receivables_account b ON b.id = a.account_id')
        ->field('a.id,a.pay_date,a.pay_amount,b.name as account_name,a.poundage,a.offline_amount,a.balance_amount,a.wechat_amount,a.coupon_amount')
        ->where(['a.receivables_id' =>$id])
        ->order("pay_date asc")
        ->select();
        $rst = [];
        $type = ["预付款","到款确认","缴费付款"];
        foreach ($advance as $k => $v) {
            $advance[$k]['type'] = $type[0];
            $advance[$k]['pay_date'] = date('Y-m-d',$v['pay_date']);
            $advance[$k]['balance_amount'] = $v['balance_amount'];
            $advance[$k]['wechat_amount'] = $v['wechat_amount'];
            $advance[$k]['coupon_amount'] = $v['coupon_amount'];
        }
        foreach ($record as $k => $v) {
            if (empty($v['account_name'])) {
                $record[$k]['account_name'] = '-';
            }
            if ( $v['offline_amount'] != 0 ) {
                $record[$k]['type'] = $type[1];
            }else{
                $record[$k]['type'] = $type[2];
            }
            $record[$k]['pay_date'] = date('Y-m-d',$v['pay_date']);
        }
        $rst = array_merge($advance,$record);
        $this->ajaxReturn($rst);
    }

   	public function getRefundAction($id = null) {
        $refund = M("WrkRefund")->alias('a')
        ->join('LEFT JOIN wrk_receivables_account b ON b.id = a.account_id')
        ->field('a.id,a.refund_date,a.refund_amount,a.attach_group,a.status')
        ->where(['a.receivables_id' =>$id])
    	->select();
    	foreach ($refund as $k => $v) {
    		$refund[$k]['refund_date'] = date('Y-m-d',$refund[$k]['refund_date']);
    	}
    	$this->ajaxReturn($refund);
    }
    // public function getRenewAction($id = null) {
    //     $renew = M("WrkRenew")
    //     ->field('id,content,pay_amount,attach_group')
    //     ->where(['receivables_id' =>$id])
    //     ->select();
    //     $this->ajaxReturn($renew);
    // }

    //付款通知列表
    public function noticeListAction() {
        $page_index = I("page/d", 1);
        $page_size = I("rows/d", 1024);
        $_filter = array();
        $this->_parseFilter($_filter);

        $begin_date = I('begin_date');
        if (!empty($begin_date)) {
            $begin_date = strtotime($begin_date);
        }
        $end_date = I('end_date');
        if (!empty($end_date)) {
            $end_date = strtotime($end_date) + (60*60)*24 - 1;
        }
        if (!empty($end_date) && !empty($begin_date)) {
            $_filter['a.pay_date'][] = array('between',[$begin_date,$end_date]);
        }

        $company_id = I('company_id');
        if (!empty($company_id)) {
            $_filter['b.company_id'] = $company_id;
        }
        $leader_id = I('leader_id');
        if (!empty($leader_id)) {
            $_filter['b.leader_id'] = $leader_id;
        }
        $contract_id = I('contract_id');
        if (!empty($contract_id)) {
            $_filter['b.contract_id'] = $contract_id;
        }
        // $_filter['b.id'] = array('exp','is not null');
        $_filter['b.branch_id'] = $this->_user_session->currBranchId;
        $_filter['a.status'] = 1;//有效的才显示在列表中  （0为已确认 2为已驳回？？）

        $list = D("WrkReceivables")->setDacFilter('b')
        ->join('LEFT JOIN wrk_receivables_notice a ON a.receivables_id = b.id')
        ->join('LEFT JOIN wrk_agreement c ON c.id = b.contract_id')
        ->join('LEFT JOIN sys_branch d ON d.id = c.company_id')
        ->field('a.id as notice_id,a.receivables_id as id,a.pay_amount,a.pay_date,a.coupon_amount,a.offline_amount,a.wechat_amount,a.balance_amount,a.order_sn,a.attach_group,c.agreement_sn as contract_no, c.company_id,d.name as company_name,c.customer_leader_id,c.name as contract_name,b.leader_id')
        ->order("pay_date asc")->page($page_index, $page_size)
        ->where($_filter)
        ->select();
        $count = D("WrkReceivables")->setDacFilter('b')
            ->join('LEFT JOIN wrk_receivables_notice a ON a.receivables_id = b.id')
            ->join('LEFT JOIN wrk_agreement c ON c.id = b.contract_id')
            ->join('LEFT JOIN sys_branch d ON d.id = c.company_id')
            ->where($_filter)
            ->count();
        foreach ($list as $k => $v) {
            $list[$k]['customer_leader_name'] = $this->getCustomerleader('WrkReceivables',$v['company_id']);
            $tmp = M("SysUser")->field("id,name")->where(['id'=>$list[$k]['leader_id']])->find();
            $list[$k]['leader_name'] = $tmp['name'];
        }
        $result['rows'] = $list;
        $result['total'] = $count;
        $this->ajaxReturn($result);
    }

    public function ticketListAction($least_cost) {
        $mobile = M("SysUser")->where(['id' => $this->_user_session->userId])->getField('mobile');
        $parent_id = M("SysBranch")->where(['id' => $this->_user_session->currBranchId])->getField('parent_id');
            if ($parent_id == 0 || $parent_id == 1) {
                $branch_id = $this->_user_session->currBranchId;
            } else {
                $branch_id = $parent_id;
            }
        $list = M("SpTicketStock")->alias('a')
        ->join('LEFT JOIN sp_activity b ON b.id = a.activity_id')
        ->join('LEFT JOIN sp_activity_ticket c ON c.ticket_id = a.ticket_id')
        ->join('LEFT JOIN sp_ticket d ON d.id = a.ticket_id')
        ->where([
            'a.ticket_begin_date' => array('lt',time()),
            'a.ticket_end_date' => array('gt',time()),
            'd.least_cost' => array('elt',$least_cost),
            'b.is_scope' => 0,
            'a.mobile' => $mobile, 
            'a.state' => 1,
            'b.activity_type' => 2,
            'b.branch_id' => $branch_id
        ])->field("a.ticket_end_date,a.id,d.least_cost,d.reduce_cost")
        // ->fetchSql(true)
        ->select();
        foreach ($list as $k => $v) {
            $list[$k]['ticket_end_date'] = date("Y-m-d",$v['ticket_end_date']) ;
        }
        $this->ajaxReturn($list);
    }

    //到款确认
    public function payConfirmAction($id = null,$notice_id = null) {
        if (IS_POST) {
            $receivables = M("WrkReceivables")->where(['id' =>$id])->find();
            $agreement = M("WrkAgreement")->where(['id' =>$receivables['contract_id']])->find();
            $data['receivables_id'] = $id;
            $data['account_id'] = I('account_id');
            $data['pay_date'] = strtotime(I('pay_date'));
            $data['pay_amount'] = I('pay_amount');
            $data['offline_amount'] = I('net_amount');
            $data['poundage'] = I('poundage') == "" ? 0 : I('poundage');
            $data['net_amount'] = I('net_amount');
            $data['order_sn'] = getOrderNo("CIZ_");
            $data['created_time'] = time();
            $data['updated_time'] = time();
            $data['attach_group'] = $receivables['attach_group'];
            $data['branch_id'] = $this->_user_session->currBranchId;
            $record_id = M("wrkReceivablesRecord")->add($data);

			$this->createLog($id,"到款确认".$data['pay_amount']."元,手续费".$data['poundage']."元");
            $this->pay($record_id);

            $unconfirmed_amount = D("WrkReceivables")->where(['id'=>$id])->getField('unconfirmed_amount');
            if ($unconfirmed_amount > 0) {
                $unconfirmed_amount  = (float)$unconfirmed_amount - (float)$data['pay_amount'];
                if ($unconfirmed_amount < 0) {
                    $unconfirmed_amount = 0;
                }
                D("WrkReceivables")->where(['id'=>$id])->save(['unconfirmed_amount' => $unconfirmed_amount]);
            }
            D("WrkReceivables")->payByTimer($id,null);
            $sysBranch = M("SysBranch")->where(['id' =>$receivables['company_id']])->find();
            $sysBranch['balance_amount'] = $sysBranch['money'] - $sysBranch['money_auditing'];
            D("WrkReceivables")->sendWXConfirmMessage($id,$data['pay_amount'],$sysBranch['balance_amount']);

            $accumulated_amount = M("wrkReceivablesAccount")->where(['id'=>$data['account_id']])->getField('accumulated_amount');
            $accumulated_amount = $data['net_amount'] + $accumulated_amount;
            M("wrkReceivablesAccount")->where(['id'=>$data['account_id']])->save(['accumulated_amount'=>$accumulated_amount]);
            $notice_id = I('notice_id');
            if (!empty($notice_id)) {
                M("WrkReceivablesNotice")->where(['id' =>$notice_id])->save(['status'=>0]);
            }

            $recharge_data['company_id'] = I('company_id');
            // $recharge_data['user_id'] = $agreement['customer_leader_id'];
            $recharge_data['user_id'] = M("SysBranch")->where(['id'=>$recharge_data['company_id']])->getField('leader_id');
            $recharge_data['money_type'] = FIN_CIZ_RECHARGE;
            $recharge_data['order_sn'] = $data['order_sn'];
            $recharge_data['pay_name'] = '到款确认充值';
            $recharge_data['third_fee'] = $data['poundage'];
            $recharge_data['account'] = $data['pay_amount'];
            $recharge_data['creator_id'] = $this->_user_session->userId;
            $recharge_data['branch_id'] = $this->_user_session->currBranchId;
            $recharge_data['ctime'] = time();
            $recharge_data['source'] = FIN_RECEIVABLES_CONFIRMED;
            $recharge_data['pay_status'] = 1;
            $recharge_data['audit_time'] = time();
            $recharge_data['receivable_id'] =$data['account_id'];
            M("comRecharge")->add($recharge_data);
            $finance_data['fina_type'] = $recharge_data['source'];
            $finance_data['fina_cash'] = $data['pay_amount'];
            //$finance_data['fina_time'] = $data['pay_date'];
            $finance_data['fina_time'] = time();
            $finance_data['user_id'] = $recharge_data['user_id'];
            $finance_data['branch_id'] = $recharge_data['branch_id'];
            $finance_data['company_id'] = I('company_id');
            $finance_data['order_sn'] = $recharge_data['order_sn'];
            $finance_data['third_fee'] = $data['poundage'];
            $finance_data['receivable_id'] = $data['account_id'];
            $finance_data['title'] = '到款确认充值';
            M("ComFinance")->add($finance_data);
            //到款确认后会在资金账户多一条充值记录，所以需要多一条余额消费记录抵消
            $finance_data_pay['fina_type'] = FIN_PROMPT_BALANCE_PAY;//缴费付款
            $finance_data_pay['fina_cash'] = $data['pay_amount'];
            //$finance_data_pay['fina_time'] = $record_data['pay_date'];
            $finance_data_pay['fina_time'] = time();
            $finance_data_pay['branch_id'] = $recharge_data['branch_id'];
            $finance_data_pay['company_id'] = $recharge_data['company_id'];
            $finance_data_pay['order_sn'] = $data['order_sn'];
            $finance_data_pay['third_fee'] = 0;
            $finance_data_pay['receivable_id'] = $data['account_id'];
            $finance_data_pay['title'] = '客户余额消费';
            M("ComFinance")->add($finance_data_pay);
            //商户资金账户余额增加
            $branch_money = M("SysBranch")->where("id = ".getBrowseBranchId())->getField("money");
            M("SysBranch")->where("id = ".getBrowseBranchId())->setField("money",$data['pay_amount']+$branch_money);
            $this->ajaxReturn(array('code'=>0,'message'=>'到款确认成功'));
        } else {
            $receivables = M('WrkReceivables')->alias("a")
                ->join('LEFT JOIN wrk_agreement b ON b.id = a.contract_id')
                ->join('LEFT JOIN sys_branch c ON c.id = b.company_id')
                ->field("c.id,c.name as company_name,a.attach_group")
                ->where(['a.id' =>$id])
                ->find();
            $notice = M("wrkReceivablesNotice")
            ->where(['id' =>$notice_id,'status'=>1])
            ->find();

            $rst['id'] = $id;
            $rst['company_name'] = $receivables['company_name'];
            $rst['company_id'] = $receivables['id'];

            $item = M("WrkReceivablesItem")
                ->where(['receivables_id' =>$id])
                ->select();
            $unpaid_amount = 0;
            $rst['period_number'] = '';
            foreach ($item as $k => $v) {
                $unpaid_amount = (float)$unpaid_amount + (float)$v['receivables_amount'] - (float)$v['actual_amount'];
                if ($v['status'] != 2 && empty($rst['period_number'])) {
                    $rst['period_number'] ='第'.((int)$k+1).'期';
                }
            }
            $rst['unpaid_amount'] = $unpaid_amount;

            if (!empty($notice)) {
                $rst['notice_id'] = $notice['id'];
                $rst['pay_amount'] = $notice['offline_amount'];
                $rst['balance_amount'] = $notice['balance_amount'];
                $rst['poundage'] = 0;
                $rst['net_amount'] = $notice['offline_amount'];
            }
            $rst['attach_group'] = $receivables['attach_group'];
            $this->assign('model',$rst);
            $this->display('payConfirm');
        }
    }

    public function rejectAction($id = null,$notice_id = null) {
        if (IS_POST) {
            D("wrkReceivablesNotice")->where(['id'=>$notice_id])->save(['status' => 2]);
            $offline_amount = D("wrkReceivablesNotice")->where(['id'=>$notice_id])->getField('offline_amount');
            $unconfirmed_amount = D("WrkReceivables")->where(['id'=>$id])->getField('unconfirmed_amount');
            $unconfirmed_amount  = (float)$unconfirmed_amount - (float)$offline_amount;
            if ($unconfirmed_amount < 0) {
                $unconfirmed_amount  = 0;
            }
            D("WrkReceivables")->where(['id'=>$id])->save(['unconfirmed_amount' => $unconfirmed_amount]);
            $this->ajaxReturn(array('code'=>0,'message'=>'驳回付款通知成功'));
        }
    }

    //客户付款
    public function customerPayAction($id = null,$amount = null) {
        if (IS_POST) {
            $data['receivables_id'] = $id;
            $data['pay_date'] = time();
            $balance_amount = I('balance_amount');
            $coupon_amount = I('reduce_cost');
            if (empty($balance_amount)) {
                $balance_amount = 0;
            }
            $pay_amount = I('pay_amount');
            if (empty($pay_amount)) {
                $pay_amount = 0;
            }
            $data['pay_amount'] = (float)$pay_amount;
            $data['offline_amount'] = (float)$pay_amount - (float)$balance_amount - (float)$coupon_amount;
            $parent_id = M("SysBranch")->where(['id'=>$this->_user_session->currBranchId])->getfield("parent_id");
            if ($parent_id == 0 || $parent_id == 1) {
                $data['branch_id'] = $this->_user_session->currBranchId;
            } else {
                $data['branch_id'] = $parent_id;
            }
            if ($pay_amount > 0) {
                $item = D("WrkReceivablesItem")
                ->where(['receivables_id'=>$id,'branch_id'=>$data['branch_id'],'status'=>array('neq',2)])
                ->find();
                // M("WrkReceivablesItem")->where(['id'=>$item['id']])->save(['confirm_flag'=>1]);
            }
            // $data['is_balance'] = I('is_balance');
            $data['order_sn'] = I('order_sn');
            $data['create_time'] = time();
            $data['creater_id'] = $this->_user_session->userId;
            $data['attach_group'] = I('attach_group');
            $sp_ticket_stock_id = I('sp_ticket_stock_id');
            $data['coupon_amount'] = $coupon_amount;
            if (!empty($sp_ticket_stock_id)) {
                //优惠券付款
               D("WrkReceivables")->payByCoupon($id,$sp_ticket_stock_id,$data['branch_id'],$this->_user_session->userId);
            }
            $company_id = I('company_id');
            $sysBranch = M("SysBranch")->where(['id' =>$company_id])->find();
            $sysBranch['balance_amount'] = $sysBranch['money'] - $sysBranch['money_auditing'];
            if ($sysBranch['balance_amount'] >= $balance_amount && $balance_amount > 0) {
                $money = $sysBranch['money'];
                $money = $money - $balance_amount;
                M("SysBranch")->where(['id' =>$company_id])->save(['money'=>$money]);
                // $data['is_balance'] = 1;
                if (empty($balance_amount)) {
                    $balance_amount = 0;
                }
                $data['balance_amount'] = $balance_amount;
                $record_data['balance_amount'] = $balance_amount;
                $rst = D("WrkReceivables")->payByBlance($id,$balance_amount,$company_id);
                D("WrkReceivables")->payByTimer($id,null);
            }

            $pay_amount = (float)$data['coupon_amount'] + (float)$data['balance_amount'];
            if ($pay_amount > 0) {
                $record_data['receivables_id'] = $id;
                $record_data['pay_date'] = time();
                $record_data['pay_amount'] = $pay_amount;
                $record_data['net_amount'] = 0;
                $record_data['coupon_amount'] = $data['coupon_amount'];
                $record_data['order_sn'] = $data['order_sn'];
                $record_data['created_time'] = time();
                $record_data['updated_time'] = time();
                $record_data['branch_id'] = $data['branch_id'];
                $record_id = M("wrkReceivablesRecord")->add($record_data);
            }

            D("WrkReceivables")->updateBadDept($id);
            if ($data['offline_amount'] > 0) {
                $unconfirmed_amount = D("WrkReceivables")->where(['id'=>$id])->getField('unconfirmed_amount');
                $unconfirmed_amount  = (float)$unconfirmed_amount + (float)$data['offline_amount'];
                D("WrkReceivables")->where(['id'=>$id])->save(['unconfirmed_amount' => $unconfirmed_amount]);
            }else{
                //线下付款金额不大于0，则付款通知的状态为0
                $data['status'] = 0;
            }
            //增加付款通知
            $notice_id = M("wrkReceivablesNotice")->add($data);
            $pay_amount = (float)$data['offline_amount'] + (float)$data['coupon_amount'] + (float)$data['balance_amount'];
            $rst = D("WrkReceivables")->sendWXcustomerPayMessage($id,$pay_amount,"线下付款",$notice_id);
            $this->ajaxReturn(array('code'=>0,'message'=>'付款成功','rst'=>$rst));
        } else {
            $rst = M('WrkReceivables')->alias("a")
                ->join('LEFT JOIN wrk_agreement b ON b.id = a.contract_id')
                ->join('LEFT JOIN sys_branch c ON c.id = b.company_id')
                ->join('LEFT JOIN com_store d ON d.branch_id = b.branch_id')
                ->field("a.id,a.contract_id,c.id as company_id,c.name as company_name,b.name as agreement_name,d.unline_payee,d.unline_bank_account,d.unline_card_number,c.money_auditing,c.money,a.attach_group")
                ->where(['a.id' =>$id])
                ->find();
            $rst['balance_amount'] = $rst['money'] - $rst['money_auditing'];
            $rst['amount'] = $amount;
            // $rst['attach_group'] = genUniqidKey();
            $rst['order_sn'] = getOrderNo(SERVICE_ORDER_SN);
            if ($rst['balance_amount'] > $rst['amount']) {
                $rst['balance_max']  = $rst['amount'];
            }else{
                $rst['balance_max']  = $rst['balance_amount'];
            }

            $parent_id = M("SysBranch")->where(['id'=>$this->_user_session->currBranchId])->getfield("parent_id");
            $account = M('wrkReceivablesAccount')
                ->where(['is_wx' =>1,'branch_id'=>$parent_id])
                ->find();
            if (!empty($account)) {
                $rst['has_wx']  = 1;
            }else{
                $rst['has_wx']  = 0;
            }
            $rst['pay_status'] = M("ComStore")->where(['branch_id'=>$parent_id
            ])->getfield("pay_status");
            $rst['wxpay_open'] = M("WxConfig")->where(['branch_id'=>$parent_id
            ])->getfield("wxpay_open");
            // $code_data = $this->getWxNativePayCode($rst['amount'],$rst['order_sn'],$rst['contract_id']);
            // $rst['code'] = $code_data['code'];

            $this->assign('model',$rst);
            $this->display('customerPay');
        }
    }
    public function payDetectionAction() {
        $order_sn = I('order_sn');
        $record = M("wrkReceivablesNotice")->where(['order_sn' =>$order_sn])->find();
        if (!empty($record)) {
            $this->ajaxReturn(array('code'=>0,'message'=>'付款成功'));
        }else{
            $this->ajaxReturn(array('code'=>2,'message'=>'无目标数据'));
        }
        // else if(){
        //     $this->ajaxReturn(array('code'=>1,'message'=>'付款失败'));
        // }
    }

    protected function getWxNativePayCode($price,$balance_amount,$orderNo,$contract_id,$sp_ticket_stock_id = null,
$reduce_cost = 0,$receivables_id) {
        Vendor("WxPay.WxPayApi");
        Vendor("WxPay.WxPayNative");
        Vendor("WxPay.WxPayNotify");
        Vendor("phpqrcode.phpqrcode");
        Vendor("WxPay.log");
        $notify = new \NativePay();
        $input = new \WxPayUnifiedOrder();
        $this->setPayParams($input);
        $input->SetBody("扫码支付");
        $input->SetAttach("消费");
        $input->SetOut_trade_no($orderNo.'**'.substr(time(),2,8));
        $input->SetTotal_fee($price * 100);
        $input->SetTime_start(date("YmdHis"));
        $input->SetTime_expire(date("YmdHis", time() + 600));
        $input->SetGoods_tag("");
        $parent_id = M("SysBranch")->where(['id'=>$this->_user_session->currBranchId])->getfield("parent_id");
        $url = WEB_ROOT."/ReqQueue/WeChatPay/order_sn/".$orderNo."/receivables_id/".$receivables_id."/pay_amount/".$price."/balance_amount/".$balance_amount."/user_id/".$this->_user_session->userId."/branch_id/".$parent_id;
        if (!empty($sp_ticket_stock_id)) {
            $url = $url."/reduce_cost/".$reduce_cost."/sp_ticket_stock_id/".$sp_ticket_stock_id;
        }
        $input->SetNotify_url($url);
        $input->SetTrade_type("NATIVE");
        $input->SetProduct_id($contract_id);
        $result = $notify->GetPayUrl($input);
        ob_start();
        \QRcode::png($result["code_url"],false,0,6);
        $imagerStr = base64_encode(ob_get_contents());
        ob_end_clean();
        // return array('error'=>0,'code'=>$imagerStr,'no'=>$orderNo.'**'.time(),"other"=>$result,"url"=>$url);
        return array('error'=>0,'code'=>$imagerStr,'no'=>$orderNo.'**'.time());
    }    

    public function WxPayCodeAction() {
        if(IS_POST){
            $price = I('amount');
            $balance_amount = I('balance_amount');
            $orderNo = I('order_sn');
            $contract_id = I('contract_id');
            $receivables_id = I('receivables_id');
            $sp_ticket_stock_id = I('sp_ticket_stock_id');
            $reduce_cost = I('reduce_cost');
            $rst = $this->getWxNativePayCode($price,$balance_amount,$orderNo,$contract_id,$sp_ticket_stock_id,$reduce_cost,$receivables_id);
            $this->ajaxReturn($rst,'json');
        }
    }

    //微信定时查询是否付款成功
    protected function setPayParams($inputObj) {
        $wx_pay = getWxConfigData();
        $inputObj->SetAppid($wx_pay['appid']); //公众账号ID
        $inputObj->SetMch_id($wx_pay['wx_mchid']); //商户号
        $inputObj->SetAPPKey($wx_pay['wx_pay_key']);
    }


    //到款确认修改收款计划的已收金额
    protected function pay($record_id){
        $record = M("wrkReceivablesRecord")->where(['id' =>$record_id])->find();
        $receivables_id = $record['receivables_id'];
        $date = $record['pay_date'];
        $sum = $record['pay_amount'];
        $item = M("WrkReceivablesItem")
            ->where([
                'receivables_id' =>$receivables_id,
                'status'=>array('in',[0,1,3])
            ])
        ->order("id asc")->select();
        $item_arr = [];
        foreach ($item as $k => $v) {
            $unpay_amount = (float)$v['receivables_amount'] - (float)$v['actual_amount'];
            if ($sum >= $unpay_amount) {
                //已收金额与未收金额之和
                $item_arr['actual_amount'] = $v['receivables_amount'];
                //线下金额增加
                $item_arr['offline_amount'] = (float)$v['offline_amount'] + (float)$unpay_amount;
                $item_arr['actual_date'] = $date;
                $item_arr['status'] = 2;
                $item_arr['confirm_flag'] = 0;
                M('WrkReceivablesItem')->where(['id'=>$v['id']])->save($item_arr);
                M('wrk_receivables_item_record')->add([
                    'record_id'=>$record_id,
                    'item_id'=>$v['id']
                ]);
                $sum = (float)$sum - (float)$unpay_amount;
                if ($sum == 0) {break;}
            } else {
                $item_arr['actual_amount'] = (float)$v['actual_amount'] + (float)$sum;
                //线下金额增加
                $item_arr['offline_amount'] = (float)$v['offline_amount'] + (float)$sum;
                $item_arr['actual_date'] = time();
                $item_arr['status'] = 1;
                M('WrkReceivablesItem')->where(['id'=>$v['id']])->save($item_arr);
                M('wrk_receivables_item_record')->add([
                    'record_id'=>$record_id,
                    'item_id'=>$v['id']
                ]);
                break;
            }
        }
        $num = M("WrkReceivablesItem")->where([
                'receivables_id' =>$receivables_id,
                'status'=>array('neq',2)
            ])->count();

        if ($num == 0) {
            M("WrkReceivables")->where(['id' =>$receivables_id])->save(['status'=>1]);
        }
    }

    //坏账处理
    public function badDeptAction($id = null) {
        if (IS_POST) {
            $data['receivables_id'] = $id;
            $data['bad_dept_amount'] = I('bad_dept_amount');
            $data['bad_dept_date'] = time();
            $data['create_time'] = time();
            $data['attach_group'] = M("WrkReceivables")->where(['id' =>$id])->getField('attach_group');
            // $data['attach_group'] = genUniqidKey();
            $data['branch_id'] = $this->_user_session->currBranchId;
            M("WrkReceivables")->where(['id' =>$id])->save(['status'=>2]);
            M("WrkBadDept")->add($data);
			$this->createLog($id,"add_badDept");
            D("WrkReceivables")->sendWXBadDeptMessage($id,$data['bad_dept_amount'],'');
            $this->ajaxReturn(array('code'=>0,'message'=>'坏账处理成功'));
        } else {
            $item = M("WrkReceivablesItem")->alias('a')
            ->join('LEFT JOIN wrk_receivables_account b ON b.id = a.account_id')
            ->field('a.id,a.receivable_date,a.receivables_amount,a.actual_date,a.actual_amount,b.name as account_name,a.status,a.begin_date,a.end_date')
            ->where(['a.receivables_id' =>$id])
            ->select();
            foreach ($item as $k => $v) {
               $rst['total_amount'] += $v['receivables_amount'];
               $rst['pay_amount'] += $v['actual_amount'];
            }
            $rst['unpay_amount'] = (float)$rst['total_amount'] - (float)$rst['pay_amount'];
            $rst['id'] = $id;
            $this->assign('model',$rst);
            $this->display('badDept');
        }
    }

    public function deleteBadDeptAction($id = null) {
        $receivables_id = M("WrkBadDept")->where(['id' =>$id])->getField('receivables_id');
        //判断未付完的款项
        $num = M("WrkReceivablesItem")->where([
            'receivables_id' =>$receivables_id,
            'status'=>array('neq',2)
            ])->count();
        if ($num == 0) {
            M("WrkReceivables")->where(['id' =>$receivables_id])->save(['status'=>1]);
        }else{
            M("WrkReceivables")->where(['id' =>$receivables_id])->save(['status'=>0]);
        }
        M("WrkBadDept")->where(['id' =>$id])->delete();
		$this->createLog($id,"delete_badDept");
        $this->ajaxReturn(array('code'=>0,'message'=>'删除坏账成功'));
    }

    //退款处理
    public function refundAction($id = null) {
        if (IS_POST) {
            $data['receivables_id'] = $id;
            $data['refund_amount'] = I('amount');
            $data['account_id'] = I('account_id');
            $data['company_id'] = I('company_id');
            // $data['remark'] = I('remark');
            $data['remark'] = '';
            $data['attach_group'] = M("WrkReceivables")->where(['id' =>$id])->getField('attach_group');
            // $data['attach_group'] = I('attach_group');
            $data['refund_date'] = time();
            $data['create_time'] = time();
            $data['branch_id'] = $this->_user_session->currBranchId;
            M("WrkRefund")->add($data);
            $this->createLog($id,'退款'.$data['refund_amount'].'元');

            // $recharge_data['company_id'] = I('company_id');
            // $recharge_data['user_id'] = $this->_user_session->userId;
            // $recharge_data['money_type'] = FIN_CIZ_RECHARGE;
            // $recharge_data['order_sn'] = $data['order_sn'];
            // $recharge_data['pay_name'] = '到款确认充值';
            // $recharge_data['third_fee'] = $data['poundage'];
            // $recharge_data['account'] = $data['pay_amount'];
            // $recharge_data['creator_id'] = $this->_user_session->userId;
            // $recharge_data['branch_id'] = $this->_user_session->currBranchId;
            // $recharge_data['ctime'] = time();
            // $recharge_data['source'] = FIN_RECEIVABLES_CONFIRMED;
            // $recharge_data['pay_status'] = 1;
            // $recharge_data['audit_time'] = time();
            // $recharge_data['receivable_id'] =$data['account_id'];
            // M("comRecharge")->add($recharge_data);
            $finance_data['fina_type'] = FIN_USER_REFUND;
            $finance_data['fina_cash'] = $data['refund_amount'];
            $finance_data['fina_time'] = $data['refund_date'];
            $finance_data['user_id'] = $this->_user_session->userId;
            $finance_data['branch_id'] = $this->_user_session->currBranchId;
            $finance_data['company_id'] = I('company_id');
            $finance_data['order_sn'] = getOrderNo("CIZ_");
            $finance_data['third_fee'] = 0;
            $finance_data['receivable_id'] = $data['account_id'];
            $finance_data['title'] = '用户退款';
            M("ComFinance")->add($finance_data);
            // $accumulated_amount = M("wrkReceivablesAccount")->where(['id'=>$data['account_id']])->getField('accumulated_amount');
            // $accumulated_amount = $accumulated_amount - $finance_data['fina_cash'];
            // M("wrkReceivablesAccount")->where(['id'=>$data['account_id']])->save(['accumulated_amount'=>$accumulated_amount]);
            //更新公司资金账户余额
            $branch_money = M("SysBranch")->where("id = ".$finance_data['company_id'])->getField("money");
            M("SysBranch")->where("id = ".$finance_data['company_id'])->setField("money",$branch_money+$data['refund_amount']);
            M("SysBranch")->where("id = ".getBrowseBranchId())->setDec("money",$data['refund_amount']);
            $rst = D("WrkReceivables")->sendWXRefundMessage($id,$data['refund_amount'],date('Y-m-d',$data['refund_date']),$data['remark']);
            $this->ajaxReturn(array('code'=>0,'message'=>'退款处理成功'));
        } else {
            $receivables = M('WrkReceivables')->alias("a")
                ->join('LEFT JOIN wrk_agreement b ON b.id = a.contract_id')
                ->join('LEFT JOIN sys_branch c ON c.id = b.company_id')
                ->field("c.id as company_id,c.name as company_name,a.attach_group")
                ->where(['a.id' =>$id])
                ->find();

                $item = M("WrkReceivablesItem")
                ->field('id,receivable_date,receivables_amount,actual_date,actual_amount,status,begin_date,end_date,attach_group')
                ->where(['receivables_id' =>$id])
                ->select();
                $actual_amount = 0;
                foreach ($item as $k => $v) {
                    $actual_amount += $v['actual_amount'];
                }
                $advance = M("WrkReceivablesAdvance")
                ->field('id,pay_date,pay_amount,poundage,net_amount,attach_group')
                ->where(['receivables_id' =>$id])
                ->select();
                foreach ($advance as $k => $v) {
                    $actual_amount += $v['pay_amount'];
                }        

                $refund = M("WrkRefund")->alias('a')
                ->join('LEFT JOIN wrk_receivables_account b ON b.id = a.account_id')
                ->field('a.id,a.refund_date,a.refund_amount,a.attach_group,a.status')
                ->where(['a.receivables_id' =>$id])
                ->select();
                $refund_amount = 0;
                foreach ($refund as $k => $v) {
                    $refund_amount += $v['refund_amount'];
                }
                if ($actual_amount - $refund_amount < 0) {
                    $refund_max = 0;
                }else{
                    $refund_max = $actual_amount - $refund_amount;
                }
            $rst['refund_max'] = $refund_max; 
            $rst['id'] = $id;
            $rst['attach_group'] = $receivables['attach_group'];
            $rst['company_id'] = $receivables['company_id'];
            $rst['company_name'] = $receivables['company_name'];
            $this->assign('model',$rst);
            $this->display('refund');
        }
    }

    //逾期处理
    public function overdueAction($id = null) {
        if (IS_POST) {
            $amount = I('amount');
            $remark = I('content');
            D("WrkReceivables")->sendWXOverdueMessage($id,$amount,$remark);
			$this->createLog($id,"overdue");
            $intval = strtotime(date("Y-m-d")."+3 day") - strtotime(date("Y-m-d"));
            D('ESAdmin/SysMq')->add_timer($intval,WEB_ROOT."/ReqQueue/overdueByTimer/id/".$id);
            $this->ajaxReturn(array('code'=>0,'message'=>'发送成功'));
        } else {
            $condition['a.id'] = $id;
            $condition['b.status'] = array('neq',2);
            $condition['b.receivable_date'] = array('GT',strtotime(date('Y-m-d')));
            $list = M('WrkReceivables')->alias("a")
            ->join('LEFT JOIN wrk_receivables_item b ON b.receivables_id = a.id')
            ->field("a.id,b.receivables_amount,b.receivable_date,b.actual_amount,b.actual_date,b.status")
            ->where($condition)
            ->select();
            $sum = 0;
            foreach ($list as $k => $v) {
                $unpay_amount = $v['receivables_amount'] - $v['actual_amount'];
                $sum = $sum + $unpay_amount;
            }
            $rst['id'] = $id;
            $rst['amount'] = $sum;
            $this->assign('model',$rst);
            $this->display('overdue');
        }
    }

    //获取坏账记录
   	public function getBadDeptAction($id = null) {
        $badDept = M("WrkBadDept")->alias('a')
        ->join('LEFT JOIN wrk_receivables_account b ON b.id = a.account_id')
        ->field('a.id,a.bad_dept_date,a.bad_dept_amount,a.attach_group,a.status')
        ->where(['a.receivables_id' =>$id])
    	->find();
        if (!empty($badDept)) {
    	   $badDept['bad_dept_date'] = date('Y-m-d',$badDept['bad_dept_date']);
        }
    	$this->ajaxReturn($badDept);
    }

    //获取修改日志
    public function getSysLogAction($id = null) {
        $sysLog = M("SysLog")
            ->where(['content' =>$id,'func'=>CONTROLLER_NAME])
            ->order("create_time desc")
            ->select();
        foreach($sysLog as $k=>$v){
            $sysLog[$k]['create_time'] = date("Y-m-d H:i:s",$v['create_time']);

            switch ($v['operation']){
                case "add" :
                    $sysLog[$k]['operation'] = "新增收款计划";
                    break;
                case "edit":
                    $sysLog[$k]['operation'] = "修改收款计划";
                    break;
                case "overdue":
                    $sysLog[$k]['operation'] = "逾期处理";
                    break;
                // case "refund":
                //     $sysLog[$k]['operation'] = "退款";
                //     break;
                case "pay_confirm":
                     $sysLog[$k]['operation'] = "到款确认";
                     break;
                case "add_badDept":
                    $sysLog[$k]['operation'] = "生成坏账";
                    break;
                case "delete_badDept":
                    $sysLog[$k]['operation'] = "删除坏账";
                    break;
                default:
                    break;
            }
        }
        $this->ajaxReturn($sysLog);
    }

    //生成收款计划数据
   	public function generatorAction() {
   		$beginStr = I('beginStr');
   		$endStr = I('endStr');
   		$attr = I('attr');
   		$cycle = I('cycle');
   		$amount = I('amount');
   		$prohibit = [1,2,3,4,5,6,7];
   		switch ($cycle) {
   			case 'daily':
		 	$data = [
			    'inventory' => [
					['sn' =>1]
			    ],
			    'cycle' => $cycle,
			    'prohibit' => array_diff($prohibit,$attr)
			];
			break;
   			case 'weekly':
			$definition = ['d'=>$attr[0]];
		 	$data = [
			    'inventory' => [
					['sn' =>1,'definition'=>$definition]
			    ],
			    'cycle' => $cycle
			];
			break;
   			case 'monthly':
			$definition = ['d'=>$attr[0]];
		 	$data = [
			    'inventory' => [
					['sn' =>1,'definition'=>$definition]
			    ],
			    'cycle' => $cycle
			];
			break;
   			case 'quarterly':
			$definition = ['m'=>$attr[0],'d'=>$attr[1]];
		 	$data = [
			   'inventory' => [
			       ['sn' =>1,'definition'=>$definition]
			   ],
			   'cycle' => $cycle
			];
			break;
   			case 'yearly':
			$definition = ['m'=>$attr[0],'d'=>$attr[1]];
		 	$data = [
			   'inventory' => [
			       ['sn' =>1,'definition'=>$definition]
			   ],
			   'cycle' => $cycle
			];
			break;
   		}
		$rst = [];
		$result = [];
        $list = handlerTimeDistribution($beginStr,$endStr,$data);
        $length = count($list);
        $receivables_amount = floor($amount/$length);
        if (!empty($list)) {
	        foreach ($list as $k => $v) {
	        	$rst[$k]['receivable_date'] = $v['planned_at'];
	        	$rst[$k]['begin_date'] = "";
                $rst[$k]['end_date'] = "";
	        	if ($k+1 < $length) {
					$rst[$k]['receivables_amount'] = $receivables_amount;
	        	} else {
					$rst[$k]['receivables_amount'] = $amount - $k*$receivables_amount;
	        	}
	        }
        }
        $result['rows'] = $rst;
        $result['period_number'] = $length;
    	$this->ajaxReturn($result);
    }

    //新增收款任务弹窗
   	public function addReceivablesAction($contract_id) {
   		$wrkAgreement = M('wrk_agreement')->alias('a')
   		->join('LEFT JOIN sys_branch b ON b.id = a.company_id')
   		->join('LEFT JOIN sys_user c ON c.id = a.customer_leader_id')
        ->join('LEFT JOIN com_store d ON d.branch_id = a.branch_id')
		->field('a.id,a.company_id as company_id,b.name as company_name,a.agreement_sn,a.sys_sn,a.name,a.agreement_money,a.start_time,a.finish_time,c.name as customer_leader_id,a.branch_id,d.unline_card_number')
        ->where(['a.id' => $contract_id])
    	->find();
    	if (!empty($wrkAgreement)) {
    		$wrkAgreement['show_start_time'] = date('Y-m-d',$wrkAgreement['start_time']);
    		$wrkAgreement['show_finish_time'] = date('Y-m-d',$wrkAgreement['finish_time']);
    	}
        $wrkAgreement["customer_leader_name"] = $this->getCustomerleader('WrkReceivables',$wrkAgreement['company_id']);
    	$data["wrkAgreement"] = $wrkAgreement;
        
        $prompt = M("WrkPrompt")->where(['contract_id' => $contract_id])->find();
        if (!empty($prompt)) {
            $data["has_prompt"] = 1;
        } else {
            $data["has_prompt"] = 0;
        }
        
        $sysUser = M("SysUser")->where(['id'=>$this->_user_session->userId])->find();
        if (!empty($sysUser['staff_name'])) {
            $data["service_man_name"] = $sysUser['staff_name'];
        } else {
            $data["service_man_name"] = $sysUser['name'];
        }
        
        $data["leader_id"] = $this->_user_session->userId;
        $data['is_renew'] = 1;
        $data['attach_group'] = genUniqidKey();
    	$this->assign("model", $data);
		$this->display('edit');
    }

    protected function getCustomerleader($module,$company_id){
        $userData = D("WrkAgreement")->getCustomerUserData($module,$company_id);
        $str = '';
        foreach($userData as $k => $v) {
            if (empty($v['staff_name'])) {
                $str .= $v['name'].';';
            }else{
                $str .= $v['staff_name'].';';
            }
        }
        $str = rtrim($str,";");
        return $str;
    }

    public function paymentDetailsAction($id) {
        $data = M("WrkReceivables")->where(['id' => $id])->find();
        M("WrkReceivables")->where(['id' => $id])->save(['new_message'=>0]);
        $contract_id = $data['contract_id'];
        $condition = [];
        $condition["id"] = $contract_id;
        $wrkAgreement = M("WrkAgreement")->alias('a')
        ->join('LEFT JOIN sys_branch b ON b.id = a.company_id')
        ->join('LEFT JOIN sys_user c ON c.id = a.customer_leader_id')
        ->field('a.id,a.company_id,b.name as company_name,a.agreement_sn,a.sys_sn,a.name,a.agreement_money,a.start_time,a.finish_time,c.name as customer_leader_id,a.branch_id')
        ->where(['a.id' => $contract_id])
        ->find();
        if (!empty($wrkAgreement)) {
            $wrkAgreement['start_time'] = date('Y-m-d',$wrkAgreement['start_time']);
            $wrkAgreement['finish_time'] = date('Y-m-d',$wrkAgreement['finish_time']);
        }
        $data["wrkAgreement"] = $wrkAgreement;
        // $data["is_customer"] = $is_customer;
        $this->assign('model',$data);
        $this->display('paymentDetails');
    }

    // public function payByTimerAction($id,$receivables_item_id){
    //     D("WrkReceivables")->payByTimer($id,$receivables_item_id);
    // }



    //新增收款任务
    public function saveReceivablesAction() {
		$post_data = I('post.');
		$data = [];
		foreach ($post_data['data'] as $k => $v) {
			if ($v['name']=='visiblers'|| $v['name']=='collaborators') {
				$data[$v['name']][] = $v['value'];
			} else {
				$data[$v['name']] = $v['value'];
			}	
		}
		$record = $post_data['record'];
		$item = $post_data['item'];
		// $renew = $post_data['renew'];
        //验证
        $receivables_sum = 0;
        foreach ($item as $k => $v) {
            $receivables_sum += $item[$k]['receivables_amount'];
        }
        if (count($item) == 0 ) {
            $this->ajaxReturn(array('code'=>1,'message'=>'请至少创建一条应收计划'));
        }
        $advance_sum = 0;
        foreach ($record as $k => $v) {
            $advance_sum += $record[$k]['pay_amount'];
        }
        if (($receivables_sum + $advance_sum) != $data['agreement_money']) {
            $this->ajaxReturn(array('code'=>1,'message'=>'合同金额与应收款总额不相等'));
        }
        $data['is_renew'] = I('is_renew');
        $leader_id = $data['leader_id'];
        $visiblers = $data['visiblers'];
        $collaborators = $data['collaborators'];

		$data['visiblers'] = implode(",", $data['visiblers']);
        $data['collaborators'] = implode(",", $data['collaborators']);
        $data['new_message'] = 1;
		$this->_before_write(1, $data);
		$last_id = M('WrkReceivables')->add($data);
        D('WrkReceivables')
        ->updateAccesData('WrkReceivables',$last_id,$leader_id,$this->_user_session->currBranchId,$visiblers,$collaborators);

		$this->createLog($last_id,"add");

		foreach ($item as $k => $v) {
			$item[$k]['receivables_id'] = $last_id;
            if (!is_numeric($v['receivable_date'])) {
                strtotime($v['receivable_date']);
            }
            if (empty($v['begin_date'])) {
                $item[$k]['begin_date'] = null;
            }else{
                if (!is_numeric($v['begin_date'])) {
                    strtotime($v['begin_date']);
                }
            }
            if (empty($v['end_date'])){
                $item[$k]['end_date'] = null;
            }else{
                if (!is_numeric($v['end_date'])) {
                    strtotime($v['end_date']);
                }
            }
            if (empty($v['actual_date'])) {
                $item[$k]['actual_date'] = null;
            }
			$item[$k]['status'] = 0;
			$item[$k]['branch_id'] = $this->_user_session->currBranchId;
			// $item[$k]['attach_group'] = genUniqidKey();
            $item[$k]['attach_group'] = $data['attach_group'];
			$item[$k]['create_time'] = time();
		}
		M('wrkReceivablesItem')->addAll($item);
        D("WrkReceivables")->payByTimer($last_id,null);
        foreach ($record as $k => $v) {
            $record_data['receivables_id'] = $last_id;
            $record_data['account_id'] = $v['account_id'];
            $record_data['pay_date'] = $v['pay_date'];
            $record_data['pay_amount'] =  $v['pay_amount'];
            $record_data['poundage'] =  $v['poundage'];
            $record_data['net_amount'] =  $v['net_amount'];
            $record_data['offline_amount'] =  $v['net_amount'];
            $record_data['order_sn'] = getOrderNo("CIZ_");
            // $record_data['attach_group'] = $v['attach_group'];
            $record_data[$k]['attach_group'] = $data['attach_group'];
            $record_data['created_time'] = time();
            $record_data['updated_time'] = time();
            $record_data['branch_id'] = $this->_user_session->currBranchId;
            $record_id = M("WrkReceivablesAdvance")->add($record_data);
            // $this->pay($record_id);
            $recharge_data['company_id'] = $data['company_id'];
            $recharge_data['user_id'] = $this->_user_session->userId;
            $recharge_data['money_type'] = FIN_CIZ_RECHARGE;
            $recharge_data['order_sn'] = $record_data['order_sn'];
            $recharge_data['pay_name'] = '到款确认充值';
            $recharge_data['third_fee'] = $record_data['poundage'];
            $recharge_data['account'] = $record_data['pay_amount'];
            $recharge_data['creator_id'] = $this->_user_session->userId;
            $recharge_data['branch_id'] = $this->_user_session->currBranchId;
            $recharge_data['ctime'] = time();
            $recharge_data['source'] = FIN_RECEIVABLES_CONFIRMED;
            $recharge_data['pay_status'] = 1;
            $recharge_data['audit_time'] = time();
            $recharge_data['receivable_id'] =$record_data['account_id'];
            M("comRecharge")->add($recharge_data);
            $finance_data['fina_type'] = $recharge_data['source'];
            $finance_data['fina_cash'] = $record_data['pay_amount'];
            $finance_data['fina_time'] = $record_data['pay_date'];
            $finance_data['user_id'] = $recharge_data['user_id'];
            $finance_data['branch_id'] = $recharge_data['branch_id'];
            $finance_data['company_id'] = $recharge_data['company_id'];
            $finance_data['order_sn'] = $recharge_data['order_sn'];
            $finance_data['third_fee'] = $record_data['poundage'];
            $finance_data['receivable_id'] = $record_data['account_id'];
            $finance_data['title'] = '到款确认充值';
            M("ComFinance")->add($finance_data);
            //充值之后需要多一笔支出记录
            $finance_data_pay['fina_type'] = FIN_PROMPT_BALANCE_PAY;//缴费付款
            $finance_data_pay['fina_cash'] = $record_data['pay_amount'];
            //$finance_data_pay['fina_time'] = $record_data['pay_date'];
            $finance_data_pay['fina_time'] = time();
            $finance_data_pay['branch_id'] = $recharge_data['branch_id'];
            $finance_data_pay['company_id'] = $recharge_data['company_id'];
            $finance_data_pay['order_sn'] = getOrderNo("CIZ_");
            $finance_data_pay['third_fee'] = 0;
            $finance_data_pay['receivable_id'] = $record_data['account_id'];
            $finance_data_pay['title'] = '客户余额消费';
            M("ComFinance")->add($finance_data_pay);
        }
        $this->ajaxReturn(array('code'=>0,'message'=>'新增收款计划成功'));
	}
    //编辑收款任务
    public function editReceivablesAction($id,$type = null) {
        $post_data = I('post.');
        $data = [];
        foreach ($post_data['data'] as $k => $v) {
            if ($v['name']=='visiblers' || $v['name']=='collaborators') {
                $data[$v['name']][] = $v['value'];
            } else {
                $data[$v['name']] = $v['value'];
            }   
        }
        $item = $post_data['item'];
        //验证
        $is_reset_data = I('is_reset_data');
        if ($is_reset_data == 1) {
            $advance = M('WrkReceivablesAdvance')->where(['receivables_id'=>$id])->select();
            $advance_sum = 0;
            foreach ($advance as $k => $v) {
                $advance_sum += (float)$advance[$k]['pay_amount'];
            }
            $record = M('WrkReceivablesRecord')->where(['receivables_id'=>$id])->select();
            $record_sum = 0;
            foreach ($record as $k => $v) {
                $record_sum += (float)$record[$k]['pay_amount'];
            }
            $receivables_sum = 0;
            foreach ($item as $k => $v) {
                $receivables_sum += $item[$k]['receivables_amount'];
            }
            if (( (float)$receivables_sum + (float)$advance_sum + (float)$record_sum) < $data['agreement_money']) {
                $this->ajaxReturn(array('code'=>1,'message'=>'应收款总额与已付数据之和小于合同金额'));
            }
            if (( (float)$receivables_sum + (float)$advance_sum + (float)$record_sum) > $data['agreement_money']) {
                $this->ajaxReturn(array('code'=>2,'message'=>'应收款总额与已付数据之和超出合同金额'));
            }
        }
        $data['is_renew'] = I('is_renew');

        $leader_id = $data['leader_id'];
        $visiblers = $data['visiblers'];
        $collaborators = $data['collaborators'];

        $data['visiblers'] = implode(",", $data['visiblers']);
        $data['collaborators'] = implode(",", $data['collaborators']);

        $this->_before_write(1, $data);
        $condition['id'] = $id;
        $condition['branch_id'] = $this->_user_session->currBranchId;
        M('WrkReceivables')->where($condition)->save($data);
        D('WrkReceivables')
        ->updateAccesData('WrkReceivables',$id,$leader_id,$this->_user_session->currBranchId,$visiblers,$collaborators);

		if ($type == 1) {
            $this->createLog($id,"edit");
        }

        if ($is_reset_data == 1) {
            $ids = [];
            $receivablesItem = M("WrkReceivablesItem")
            ->where(['receivables_id' =>$id])
            ->select();
            foreach ($receivablesItem as $k => $v) {
                array_push($ids,$v['id']);
            }
            $condition = [];
            if (!empty($ids)) {
                $condition['id'] = array('in',$ids);
                M('WrkReceivablesItem')->where($condition)->delete();
            }
            foreach ($item as $k => $v) {
                $item[$k]['receivables_id'] = $id;
                if (empty($v['begin_date'])) {
                    $item[$k]['begin_date'] = null;
                }
                if (empty($v['end_date'])){
                    $item[$k]['end_date'] = null;
                }
                if (empty($v['actual_date'])) {
                    $item[$k]['actual_date'] = null;
                }
                $item[$k]['branch_id'] = $this->_user_session->currBranchId;
                $item[$k]['status'] = 0;
                $item[$k]['create_time'] = time();
            }
            M('WrkReceivablesItem')->addAll($item);
            //重置数据后删除对应催款计划
            $prompt = M("WrkPrompt")->where(['contract_id' => $data['contract_id'] ])->find();
            if (!empty($prompt)) {
                $promptItemIds = M("WrkPromptItem")->where(['prompt_id' => $prompt['id'] ])->getField('id',true);
                M("WrkPromptDate")->where(['prompt_item_id' => array('in',$promptItemIds)])->delete();
                M("WrkPromptItem")->where(['id' => array('in',$promptItemIds)])->delete();
                M("WrkPrompt")->where(['id' => $prompt['id'] ])->delete();
            }
        }
        $r = D("WrkReceivables")->payByTimer($id,null);
        $this->ajaxReturn(array('code'=>0,'message'=>'编辑收款计划成功'));
    }
    
    public function ajaxAction($branch_id = null) {
    	$this->assign("branch_id", $branch_id);
    	$this->display('ajax');
    }

    public function customerListAction($branch_id = null) {
    	$str = I("q");
    	$condition = [];
    	if (!empty($str)) {
            $where['a.name']  = array('like', '%'.$str.'%');
            $where['a.querykey']  = array('like', '%'.$str.'%');
            $where['_logic'] = 'or';
            $condition['_complex'] = $where;
    	}
    	if (!empty($branch_id)) {
        	$condition["b.branch_id"] = $branch_id;
        }
        $list = D('SysUser')
        ->alias('a')
        ->join('LEFT JOIN sys_user_branch b ON b.user_id = a.id')
        ->field("id as value,name as text,id,name")
        ->where($condition)
        ->select();
        $this->ajaxReturn($list);
    }

    public function staffListAction() {
    	$str = I("q");
    	$condition = [];
    	if (!empty($str)) {
            $where['name']  = array('like', '%'.$str.'%');
            $where['querykey']  = array('like', '%'.$str.'%');
            $where['_logic'] = 'or';
            $condition['_complex'] = $where;
    	}
        $condition["branch_id"] = $this->_user_session->currBranchId;
        $condition["user_type"] = USER_TYPE_COMPANY_MANAGER;
        $list = D('SysUser')
        ->field("id as value,name as text,id,name")
        ->where($condition)
        ->select();
        $this->ajaxReturn($list);
    }

    // public function testAction($id) {
    //     $list = D('wrkReceivables')->getOpenId($id);
    //     $this->ajaxReturn($list);
    // }

    public function companyListAction() {
    	$str = I("q");
    	$condition = [];
    	if (!empty($str)) {
            $where['name']  = array('like', '%'.$str.'%');
            $where['querykey']  = array('like', '%'.$str.'%');
            $where['_logic'] = 'or';
            $condition['_complex'] = $where;
    	}
		$condition["parent_id"] = $this->_user_session->currBranchId;
		$condition["type"] = array("neq",2);
        $list = M('SysBranch')
        ->field("id as value,name as text,id,name")
        ->where($condition)
        ->select();
        $this->ajaxReturn($list);
    }
    public function agreementListAction() {
    	$str = I("q");
    	$condition = [];
    	if (!empty($str)) {
    		$condition["name"] = array("like",'%'.$str.'%');
    	}
		$condition["branch_id"] = $this->_user_session->currBranchId;
        $list = D('wrkAgreement')
        ->field("id as value,name as text,id,name")
        ->where($condition)
        ->select();
        $this->ajaxReturn($list);
    }
    public function accountListAction() {
    	$condition = [];
    	$condition["status"] = 1;
		$condition["branch_id"] = $this->_user_session->currBranchId;
        $list = D('wrkReceivablesAccount')
        ->field("id as value,name as text,id,name")
        ->where($condition)
        ->select();
        $this->ajaxReturn($list);
    }
}