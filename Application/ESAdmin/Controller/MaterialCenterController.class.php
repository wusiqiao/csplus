<?php
/**
 * @auhor kcg
 * */
namespace ESAdmin\Controller;

use Common\Lib\Controller\DataController;
use ESAdmin\Model\MaterialCenterModel;

/**
 *图文中心
 * */
class MaterialCenterController extends DataController{
    const CONTENT_MAX = 500000; //控制文本字符长度

    public function indexAction(){
        $this->assignPermissions();
        $template = 'index';
        if (false == $this->isAdmin()) {
            $template = 'client';
        }

        $this->display($template);
    }
    public function _parsefilter(&$filter){
        parent::_parsefilter($filter); // TODO: Change the autogenerated stub
        $shelfTime = intval(I('post.shelf_time'));
        if (false == $this->isAdmin()) {
            $filter['a.shelf_status'] = MaterialCenterModel::STATUS_20;
        }

        if (!isset($filter['a.source'])) {
            $filter['a.source'] = MaterialCenterModel::SOURCE_10;
        }

        if ($shelfTime > 0) {
            $filter['a.shelf_time'] = ['gt', time() - ($shelfTime * 24 * 60 * 60)];
        }
    }
    public function listAction(){
        $page_index = I("page/d", 1);
        $page_size = I("rows/d", 1024);
        $_order = array();
        $this->_parseOrder($_order);
        $_filter = array();
        $this->_parseFilter($_filter);
        if ($this->hasRelationCondition($_filter)) { //条件中是否有关联表的查询字段，关联字段查询格式为 q-b*xxx(q:查询模式，b管理部的别名,xxx关联表字段
            $count = D(CONTROLLER_NAME)->where($_filter)->count();
        } else {
            $count = D(CONTROLLER_NAME)->alias('a')->relation(true)->where($_filter)->count();
        }

        $list = D(CONTROLLER_NAME)
            ->alias('a')->relation(true)
            ->where($_filter)->page($page_index, $page_size)
            ->field('a.id,a.title,a.digest,a.cover_url,a.author,a.link,a.w_subscript,a.label_id,a.shelf_status,a.source,a.create_time,a.shelf_time,a.is_toll')
            ->order($_order)->select();
        $this->_before_list($list);
        $result["total"] = $count;
        $result["rows"] = $list;
        header('Content-Type:application/json; charset=utf-8');
        exit(json_encode($result));
    }
    /**
     * 资源上架
     * */
    public function shelfAction($id){
        $model = D(CONTROLLER_NAME);
        $data = $model->where(['id' => $id])->find();
        if(empty($data)){
            return $this->responseJSON(buildMessage('数据不存在!', 1));
        }
        if(empty($data['cover_url'])){
            return $this->responseJSON(buildMessage('请上传封面!', 1));
        }
        if (!$model->shelf($id)) {
            return $this->responseJSON(buildMessage('上架失败', 1));
        }

        return $this->responseJSON(buildMessage('上架成功', 0));
    }

    /**
     * 资源下架
     * */
    public function lowerShelfAction($id){
        $model = D(CONTROLLER_NAME);
        if (!$model->lowerShelf($id)) {
            return $this->responseJSON(buildMessage('上架失败', 1));
        }

        return $this->responseJSON(buildMessage('上架成功', 0));
    }
    /**
     * @var 显示处理防盗链
     * @param string $src
     * */
    public function batchAction($ids, $action = 'lower'){
        if(!$this->isAdmin()){
            return $this->responseJSON(buildMessage('账户权限不足!', 1));
        }

        $ids = explode(',', $ids);
        if(count($ids) == 0){
            return $this->responseJSON(buildMessage('请选择要操作的文章!', 1));
        }

        if(!D(CONTROLLER_NAME)->batchShelfOrlower($ids, $action)){
            return $this->responseJSON(buildMessage('操作失败', 1));
        }

        return $this->responseJSON(buildMessage('操作成功', 0));
    }
    /**
     * @var 显示处理防盗链
     * @param string $src
     * */
    public function imgAction($src = ''){
        $data = I('get.');
        unset($data['src']);
        foreach ($data as $key => $val){
            $src .= '&' . $key . '=' . $val;
        }

        if(! empty($src)){
            $fileSuffix = '.' . substr(strrchr($src, '='), 1);
            $fileSuffix .= ($fileSuffix == '.' ? 'png' : '');
            $path = MaterialCenterModel::FILE_PATH . md5($src) . $fileSuffix;
            if(file_exists($path)){
                echo file_get_contents($path);
                die;
            }

            $path =  MaterialCenterModel::FILE_PATH . md5($src) . '.gif';
            if(file_exists($path)){
                echo file_get_contents($path);
                die;
            }

            $path =  MaterialCenterModel::FILE_PATH . md5($src) . '.jpg';
            if(file_exists($path)){
                echo file_get_contents($path);
                die;
            }

            $path =  MaterialCenterModel::FILE_PATH . md5($src) . '.jpeg';
            if(file_exists($path)){
                echo file_get_contents($path);
                die;
            }

            $path =  MaterialCenterModel::FILE_PATH . md5($src) . '.png';
            if(file_exists($path)){
                echo file_get_contents($path);
                die;
            }

            echo file_get_contents($src);
        }
        die;
    }

    public function createAction(){
        return $this->display('create');
    }
    public function getContentAction($id){
        $model = new MaterialCenterModel();
        $content = $model->where(['id' => $id])->getField('content');
        $content = $model->localImgShow($content);
        $this->responseJSON(buildMessage($content,  0));
        die;
    }
    public function getDetailAction($id){
        $model = new MaterialCenterModel();
        $data = $model->where(['id' => $id])->find();
        $data['content'] = $model->localImgShow( $data['content']);
        $this->responseJSON(buildMessage($data,  0));
        die;
    }
//    public function _before_list(&$list){
//        //非管理账户，添加账户
//        foreach ($list as $key => $value) {
//            $list[$key]['usedTime'] = null;
//            $list[$key]['isUsed'] = 0;
//            $list[$key]['content'] = (new MaterialCenterModel())->localImgShow($list[$key]['content']);
//        }
//    }

    protected function _before_write($type, &$data){
        $data['content'] = trim($_POST['content']);
        if ($this->utf8_strlen($data['content']) > self::CONTENT_MAX) {
            return $this->ajaxReturn(['code' => 1, 'message' => '样式加文本过大']);
        }

        $data['create_time'] = time();
        $this->isOperateAuthor();
        $errorMsg = '';
        if (empty($data['title'])) {
            $errorMsg .= '请输入标题';
        }

        if (empty($data['content'])) {
            $errorMsg .= '请输入文章内容';
        }

        if (empty($data['cover_url'])) {
            $errorMsg .= '请输入文章内容';
        }

        if (strlen($data['cover_url']) > 256) {
            return $this->ajaxReturn(['code' => 1, 'message' => '封面图片地址异常!']);
        }
        if ($this->utf8_strlen($data['digest']) > 64) {
            return $this->ajaxReturn(['code' => 1, 'message' => '摘要最多64个字']);
        }
        if ($this->utf8_strlen($data['author']) > 50) {
            return $this->ajaxReturn(['code' => 1, 'message' => '作者名称过长']);
        }
        if ($this->utf8_strlen($data['title']) > 64) {
            return $this->ajaxReturn(['code' => 1, 'message' => '标题过长']);
        }
        if (strlen($data['link']) > 256) {
            return $this->ajaxReturn(['code' => 1, 'message' => '原文链接过长']);
        }
        if ($this->utf8_strlen($data['w_subscript']) > 256) {
            return $this->ajaxReturn(['code' => 1, 'message' => '公众号名称过长']);
        }

        if (!empty($data['link'])) {
            if (strpos($data['link'], 'http') !== 0) {
                $errorMsg = '原文链接请以http:// 或者 https://开头';
            }
        }

        if ($errorMsg) {
            $this->responseJSON(buildMessage($errorMsg, 1));
            die;
        }

        $model = new MaterialCenterModel();
        $data['content'] = $model->cleanlocalImgShow($data['content']);
        parent::_before_write($type, $data);
    }
    protected function _parseOrder(&$order){
        $order = 'a.shelf_time DESC';
    }
    private function utf8_strlen($string = null){
        // 将字符串分解为单元
        preg_match_all("/./us", $string, $match);
        // 返回单元个数
        return count($match[0]);
    }
    protected function _before_delete($id){
        $this->isOperateAuthor();
        parent::_before_delete($id);
    }
    //添加权限验证 -- 不是ADMIN 禁止操作
    private function isOperateAuthor(){
        if (false == $this->isAdmin()) {
            $this->responseJSON(buildMessage('权限不足', 1));
            die;
        }
    }
    private function isAdmin(){
        return $this->_user_session->isAdmin;
    }
}