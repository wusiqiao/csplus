<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/3/5
 * Time: 14:43
 */

namespace ESAdmin\Controller;


use Common\Lib\Controller\DataController;

class ComStoreController extends DataController
{
    public function indexAction() {
        $this->assignPermissions(); //权限设置
        if ($this->_user_session->userType == USER_TYPE_COMPANY_MANAGER) {
            $model = D("ComStore")->where("branch_id=" . $this->_user_session->currBranchId)->find();

            if($model['tool_manager'] == 'all'){
                $tool_idall = $this->getToolListSingleId();
                $model['tool_manager'] = implode(',',$tool_idall);
            }

            define("__FORM_ACTION__", empty($model)?"add":"update");
            $this->_before_view($model);
            $this->assign("model", $model);
        }
        $this->display();
    }

    public function ToolNameListAction(){
        $tool = D('ComStore')->toolList();
        $data = array();
        foreach ($tool as $key => $val) {
            $data[] = ['value'=>$key,'text'=> $val];
        }
        $this->ajaxReturn($data);
    }
    protected function getToolListSingleId(){
        $tool = D('ComStore')->toolList();
        $data = array();
        foreach ($tool as $key => $val) {
            $data[] = $key;
        }
        return $data;
    }

    protected function _before_write($type, &$data)
    {
        if (self::ACTION_ADD == $type){
            $data['created_at'] = time(); 
        }
        if (empty($data['map_address'])) {
            $data['map_location']=null;
        }
        $data['updated_at'] = time();
        $this->HandleSaveRegion($data);

        implode($data['tool_manager']);
        parent::_before_write($type, $data); // TODO: Change the autogenerated stub
    }
    //渲染页面之前,整理数据
    protected function _before_view(&$data){
        if(empty($data)){
            $data['branch_id'] = $this->_user_session->currBranchId;
        }
        if(is_array($data) && !empty($data)){
            $data['store_city'] = $data['district'] > 0 ? $data['district'] : $data['city'];
        }
       // $this->getStoreCategorys($data);

    }
    //保存后 类型处理
    protected function HandleSaveCategory($data){
        D(CONTROLLER_NAME)->SetSaveCategory($data);
    }
    //保存前 地区处理
    protected function HandleSaveRegion(&$data){
        D(CONTROLLER_NAME)->SetSaveRegion($data);
    }
//    //获取所有的store_categorys
//    protected function getStoreCategorys(&$data){
//        if($data['id'] > 0) {
//            $data['categorys'] = json_encode(D(CONTROLLER_NAME)->HandleGetStoreCategorys($data));
//        }
//    }
    public function getCityTreeAction(){
        $cid = I('get.cid');
        $city_tree = D(CONTROLLER_NAME)->getCityTreeList($cid);
        $this->responseJSON($city_tree);
    }
    public function getCateTreeAction(){
        $cid = I('get.cid');
        $cate_tree = D(CONTROLLER_NAME)->getCateTreeList($cid);
        $this->responseJSON($cate_tree);
    }
    
        //新增，更新后返回数据，一般返回全部，特殊需要处理的就是有大数据字段，没必要返回
    protected function _getLastData($id) {
        return D(CONTROLLER_NAME)->field("remark", true)->where("id=$id")->find();
    }
    public function getLogoAction(){
        $comStore = M("ComStore")->where(['branch_id'=>$this->_user_session->currBranchId ])->find();
        $this->ajaxReturn(array('logo_img' => $comStore["default_header_pic"], 'message'));
    }
}