<?php
/**
 * @auhor kcg
 * */
namespace ESAdmin\Controller;

use Common\Lib\Controller\DataController;
use ESAdmin\Model\VoteActivityModel;
use ESAdmin\Model\VoteParticipantModel;

/**
 *投票管理
 * */
class VoteParticipantController extends DataController{
    public function indexAction($id = null){
        cookie('activity_id', intval($id));
        $this->assign('activity', VoteActivityModel::findById($id));
        parent::indexAction(); // TODO: Change the autogenerated stub
    }

    public function reviewStatusAction($id){
        if(!$id || !($participant = VoteParticipantModel::findById($id))){
            return $this->ajaxError('选手丢失了!');
        }

        $activity = VoteActivityModel::findById($participant['activity_id']);
        if($activity['end_time'] < time()){
            return $this->ajaxError('活动已结束!');
        }

        if($activity['status'] == 20){
            return $this->ajaxError('活动暂停中');
        }

        if(! VoteParticipantModel::Approved($id)){
            return $this->ajaxError('审核失败!');
        }

        return $this->ajaxReturn(['code' => 0, 'message' => '审核成功']);
    }

    protected function _getDetailData($id) {
        $record = [];
        if ($id && $_COOKIE['activity_id']){
            $condition["id"] = $id;
            $condition['activity_id'] = $_COOKIE['activity_id'];
            $record = D(CONTROLLER_NAME)->where($condition)->find();
        }
        $this->_before_detail($record);
        return $record;
    }

    protected function _before_write($type, &$data){
        $data['update_time'] = time();
        $data['name'] OR $this->ajaxError('请输入报名名称！');
        $data['cover_pic'] OR $this->ajaxError('请上传封面！');
        $data['contact_name'] OR $this->ajaxError('请输入联系人！');
        $data['contact_tel'] OR $this->ajaxError('请输入联系电话！');
        $data['details_pic'] = implode(',', $data['details_pic'] ? $data['details_pic'] : []);
        if($type == self::ACTION_ADD){
            $data['activity_id'] = $_COOKIE['activity_id'];
            $vote = VoteActivityModel::addParticipantTotal($data['activity_id']);
            if(!is_array($vote)){
                return $this->ajaxError($vote);
            }

            $data['status'] = $vote['review'];
            $data['create_date'] = date('Y-m-d H:i:s');
            $data['mini_user_id'] = 0;
            $data['branch_id'] = getBrowseBranchId();
        }
    }

    public function addAction(){
        $activity_id = $_COOKIE['activity_id'];
        if($activity_id < 1){
            exit('活动丢失!');
        }

        $activity = VoteActivityModel::findById($activity_id);
        if($activity['end_time'] < time()){
            exit('活动已结束!');
        }

        if($activity['status'] == 20){
            exit('活动暂停中');
        }

        parent::addAction(); // TODO: Change the autogenerated stub
    }

    public function listAction() {
        $page_index = I("page/d", 1);
        $page_size = I("rows/d", 1024);
        $_filter = [];
        $_order = [];
        $this->_parsefilter($_filter);
        $count = D(CONTROLLER_NAME)->where($_filter)->count();
        $list = D(CONTROLLER_NAME)->where($_filter)->page($page_index, $page_size)->order($_order)->select();
        $this->_before_list($list);
        $result["total"] = $count;
        $result["rows"] = $list;
        header('Content-Type:application/json; charset=utf-8');
        exit(json_encode($result));
    }

    protected function _parsefilter(&$_filter){
        $_filter['activity_id'] = I('get.activity_id', $_COOKIE['activity_id']);
        $name = I('name');
        if($name){
            $_filter['name'] = ['like', '%' . $name > '%'];
        }
    }

    protected function ajaxError($msg){
       return $this->ajaxReturn(['code' => 1, 'message' => $msg]);
    }
}