<?php

namespace ESAdmin\Controller;

use Org\Util\Strings;
use Think\Exception;
use Common\Lib\Controller\ComplexDataController;//BranchBaseController

class ComCompanyController extends ComplexDataController
{
    public function indexAction()
    {
        $permissions = [];
        $menuList = $this->_user_session->permissionList[ACCESS_MENUS_KEY];
        if ($menuList[$this->_permission_name] && ($this->_user_session->isAdmin || $menuList[$this->_permission_name]["allow"])) {
            $permissions = $menuList["WrkAgreement"][ACCESS_MENU_ACTIONS_KEY];
        }
        $this->assign("WrkAgreement",$permissions);
        $this->assign("menu_id",$menuList['WrkAgreement']['id']);
        $this->assign("menu_parent_id",$menuList['WrkAgreement']['parent_id']);
        parent::indexAction(); // TODO: Change the autogenerated stub
    }

    protected $storage = [];
    protected $branch_information = [];

    public function _parseFilter(&$filter){
        parent::_parseFilter($filter);
        if(I("post.create_time") != ""){
            $date = D("WrkInvoicePlan")->getQdrDate(I("post.create_time"));
            $filter['a.create_time'] = array(array("egt",$date['begin']),array("elt",$date['end']));
        }
        if(I("post.keyword") != ""){
            $keyword = I("post.keyword");
            $where['a.name'] = array("like","%$keyword%");
            $where['a.linkman'] = array("like","%$keyword%");
            $where['a.contact'] = array("like","%$keyword%");
            $where['_logic'] = "or";
            $filter['_string'] = "a.name like '%$keyword%' or a.linkman like '%$keyword%' or a.contact like '%$keyword%'";
        }
        if(I("post.is_bind") != ""){
            $filter['a.customer_leader_id'] = I("post.is_bind") == 1 ? array("gt",0) : array(array("elt",0),array("exp","IS NULL"),"or");
        }
        //默认状态为未归档
        if(I("post.q-is_valid") == ""){
            $filter['a.is_valid'] = 1;
        }
    }

    protected function _parseOrder(&$order) {
        parent::_parseOrder($order);
        $order = "create_time desc";
    }

    public function showDominantFormAction()
    {
        $this->display();
    }

    public function _before_list(&$list){
        parent::_before_list($list);
        rsort($list);
        foreach ($list as $k=>$v){
            if($v['tag_origin']){
                $list[$k]['tag_origin_value'] = M("ComCompanyTag")->where("id = ".$v['tag_origin'])->getField("value");
            }
            $list[$k]['agreement_count'] = M("WrkAgreement a")->join("INNER join wrk_invoice_plan b on a.id = b.agreement_id")->where("a.company_id = ".$v['id'])->count();
            if(!$v['leader_staff_name']){
                $list[$k]['leader_staff_name'] = $v['leader_name'];
            }
        }
    }

    public function service_manListAction(){
        $str = I('q');
        $condition = [];
        if (!empty($str)) {
            $where['u.name']  = array('like', '%'.$str.'%');
            $where['u.querykey']  = array('like', '%'.$str.'%');
            $where['_logic'] = 'or';
            $condition['_complex'] = $where;
        }
        $condition['branch.id'] = I('get.id');
        $condition['branch.type'] = array('neq',2);
        $condition['branch.parent_id'] = getBrowseBranchId();
        $condition['u.branch_id'] = $this->_user_session->currBranchId;
        $customer_data = M('SysUser')->alias('u')
                        ->field("u.id,u.name,u.querykey")
                        ->join('sys_user_branch as urt on urt.user_id = u.id')
                        ->join('sys_branch as branch on branch.id = urt.branch_id')
                        ->where($condition)
                        ->select();
        $this->ajaxReturn($customer_data);
    }
    public function addDominantAction()
    {
        if (IS_POST) {
            set_time_limit(0);
            if (!empty($_FILES)) {
                $this->loading(0, '开始');
                $this->loading(10, '正在载入上传文件');
                $uploader = getUploader("dominant/", array('xls', 'xlsx'));
                $info = $uploader->uploadOne($_FILES["file"]);
                if (!info) {
                    $this->loading(100, '上传文件载入失败', 1);
                    $message = buildMessage($uploader->getError(), 1);
                } else {
                    $this->loading(20, '上传文件载入成功');
                    $filePath = ltrim($uploader->rootPath, ".") . $info['savepath'] . $info['savename'];
                    $message = $this->importDominantform($filePath);
                    unset($uploader);
                }
                $this->loading(100, '导入成功!!');
                $this->responseJSON($message);
            } else {
                $this->loading(100, '文件不能为空', 1);
                $this->responseJSON(buildMessage("文件不能为空！", 1));
            }
        }
    }

    public function showExportDominantAction()
    {
        if (IS_GET) {
            $this->dominants = $this->getMatchingRespondData();
            $this->display();
        } else {
            $data = I('post.item');
            if (empty($data) || count($data) == 0) {
                $this->responseJSON(buildMessage("请至少选择一项！", 1));
                //return $result['message'] = 1;
                die;
            }
            session('dominant_' . $this->_user_session->userId, $data);
            $this->responseJSON(buildMessage("正在导出！", 0));
        }
    }

    public function downloadImportFileAction()
    {
        $url = I("get.url");
        $file_url = $url;
        $out_filename = '档案资料导入模板.xlsx';
        $filePath = realpath("./") . $file_url;
        if (!file_exists($filePath)) {
            return array('error' => 1, 'message' => '导入数据的模板文件不存在!!');
        } else {
            header('Accept-Ranges: bytes');
            header('Accept-Length: ' . filesize($filePath));
            header('Content-Transfer-Encoding: binary');
            header('Content-type: application/octet-stream');
            header('Content-Disposition: attachment; filename=' . $out_filename);
            header('Content-Type: application/octet-stream; name=' . $out_filename);
            if (is_file($filePath) && is_readable($filePath)) {
                $file = fopen($filePath, "r");
                echo fread($file, filesize($filePath));
                fclose($file);
            }
        }
    }


    public function exportDominantAction()
    {
        if (IS_GET) {
            set_time_limit(0);
            $filePath = ltrim(MODULE_UPLOAD_PATH, ".") . 'dominant/' . 'default.xls';
            $filePath = realpath("./") . $filePath;
            if (!file_exists($filePath)) {
                return array('error' => 1, 'message' => '导出数据的模板文件不存在!!');
                die;
            }
            //载入PHPExcel类型
            vendor('PHPExcel18.PHPExcel');
            $objectReader = \PHPExcel_IOFactory::createReaderForFile($filePath);
            $objPHPExcel = $objectReader->load($filePath);
            $matching = $this->getMatchingRespondData();
            if (isset($_SESSION['dominant_' . $this->_user_session->userId])) {
                //筛选出来
                foreach ($matching as $key => $value) {
                    if (!in_array($value['value'], $_SESSION['dominant_' . $this->_user_session->userId])) {
                        unset($matching[$key]);
                    }
                }
                unset($_SESSION['dominant_' . $this->_user_session->userId]);
            }
            if ($matching) {
                //获取公司数据
                $companys = D(CONTROLLER_NAME)->getCompanys();
                $startK = 'A';
                foreach ($matching as $key => $val) {
                    $cell = $this->getExcelColumnChar(ord($startK) + $key, true);
                    $this->storage[$cell] = $val;
                    $objPHPExcel->getActiveSheet()->setCellValue($cell . '1', $val['text']);
                }
                //设置为第一个sheet
                $objPHPExcel->setActiveSheetIndex(0);
                //写入
                $row = 3;
                foreach ($companys as $key => $val) {
                    foreach ($this->storage as $k => $v) {
                        $objPHPExcel->getActiveSheet()->setCellValue($k . $row, $val[$v['value']]);
                    }
                    $row++;
                }
                //进行写入操作
                $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
                //处理中文字符串及IE浏览器
                $file = $this->convertFromUTF8($filePath);
                //引入头
                $this->setExcelHeader($file);
                $objWriter->save('php://output');
                unset($objWriter);
                unset($objPHPExcel);
            }

        }
    }

    public function importDominantform($excel_file)
    {
        $filePath = realpath("./") . $excel_file;
        if (!file_exists($filePath)) {
            return array('error' => 1, 'message' => '文件不存在!!');
            die;
        }
        $this->loading(40, '开始对上传文件进行数据处理');
        //载入PHPExcel类型
        vendor('PHPExcel18.PHPExcel');
        $objectReader = \PHPExcel_IOFactory::createReaderForFile($filePath);
        $objPHPExcel = $objectReader->load($filePath);
        $currentSheet = $objPHPExcel->getSheet(0);
        $this->handlerSheetData($currentSheet);
        if (empty($this->storage)) {
            $this->loading(100, '导入失败,没有所需数据!!', 1);
            return array('error' => 1, 'message' => '导入失败,没有所需数据!!');
            die;
        } else {
            //整理
            //$this->handlerArrangement($this->storage);
            //去重
            $this->storage = $this->array_unique_fb($this->storage);
            if (empty($this->storage['companys'])) {
                $this->loading(100, '导入失败,文件中找不到数据,请下载模板后进行导入!!', 1);
                return array('error' => 1, 'message' => '导入失败,文件中找不到数据,请下载模板后进行导入!!');
                die;
            }
            $this->loading(50, '获取到导入数据,共' . count($this->storage['companys']) . '条可用数据!!');
            //增加项 修改项
            $append_companys = [];
            $edit_companys = [];
            $old_companys = D(CONTROLLER_NAME)->getCompanyListsByName();
            $number = 0;
            if ($old_companys) {
                foreach ($old_companys as $key => $val) {
                    if (in_array($val['name'], $this->storage['company_names'])) {
                        if($val['invoice_title'] == ""){
                            $temp_edit['invoice_title'] = $val['name'];
                        }
                        $temp_edit = $this->storage['companys'][array_search($val['name'], $this->storage['company_names'])];
                        $this->handlerCompanyTag($temp_edit);
                        $temp_edit['id'] = $val['id'];
                        $temp_edit['update_time'] = time();
                        $edit_companys[] = $temp_edit;
                        $number++;
                        $result = M('sysBranch')->save($temp_edit);
                        //获取自定义字段并添加
                        $custom_information = $this->branch_information[array_search($val['name'], $this->storage['company_names'])];
                        $this->handlerCustomInformation($custom_information,$val['id']);
                        unset($this->storage['companys'][array_search($val['name'], $this->storage['company_names'])]);
                        unset($this->branch_information[array_search($val['name'], $this->storage['company_names'])]);
                        $this->loading((50 + intval($number / count($this->storage['companys']))), '正在导入数据,' . $number . '/' . count($this->storage['companys']) . '数据!!');
                    }
                }
            }
            if ($this->storage['companys']) {
                foreach ($this->storage['companys'] as $key => $val) {
                    $this->handlerCompanyTag($val);
                    $temp_add = $val;
                    $temp_add['leader_id'] = $this->_user_session->userId;
                    $temp_add['attach_group'] = genUniqidKey();
                    if($val['invoice_title'] == ""){
                        $temp_add['invoice_title'] = $val['name'];
                    }
                    $temp_add['parent_id'] = getBrowseBranchId();
                    $temp_add['type'] = ORG_COMPANY;
                    $temp_add['is_valid'] = 1;
                    $temp_add['branch_id'] = getBrowseBranchId();
                    $temp_add['update_time'] = time();
                    $temp_add["querykey"] = firstPinyin($temp_add["name"]);
                    $temp_add['creater_id'] = $this->_user_session->userId;
                    $temp_add['create_time'] = time();
                    $this->handlerBeforeInsert($temp_add);
                    $append_companys[] = $temp_add;
                    $this->loading((50 + intval(($number / count($this->storage['companys']) * 50))), '正在导入数据,' . $number . '/' . count($this->storage['companys']) . '数据!!');
                }
                foreach ($append_companys as $k=>$v){
                    $result = M("SysBranch")->add($v);
                    $this->handlerAddModuleSetting($result);
                    $this->addLog($result);
                    //获取自定义字段并添加
                    $custom_information = $this->branch_information[array_search($v['name'], $this->storage['company_names'])];
                    $this->handlerCustomInformation($custom_information,$result);
                    unset($this->branch_information[array_search($v['name'], $this->storage['company_names'])]);
                    unset($this->storage["companys"][array_search($v['name'], $this->storage['company_names'])]);
                    if(!$result){
                        break;
                    }
                }
                //$result = M('SysBranch')->addAll($append_companys,null,true);
                if ($result) {
                    $this->handlerAfterInsert(['parent_id' => getBrowseBranchId(), 'count' => count($append_companys)]);
                } else {
                    return array('error' => 1, 'message' => '导入失败,数据出错!!');
                }
            }
            return array('error' => 0, 'message' => '导入成功!!');
        }
    }

    //导入客户档案生成文件负责人到sys_user_module_setting
    public function handlerAddModuleSetting($company_id){
        $setting = [];
        $setting["module"] = "SysDocument";
        $setting["company_id"] = $company_id;
        $setting["branch_id"] = getBrowseBranchId();
        $setting["permit_value"] = DAC_PERMIT_VALUE_LEADER;
        $setting["user_id"] = $this->_user_session->userId;
        $setting["type"] = DAC_SETTING_TYPE_BRANCH;//类型为商户端
        M("SysUserModuleSetting")->add($setting);
    }

    protected function handlerBeforeInsert(&$data)
    {
        $parentId = $data["parent_id"];
        $code = empty($data["code"]) ? Strings::randString(8) : substr($data["code"], 0, 8);
        if (empty($parentId)) {
            $data["code"] = $code;
        } else {
            $parent_code = M('sysBranch')->getFieldById($parentId, "code");
            $data["code"] = sprintf("%s_%s", $parent_code, $code);
        }
        $data["child_count"] = 0;
    }

    public function removeLoadingAction()
    {
//        cookie('adddominant_'.getBrowseBranchId(),null);
//        cookie('exportdominant_'.getBrowseBranchId(),null);
        $session_data = session('adddominant_' . getBrowseBranchId());
        if ($session_data['loading'] == 100) {
            unset($_SESSION['adddominant_' . getBrowseBranchId()]);
        }
        $this->ajaxReturn($session_data ?? ['loading' => 0]);
    }

    public function loadingAction()
    {
        if (IS_POST) {
            $loading = $_SESSION['adddominant_' . getBrowseBranchId()] ?? 0;
            while (true) {
                $this->ajaxReturn(buildMessage($loading, 0));
                usleep(1000);
            }
        } else {
            $this->loading = $_SESSION['adddominant_' . getBrowseBranchId()] ?? 0;
            $this->display();
        }

    }

    protected function loading($loading, $message, $error = 0)
    {
        session(strtolower(ACTION_NAME) . '_' . getBrowseBranchId(), ['loading' => $loading, 'message' => $message, 'error' => $error]);
    }

    protected function handlerAfterInsert($data)
    {
        if ($data["parent_id"]) {
            $sql = sprintf("update %s set child_count=child_count+" . $data['count'] . " where id=%d;", 'sys_branch', $data["parent_id"]);
            M()->execute($sql);
        }
    }

    /*
     * 匹配数据 - 导出
     */
    private function getMatchingRespondData()
    {
        $result = [
            ['value' => 'tag_type', 'text' => '客户类型'],
            ['value' => 'tag_origin', 'text' => '客户来源'],
            ['value' => 'name', 'text' => '公司名称'],
            ['value' => 'linkman', 'text' => '联系人'],
            ['value' => 'contact', 'text' => '手机号码'],
            ['value' => 'customer_leader_id', 'text' => '是否绑定微信'],
            //['value' => 'address', 'text' => '联系地址'],
            ['value' => 'invoice_title', 'text' => '发票抬头名称'],
            ['value' => 'taxpayer_identification', 'text' => '纳税人识别号'],
            ['value' => 'bank', 'text' => '开户银行'],
            ['value' => 'bank_account', 'text' => '银行账号'],
            ['value' => 'telephone', 'text' => '注册电话'],
            ['value' => 'reg_address', 'text' => '注册地址'],
            ['value' => 'corporation', 'text' => '法人代表'],
            ['value' => 'corporate_idcard', 'text' => '法人身份证'],
            ['value' => 'comments', 'text' => '备注'],
            ['value' => 'attach_group', 'text' => '最新沟通记录'],
        ];
        return $result;
    }

    /*
     * 匹配数据 - 导入
     */
    private function getMatchingData()
    {
        $result = [
            ['value' => 'tag_type', 'text' => '*客户类型'],
            ['value' => 'tag_origin', 'text' => '*客户来源'],
            ['value' => 'name', 'text' => '*公司名称'],
            ['value' => 'linkman', 'text' => '*联系人'],
            ['value' => 'contact', 'text' => '*手机号码'],
            ['value' => 'address', 'text' => '联系地址'],
            ['value' => 'invoice_title', 'text' => '发票抬头名称'],
            ['value' => 'taxpayer_identification', 'text' => '纳税人识别号'],
            ['value' => 'bank', 'text' => '开户银行'],
            ['value' => 'bank_account', 'text' => '银行账号'],
            ['value' => 'telephone', 'text' => '注册电话'],
            ['value' => 'reg_address', 'text' => '注册地址'],
        ];
        return $result;
    }

    /*
     * 整理数据 - 空值处理
     */
    protected function handlerArrangement(&$data)
    {
        $matching = $this->getMatchingData();
        foreach ($data as $key => $val) {
            foreach ($matching as $k => $v) {
                if (!isset($val[$v['value']]) || empty($val[$v['value']])) {
                    $data[$key][$v['value']] = '';
                }
            }
        }
    }

    /*
     * 二维去重
     */
    protected function array_unique_fb($data)
    {
        //去除指定不重复项 空值
        $appiont = 'name';
        $company_names = [];
        foreach ($data as $key => $val) {
            if(!$val['name'] || !$val['linkman'] || !$val['contact'] || !$val['tag_type'] || !$val['tag_origin']){
                $this->loading(100, '导入失败,请填写必填项!!', 1);
                $this->ajaxReturn(array("error"=>1,"message"=>"导入失败，请填写必填项！"));
            }
            if (!in_array($val[$appiont], $company_names) && !empty($val[$appiont])) {
                $company_names[$key] = $val[$appiont];
            } else if (empty($val[$appiont]) || in_array($val[$appiont], $company_names)) {
                unset($data[$key]);
            }
        }
        $companys = [];
        if ($data) {
            foreach ($data as $key => $val) {
                $temp_keys = array_keys($val);
                $temp[$key] = implode(',', $val);
            }
            $temps = array_unique($temp);
            foreach ($temps as $k => $v) {
                $temp_value = explode(',', $v);
                foreach ($temp_value as $ks => $vs) {
                    $temp_arr[$temp_keys[$ks]] = $vs;
                }
                $companys[$k] = $temp_arr;
            }
        }
        return compact('companys', 'company_names');
    }

    /*
      * Creatre Sheet Get Date -- Transverse or Vertical
      * param  {object}  sheet  true: Transverse , false: Vertical
      * param  {inter}   show
      * Date Jan 26,2018
      */
    private function handlerSheetData($sheet)
    {
        $heightRow = $sheet->getHighestRow();
        $heightColumn = $sheet->getHighestColumn();
        //循环读取excel文件,读取一条,插入一条
        $data = array();
        $showTypeJ = 5;
        $showTypeK = ord('A');
        $showTypeJMax = $heightRow;
        $showTypeKMax = $this->getExcelColumnChar($heightColumn, false);
        $matching = $this->getMatchingData();
        for ($j = $showTypeJ; $j <= $showTypeJMax; $j++) {
            for ($k = $showTypeK; $k <= $showTypeKMax; $k++) {
                $kc = $this->getExcelColumnChar($k, true);
                $cell = $kc . "4";
                $cell_value = "$kc$j";
                //if (!empty(trim($sheet->getCell($cell_value)->getValue()))) {
                $matching_text = array_column($matching,"text");
                $current_text= trim($sheet->getCell($cell)->getValue());
                //判断当前字段标题是否存在默认匹配字段中，如果不存在则设置为自定义字段
                if(in_array($current_text,$matching_text)){
                    foreach ($matching as $key => $val) {
                        if (strpos(trim($sheet->getCell($cell)->getValue()), $val['text']) !== false) {
                            $this->storage[$j][$val['value']] = trim($sheet->getCell($cell_value)->getValue());
                            break;
                        }
                    }
                }else{
                    //if(trim($sheet->getCell($cell_value) != "")){
                        $this->branch_information[$j][] = array("title"=>$current_text,"value"=>trim($sheet->getCell($cell_value)->getValue()));
                    //}
                }
                //}
            }
        }
    }

    /**
     * Create Format ASCII
     * @param $index
     * @param bool $getAsc
     * @return float|int|string
     */
    private function getExcelColumnChar($index, $getAsc = true)
    {
        if ($getAsc) {
            if (chr($index) > "Z") {
                return "A" . chr($index - ord("Z") - 1 + ord("A"));
            } else {
                return chr($index);
            }
        } else {
            if (strlen($index) == 2 && is_string($index)) {
                $start_str = "A";
                $end_str = "Z";
                $str1 = substr_replace($index, '', 1, 1);
                $str2 = substr_replace($index, '', 0, 1);
                $cycle = (ord($end_str) - ord($start_str) + 1);
                $cycle_sum = $cycle * (ord($str1) - ord($start_str) + 1);
                return $cycle_sum + ord($start_str) + ord($str2) - ord($start_str);
            } elseif (!is_string($index)) {
                return $this->getExcelColumnChar($index, true);
            } else {
                return ord($index);
            }
        }
    }

    /**
     * Create UTF8 Convert Tool
     * param $file_name
     * return null|string
     */
    private function convertFromUTF8($file_name)
    {
        if (empty($file_name)) {
            return null;
        } else {
            $userBrowser = $_SERVER['HTTP_USER_AGENT'];
            if (preg_match('/MSIE/i', $userBrowser)) {
                $file_name = urlencode($file_name);
            }
            return iconv('UTF-8', 'GBK//IGNORE', $file_name);
        }
    }

    /* tip
     * Created Set Excel Header Data
     * Date Jan 26,2018
     */
    protected function setExcelHeader($fileName)
    {
        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control:must-revalidate, post-check=0, pre-check=0");
        header("Content-Type:application/force-download");
        header("Content-Type:application/vnd.ms-execl");
        header("Content-Type:application/octet-stream");
        header("Content-Type:application/download");
        header('Content-Disposition:attachment;filename="' .date("Y-m-d",time()). "档案资料导出.xls" . '"');
        header("Content-Transfer-Encoding:binary");
    }

    public function getLevelListsAction()
    {
        $result = getRegion(I('post.level'), I('post.pid'));
        if ($result) {
            $this->ajaxReturn(['error' => 0, 'data' => $result]);
        } else {
            $this->ajaxReturn(['error' => 1, 'message' => '获取失败']);
        }
    }

//    protected function _after_getKeyNameList(&$list){
//        addCurrentBranch($list, $this->_user_session, ORG_COMPANY);
//    }
    public function keyNameListAction($selected = "", $term = "", $select_all = false)
    {
        $condition = $this->getChosenSearchCondition($selected, $term);
        $tree_list = D(CONTROLLER_NAME)->getUserBranchList($condition, $this->_user_session, false);
        $this->ajaxReturn($tree_list);
    }

    protected function _before_display_dataview(&$data)
    {
        parent::_before_display_dataview($data);
        $temp = getRegion('1');
        array_unshift($temp, ['id' => null, 'name' => '请选择省份']);
        $this->assign('province_lists', $temp);
        $this->assign('reg_city_lists', $data['reg_province'] ? getRegion('2', $data['reg_province']) : [['id' => null, 'name' => '请选择城市']]);
        $this->assign('reg_district_lists', $data['reg_city'] ? getRegion('3', $data['reg_city']) : [['id' => null, 'name' => '请选择县级市']]);
        $this->assign('city_lists', $data['province'] ? getRegion('2', $data['province']) : [['id' => null, 'name' => '请选择城市']]);
        $this->assign('district_lists', $data['city'] ? getRegion('3', $data['city']) : [['id' => null, 'name' => '请选择县级市']]);
        $this->assign("enterprise_types", ENTERPRISE_TYPES);
        $data['leader_view'] = $data['leader_id'] > 0 ? M('SysUser') -> where('id = '.$data['leader_id'])->getField('name') : '';
        //获取自定义
        if (isset($data['id']) && $data['id'] > 0) {
            $customers = D(CONTROLLER_NAME)->getCustomers($data['id']);
            $this->assign('customers', $customers);
            $account_jurisdiction = D('ComAccountJurisdiction');
            $account_jurisdiction->setObjectVarious([CAJ_BRANCH_RECHARGE,CAJ_BRANCH_WITHDRAWAL]);
            $account_jurisdiction->setObjectId($data['id']);
            $account_jurisdiction->setObjectType(1);
            $account_jurisdiction->getAccountSystemManage();
            $account_jurisdiction->handlerAccountCapitalJurisdiction([CAJ_BRANCH_CUSTOMER_CAPITAL]);
            $account_system = $account_jurisdiction->getStore('capital');
            $this->assign('account_belong',A('ComCapitalDetails')->handlerAccountSystem($account_system));
        }
        if(!$data["attach_group"]){
            $data["attach_group"] = genUniqidKey();
        }
        $this->getCompanyTag();
        if($data['tag_origin']){
            $data['tag_origin_value'] = M("ComCompanyTag")->where("id = ".$data['tag_origin'])->getField("value");
        }
        if($data['id']){
            $logs = $this->getLogAction($data['id']);
            $this->assign("logs",$logs);
        }
        if($data['customer_leader_id']){
            $result = M("SysUser")->where("id = ".$data['customer_leader_id'])->field("name,comments,head_pic")->find();
            $data['customer_leader_name'] = $result['comments'] == "" ? $result['name'] : $result['comments'];
            $data['customer_leader_head_pic'] = $result['head_pic'];
        }
        if($data['id']){
            $data['agreement_count'] = M("WrkAgreement a")->join("INNER join wrk_invoice_plan b on a.id = b.agreement_id")->where("a.company_id = ".$data['id'])->count();
        }
        if(!$data['leader_staff_name']){
            $data['leader_staff_name'] = $data['leader_name'];
        }
        $this->getModuleAccessUserInfo($data);
    }

    //获取客户档案中涉及的各模块权限人员信息
    public function getModuleAccessUserInfo(&$data){
        $permitValue = array(
            1=>"_notifiers",
            2=>"_visiblers",
            4=>"_collaborators"
        );
        $condition['a.company_id'] = $data['id'];
        $condition['a.branch_id'] = getBrowseBranchId();
        $condition['a.type'] = DAC_SETTING_TYPE_BRANCH;
        $user = M("SysUserModuleSetting a")
            ->join("sys_user b on a.user_id = b.id")
            ->where($condition)->field("a.permit_value,a.module,a.user_id,b.name,b.staff_name")->select();
        foreach ($user as $k=>$v){
            if($v['permit_value'] != 8){
                $name = $v['module'].$permitValue[$v['permit_value']];
                $data[$name] = empty($data[$name]) ? $v["user_id"] : $data[$name].",".$v["user_id"];
            }else{
                $data[$v['module']."_leader"] = $v["staff_name"] == "" ? $v["name"]:$v["staff_name"];
                $data[$v['module']."_leader_id"] = $v["user_id"];
            }
        }
        if($data['leader_id']){
            $result = M("SysUser")->where("id = ".$data['leader_id'])->field("name,staff_name,comments")->find();
            $data['leader'] = $result['staff_name'] == "" ? $result['name'] : $result['staff_name'];
        }

    }


    protected function _before_write($type, &$data)
    {
        if (empty(trim($data["name"]))) {
            $this->responseJSON(buildMessage("公司资料中的公司名称不能为空！", 1));
        }
        if ($type == parent::ACTION_ADD) {
            $data["parent_id"] = getBrowseBranchId();
            $data["branch_id"] = getBrowseBranchId();
            $data["is_valid"] = 1;
            $data["create_time"] = time();
            $data["attach_group"] = genUniqidKey();
        }else if($type == parent::ACTION_DETAIL){
            $customer_leader_id = M("SysBranch")->where("id = ".$data['id'])->getField("customer_leader_id");
            if($customer_leader_id != $data['customer_leader_id'] && $customer_leader_id){
                M("SysUserBranch")->where("branch_id = ".$data['id']." and user_id = ".$customer_leader_id ." and type <> 2")->delete();
            }
            $condition['id'] = array("neq",$data['id']);
        }
        $condition['name'] = $data['name'];
        $condition['parent_id'] = getBrowseBranchId();
        $condition['type'] = ORG_COMPANY;
        $result = M("SysBranch")->where($condition)->find();
        if($result){
            $this->responseJSON(buildMessage("名称重复！", 1));
        }
        /*if(mb_strlen($data["name"])> 16){
            $this->responseJSON(buildMessage("公司资料中的公司名称不能超过16个字符！", 1));
        }*/
//        if (empty($data["sales_id"])) {
//            $this->responseJSON(buildMessage("业务人员不能为空！", 1));
//        }
        if (empty($data["linkman"]) || trim($data["linkman"]) == '') {
            $this->responseJSON(buildMessage("公司信息中的联系人不能为空！", 1));
        }
        if (empty($data["contact"]) || trim($data["contact"]) == '') {
            $this->responseJSON(buildMessage("公司信息中的联系电话不能为空！", 1));
        } else if (!preg_match("/^1[34578]\d{9}$/", $data["contact"])) {
            $this->responseJSON(buildMessage("联系信息中的联系方式格式错误！", 1));
        }
        $data['collaborators'] = implode(",",I("post.collaborators"));
        $data['visiblers'] = implode(",",I("post.visiblers"));
        parent::_before_write($type, $data);
    }

    protected function _before_add(&$data)
    {
        $data["ent_scale"] = ENTERPRISE_SCALE_SMALL;
        parent::_before_add($data);
    }

    public function companyTagListAction(){
        $condition['branch_id'] = getBrowseBranchId();
        $condition['type'] = I("get.type");
        $result = M("ComCompanyTag")->where($condition)->field("id as value,value as text")->order("id")->select();
        $this->ajaxReturn($result);
    }

    public function getCompanyTag(){
        $condition['branch_id'] = getBrowseBranchId();
        $condition['type'] = 0;
        $result['tag_type'] = M("ComCompanyTag")->where($condition)->field("id as value,value as text")->select();
        $condition['type'] = 1;
        $result['tag_origin'] = M("ComCompanyTag")->where($condition)->field("id as value,value as text")->select();
        $this->assign("tag_type",$result['tag_type']);
        $this->assign("tag_origin",$result['tag_origin']);
        return $result;
    }

    public function setCompanyTagAction(){
        $condition['branch_id'] = getBrowseBranchId();
        $condition['type'] = 0;
        $condition['value'] = array("neq","成交客户");
        $tag_type = M("ComCompanyTag")->where($condition)->field("id as value,value as text")->select();
        $this->assign("tag_type",$tag_type);
        $condition['value'] = array("neq","商城订单");
        $condition['type'] = 1;
        $tag_origin = M("ComCompanyTag")->where($condition)->field("id as value,value as text")->select();
        $this->assign("tag_origin",$tag_origin);
        $this->display();
    }

    public function addTagAction(){
        $condition['type'] = I("post.type");
        $condition['value'] = I("post.value");
        $condition['branch_id'] = getBrowseBranchId();
        if(mb_strlen($condition['value']) > 8){
            $this->ajaxReturn(array("error"=>1,"message"=>"名称长度不能超过8个字符！"));
        }
        $count = M("ComCompanyTag")->where($condition)->count();
        if(!$count){
            $result = M("ComCompanyTag")->add($condition);
            if($result){
                $this->ajaxReturn(array("error"=>0,"message"=>"添加成功！","id"=>$result));
            }else{
                $this->ajaxReturn(array("error"=>1,"message"=>"添加失败！"));
            }
        }else{
            $this->ajaxReturn(array("error"=>1,"message"=>"该名称已存在！"));
        }
    }

    public function deleteTagAction(){
        $condition['id'] = I("post.id");
        if(I("post.name") == "成交客户" || I("post.name") == "商城订单"){
            $this->ajaxReturn(array("error"=>1,"message"=>"当前选择无法删除！"));
        }
        //删除前验证是否被使用
        $tmp['branch_id'] = getBrowseBranchId();
        $tmp['type'] = 1;
        if(I("post.type") == 0){
            $tmp['tag_type'] = I("post.id");
        }else{
            $tmp['tag_origin'] = I("post.id");
        }
        $tmp[''] = getBrowseBranchId();
        $count = M("SysBranch")->where($tmp)->count();
        if($count){
            $this->ajaxReturn(array("error"=>2,"message"=>"该标签已被客户档案使用，无法删除！"));
        }
        $result = M("ComCompanyTag")->where($condition)->delete();
        if($result){
            $this->ajaxReturn(array("error"=>0,"message"=>"删除成功！"));
        }else{
            $this->ajaxReturn(array("error"=>1,"message"=>"删除失败！"));
        }
    }

    public function editTagAction(){
        $condition['type'] = I("post.type");
        $condition['value'] = I("post.value");
        $condition['branch_id'] = getBrowseBranchId();
        $condition['id'] = array('neq',I("post.id"));
        $count = M("ComCompanyTag")->where($condition)->count();
        if(!$count){
            if(mb_strlen($condition['value']) > 8){
                $this->ajaxReturn(array("error"=>1,"message"=>"名称长度不能超过8个字符！"));
            }
            $condition['id'] = I("post.id");
            $result = M("ComCompanyTag")->save($condition);
            if($result !== false){
                $this->ajaxReturn(array("error"=>0,"message"=>"修改成功！"));
            }else{
                $this->ajaxReturn(array("error"=>1,"message"=>"修改失败！"));
            }
        }else{
            $this->ajaxReturn(array("error"=>1,"message"=>"该名称已存在！"));
        }
    }

    public function getLogAction($id){
        //$condition['content'] = I("post.id");
        $condition['content'] = $id;
        $condition['func'] = CONTROLLER_NAME;
        $result = M("SysLog")->where($condition)->order("id desc")->select();
        $operation = [
            "add"=>"创建客户档案",
            "update"=>"修改客户档案",
            "addDominant"=>"导入客户档案",
            "fileCompany"=>"归档",
            "reValid"=>"还原归档",
        ];
        foreach($result as $k=>$v){
            $result[$k]['func_name'] = $operation[$v['operation']] == "" ? "-":$operation[$v['operation']];
            $result[$k]['create_time'] = date("Y/m/d H:i",$v['create_time']);
        }
        //$this->ajaxReturn($result);
        return $result;
    }

    public function addAction(){
        if(IS_GET){
            $record = $this->_getAddData();
            $this->assign("model", $record);
            $this->assignPermissions();
            $temp = getRegion('1');
            array_unshift($temp, ['id' => null, 'name' => '请选择省份']);
            $this->assign('province_lists', $temp);
            $this->assign('reg_city_lists', [['id' => null, 'name' => '请选择城市']]);
            $this->assign('reg_district_lists',  [['id' => null, 'name' => '请选择县级市']]);
            $this->assign('city_lists', [['id' => null, 'name' => '请选择城市']]);
            $this->assign('district_lists', [['id' => null, 'name' => '请选择县级市']]);
            $this->assign("enterprise_types", ENTERPRISE_TYPES);
            $permissions = [];
            $menuList = $this->_user_session->permissionList[ACCESS_MENUS_KEY];
            if ($menuList[$this->_permission_name] && ($this->_user_session->isAdmin || $menuList[$this->_permission_name]["allow"])) {
                $permissions['ComCompany'] = $menuList["ComCompany"]['allow'];
                $permissions['SysDocument'] = $menuList["SysDocument"]['allow'];
                $permissions['WxOperateTemplate'] = $menuList["WxOperateTemplate"]['allow'];
                $permissions['WrkAgreement'] = $menuList["WrkAgreement"]['allow'];
                $permissions['WrkInvoicePlanDetail'] = $menuList["WrkInvoicePlanDetail"]['allow'];
                $permissions['WrkReceivables'] = $menuList["WrkReceivables"]['allow'];
                $permissions['WrkPrompt'] = $menuList["WrkPrompt"]['allow'];
            }
            $this->assign("menu_permissions",$permissions);
            $user = M("SysUser")->where("id = ".$this->_user_session->userId)->field("name,staff_name")->find();
            $staff_name = $user['staff_name'] == "" ? $user['name'] : $user['staff_name'];
            $this->assign("user_name",$staff_name);
            $this->assign("user_id",$this->_user_session->userId);
            $this->display();
        }else{
            parent::addAction();
        }
    }

    public function bind_userAction(){
        $this->display();
    }

    //获取有模块权限的员工
    public function queryModuleUsersAction(){
        $query = I("get.q");
        $module = I("get.module");
        $list = D("SysMenu")->queryModuleUsers($module, $query);
        $leader_id = I("get.leader_id");
        foreach($list as $k=>$v){
            if($leader_id == $v['id']){
                unset($list[$k]);
                continue;
            }
            $branch_name = M("SysUserBranch a")
                ->join("left join sys_branch b on a.branch_id = b.id")
                ->where("a.type = 2 and a.user_id = ".$v['id'])->getField("b.name");
            $list[$k]['branch_name'] = $branch_name == "" ? "无部门" : $branch_name;
            $list[$k]['value'] = $v['id'];
            $list[$k]['name'] = $v['staff_name'] == "" ? $v['name'] : $v['staff_name'];
            $list[$k]['text'] = $list[$k]['name']." - ".$list[$k]['branch_name'];
        }
        $this->ajaxReturn($list);
    }

    public function assignPermissions($controller = CONTROLLER_NAME) {
        parent::assignPermissions($controller);
        if ("detail" == ACTION_NAME){ //触发查看
            $id = I("get.id");
            if ($id) {
                $pv = D(CONTROLLER_NAME)->getPermitValue($id);
                if ($pv < DAC_PERMIT_VALUE_COLLABORATOR){ //可见或通知人，没有update权限
                    $this->permissions["update"] = 0;
                }
                $this->instance_permit = $pv; //返回权限值
            }
        }
    }

    public function permissionTipsAction(){
        $this->display();
    }

    public function handlerCompanyTag(&$data){
        $condition = [];
        $condition['branch_id'] = getBrowseBranchId();
        if($data['tag_type']){
            $condition['type'] = 0;
            $condition['value'] = $data['tag_type'];
            $data['tag_type'] = M("ComCompanyTag")->where($condition)->getField("id");
            if(!$data['tag_type']){
                $data['tag_type'] = M("ComCompanyTag")->add($condition);
            }
        }
        if($data['tag_origin']){
            $condition['type'] = 1;
            $condition['value'] = $data['tag_origin'];
            $data['tag_origin'] = M("ComCompanyTag")->where($condition)->getField("id");
            if(!$data['tag_origin']){
                $data['tag_origin'] = M("ComCompanyTag")->add($condition);
            }
        }
    }

    public function handlerCustomInformation($custom,$id){
        $add_list = [];
        foreach ($custom as $k=>$v){
            $condition['branch_id'] = $id;
            $condition['title'] = $v['title'];
            $condition['type'] = 0;
            $info_id = M("SysBranchInformation")->where($condition)->getField("id");
            if($info_id){
                $data['value'] = $v['value'];
                $data['updated_at'] = time();
                $data['id'] = $info_id;
                M("SysBranchInformation")->save($data);
            }else{
                $custom[$k]['type'] = 0;
                $custom[$k]['branch_id'] = $id;
                $custom[$k]['created_at'] = time();
                $custom[$k]['updated_at'] = time();
                $add_list[] = $custom[$k];
            }
        }
        M("SysBranchInformation")->addAll($add_list);
    }

	public function updateSocialSecurityAction()
	{
		$company_id = I('company_id');
		$insured_number = I('insured_number');
		$insurance_amount = I('insurance_amount');

		M('SysBranch')->where('id = '.$company_id)->save(array('insured_number'=>$insured_number,'insurance_amount'=>$insurance_amount));

		$this->ajaxReturn(['error' =>0,'message' => '修改成功']);
    }

    //移交客户档案
    public function transferStaffAction(){
        if(IS_POST){
            $company_id = I("post.company_id");
            $staff_id = I("post.staff_id");
            if(empty($company_id) || empty($staff_id)){
                $this->ajaxReturn(buildMessage("请选择移交的档案和员工！",1));
            }
            $model = D(CONTROLLER_NAME);
            try{
                $model->startTrans();
                $condition['id'] = array("in",$company_id);
                //客户档案负责人
                D("ComCompany")->where($condition)->setField("leader_id",$staff_id);
                $condition1['company_id'] = array("in",$company_id);
                $condition1['branch_id'] = getBrowseBranchId();
                $condition1['permit_value'] = DAC_PERMIT_VALUE_LEADER;
                $condition1['type'] = DAC_SETTING_TYPE_BRANCH;
                //客户档案中设置的模块负责人
                M("SysUserModuleSetting")->where($condition1)->setField("user_id",$staff_id);
                $model->commit();
                $this->ajaxReturn(buildMessage("操作成功！"));
            }catch (\Think\Exception $ex){
                $model->rollback();
                $this->ajaxReturn(buildMessage("操作失败！",1));
            }
        }else{
            $this->display();
        }
    }

    public function fileCompanyAction($id){
        $model = D(CONTROLLER_NAME);
        try{
            $model->startTrans();
            $condition['id'] = array("in",$id);
            $condition['is_valid'] = 1;
            $count = $model->where($condition)->count();
            if($count != count($id)){
                $this->ajaxReturn(buildMessage("操作失败，仅未归档客户档案可进行归档操作！",1));
            }
            $where['state'] = array("neq",3);//状态不等于已结束
            $where['company_id'] = array("in",$id);
            $agreement_count = M("WrkAgreement")->where($where)->count();
            if($agreement_count > 0){
                $this->ajaxReturn(buildMessage("操作失败<br>客户合同未结束，请先结束合同<br>方可进行客户档案归档操作",1));
            }
            $model->where(array("id"=>array("in",$id)))->setField("is_valid",0);
            foreach($id as $v){
                $this->addLog($v);
            }
            $model->commit();
            $this->ajaxReturn(buildMessage("操作成功<br>客户档案归档后，可在“已归档”页签中查看"));
        }catch (\Think\Exception $ex){
            $model->rollback();
            $this->ajaxReturn(buildMessage("操作失败！",1));
        }
    }

    public function reValidAction($id){
        $model = D(CONTROLLER_NAME);
        if (!$model->checkDataPermission($id)) {
            $this->ajaxReturn(buildMessage("操作失败：您没有权限更新此记录！", 1));
        }
        $result = $model->where("id = $id")->setField("is_valid",1);
        if($result){
            $this->addLog($id);
            $this->ajaxReturn(buildMessage("操作成功！"));
        }else{
            $this->ajaxReturn(buildMessage("操作失败！",1));
        }
    }

}

